{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/Wechat.jpg","path":"images/Wechat.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.ico","path":"images/favicon-16x16.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.ico","path":"images/favicon-32x32.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-docker-16x16.png","path":"images/favicon-docker-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-docker-32x32.png","path":"images/favicon-docker-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-rh-100x100.png","path":"images/favicon-rh-100x100.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-rh-16x16.png","path":"images/favicon-rh-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-rh-32x32.png","path":"images/favicon-rh-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/post/2018/03/4090800.jpeg","path":"images/post/2018/03/4090800.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"source/images/post/2015/12/03/intellij-plugin-banner.jpg","path":"images/post/2015/12/03/intellij-plugin-banner.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2016/01/12/python_logo.jpg","path":"images/post/2016/01/12/python_logo.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2017/11/10/spring-cloud-logo.jpg","path":"images/post/2017/11/10/spring-cloud-logo.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2018/01/29/openjdk-logo.jpg","path":"images/post/2018/01/29/openjdk-logo.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2018/01/29/openjdk.jpg","path":"images/post/2018/01/29/openjdk.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2018/01/30/debug-openjdk10-with-clion-ide.jpg","path":"images/post/2018/01/30/debug-openjdk10-with-clion-ide.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2018/01/30/edit-configuration.jpg","path":"images/post/2018/01/30/edit-configuration.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2018/05/01/rabbitmq-logo.png","path":"images/post/2018/05/01/rabbitmq-logo.png","modified":1,"renderable":0},{"_id":"source/images/post/2018/01/30/import-hotspot-src.jpg","path":"images/post/2018/01/30/import-hotspot-src.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-1.jpg","path":"images/post/2014/11/19/debug-jvm-on-linux-1.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-2.jpg","path":"images/post/2014/11/19/debug-jvm-on-linux-2.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2017/10/15/access_control_by_lua.jpg","path":"images/post/2017/10/15/access_control_by_lua.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-3.jpg","path":"images/post/2014/11/19/debug-jvm-on-linux-3.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-4.jpg","path":"images/post/2014/11/19/debug-jvm-on-linux-4.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-5.jpg","path":"images/post/2014/11/19/debug-jvm-on-linux-5.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2018/05/05/python_logo.jpg","path":"images/post/2018/05/05/python_logo.jpg","modified":1,"renderable":0},{"_id":"source/images/post/2014/10/01/configure-vim-highlight-on-mac.png","path":"images/post/2014/10/01/configure-vim-highlight-on-mac.png","modified":1,"renderable":0},{"_id":"source/images/post/2014/11/08/compile-openjdk7-on-mac.png","path":"images/post/2014/11/08/compile-openjdk7-on-mac.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"9bcd197b8ce46fd8463e9cb56e108a7eaa6c827f","modified":1522177481000},{"_id":"source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1523036403000},{"_id":"source/baidu_verify_GikywNyflS.html","hash":"37ec6274028f809de4568b51b5e9cfd0dcf8cafa","modified":1525894547000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1522177481000},{"_id":"themes/next/.gitignore","hash":"4600f2b61b2fe0d61f824bda9aa2b5d072f0e635","modified":1522251047000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1522177481000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1522177481000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1522177481000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1522177481000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1522177481000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1522177481000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1522177481000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1522177481000},{"_id":"themes/next/README.md","hash":"81c51e4b0fe5eaab6becfc0d6ef342bdd749a781","modified":1522177481000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1522177481000},{"_id":"themes/next/bower.json","hash":"b133dd92c7a825745a3b74474c2d738d9fd8ff07","modified":1522177481000},{"_id":"themes/next/crowdin.yml","hash":"fe22a450cc1272b7ac5476e6b33a999f8b8a2034","modified":1522177481000},{"_id":"themes/next/_config.yml","hash":"205c02701340c17efb3bef7ff945d432e92c0f16","modified":1528123769000},{"_id":"themes/next/package.json","hash":"77f15fd8e1bf54fe9e04513e38a70823225256cc","modified":1522177481000},{"_id":"source/about/index.md","hash":"bff42a5cd688165f88e994bdd3bf09fa43fce548","modified":1523036657000},{"_id":"source/categories/index.md","hash":"8a241baacbc18ea01294a522d6c3e3ca467559e8","modified":1522177481000},{"_id":"source/books/index.md","hash":"189ca945c576cea69e4fdcdc460f8decc2abdeb0","modified":1526580219000},{"_id":"source/images/Wechat.jpg","hash":"c7cd6bcd8dc83a1e9a4e69a8d16aec3a349c9853","modified":1523036749000},{"_id":"source/tags/index.md","hash":"6fa13c6aa7dea1193c5fce12cbb3ea642af7d3e8","modified":1522177481000},{"_id":"source/images/avatar.jpeg","hash":"2daa21a9a4ce9d4eeada6a70f1dbec468cb4644b","modified":1522338401000},{"_id":"source/images/avatar.png","hash":"4d799e720b5dabc3abcb7a2a41c690e4320a3161","modified":1522177481000},{"_id":"source/works/index.md","hash":"45c50eb4cba2a1b94afc5d7c884962014d79d3bd","modified":1527075851000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"476c9bb6616818be9d86567ad4e2e539c0e0da2f","modified":1522177481000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1522177481000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1522177481000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1522177481000},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1522177481000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1522177481000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1522177481000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1522177481000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1522177481000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1522177481000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1522177481000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"9f90a1a2df8c54edd3c8d99714ef0ce175983938","modified":1522177481000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1522177481000},{"_id":"themes/next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1522177481000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1522177481000},{"_id":"themes/next/languages/_en.yml","hash":"2397256c752276df666c1ff579902abb367b2380","modified":1522177481000},{"_id":"themes/next/languages/bn.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/ar.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/cs.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/da.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/bg.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/de.yml","hash":"f4dc655d4bd396b9c309da2a99b42c0456c3fe16","modified":1522177481000},{"_id":"themes/next/languages/es.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/el.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/et.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/fi.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/fa.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/fr.yml","hash":"dacb82b46d7b79656cdb75768a031fa73f178477","modified":1522177481000},{"_id":"themes/next/languages/he.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/hi.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/hr.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/hu.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/id.yml","hash":"c89ef3ed946a150f052f470f71393db6a6d3acaa","modified":1522177481000},{"_id":"themes/next/languages/it.yml","hash":"f0fb26ab84e5d0508ddc07bd67d581033520bb43","modified":1522177481000},{"_id":"themes/next/languages/ja.yml","hash":"02029ef467628369a88d1022746b861dca3fb921","modified":1522177481000},{"_id":"themes/next/languages/jv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/ko.yml","hash":"c95a00066bda4c04ce7bf65f8bf08e82c4d8fbcf","modified":1522177481000},{"_id":"themes/next/languages/lt.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/lv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/ms.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/no.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/nl.yml","hash":"8fc1165a138081d25ff4c171dea2980ce71fe2b0","modified":1522177481000},{"_id":"themes/next/languages/pa.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/pl.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/pt-BR.yml","hash":"268188db09c6779a570c8fc647ccc1a73322476c","modified":1522177481000},{"_id":"themes/next/languages/pt.yml","hash":"d8898007460ec50eb9969ba38d1b030613260ce7","modified":1522177481000},{"_id":"themes/next/languages/ro.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/ru.yml","hash":"26ae39b50887dcf0bf3ca3d820e5382fc11cc996","modified":1522177481000},{"_id":"themes/next/languages/sl.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/sr.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/sv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/th.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/uk.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1522177481000},{"_id":"themes/next/languages/tr.yml","hash":"efc298288935bf892efc9707b1ae4ea92d5fb7b4","modified":1522177481000},{"_id":"themes/next/languages/vi.yml","hash":"7792081d90122327f913f224f31965460936df5a","modified":1522177481000},{"_id":"themes/next/languages/zh-CN.yml","hash":"7cd6e43e71f3ec0e67ff3ea567ea7ba146198806","modified":1524487431000},{"_id":"themes/next/languages/zh-TW.yml","hash":"1f025215f1ac03dd4db9b4f87aa393ee43494bc3","modified":1522177481000},{"_id":"themes/next/layout/_layout.swig","hash":"0b5d6f22b8f2b402dc4765100b83829b059d483e","modified":1522348709000},{"_id":"themes/next/languages/zh-HK.yml","hash":"f7b3304e44959f74149a01d5f140fef64bfb3fa1","modified":1522177481000},{"_id":"themes/next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1522177481000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1522177481000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1522177481000},{"_id":"themes/next/layout/page.swig","hash":"3f9b2444f12251727ebbc28159f02e9e9489742e","modified":1522177481000},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1522177481000},{"_id":"themes/next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1522177481000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1522177481000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1522177481000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1522177481000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1522177481000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1522177481000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1522177481000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522177481000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1522177481000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1522177481000},{"_id":"themes/next/docs/ru/README.md","hash":"fd2ee8e3f5afed406f11f24b13e3174dd0d40611","modified":1522177481000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"98ef4dc1a7a12320211ffb36d264cd86ffcce0dd","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"cbb419ccef174ef1a3fff5fc74261c600fdeec0e","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c5a7dae1e7dd0163352178c198e06058c672fd34","modified":1522177481000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1522177481000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522177481000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1522177481000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1522177481000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"ac76c0187ad5053cda99ef58d7d8e37e8154c99c","modified":1525031457000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"464082e431ea5b06df782d5f312ee25be9e5f169","modified":1522177481000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1522177481000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1522177481000},{"_id":"themes/next/layout/_macro/post.swig","hash":"e19ae6df12d5d5b363813aacfdcc5a4bd67a6a56","modified":1525031519000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1522177481000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"355ddd5b8af696f7bffb183addd7e84c0a4e2123","modified":1522177481000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1522177481000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1522177481000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1522177481000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f62e6198dcc41b1cb6a1036094e724065d4e4008","modified":1522177481000},{"_id":"themes/next/layout/_partials/header.swig","hash":"6bdae92508fb5009b023386341f3b161a4ac6c70","modified":1522177481000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1522177481000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1522177481000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1522177481000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1522177481000},{"_id":"themes/next/layout/_partials/sub-menu.swig","hash":"9783a9569fe8344ed287013156e52ca1b0a25544","modified":1522177481000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1522177481000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1522177481000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1522177481000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1522177481000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1522177481000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1522177481000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1522177481000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1522177481000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1522177481000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1522177481000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1522177481000},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1522177481000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1522177481000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1522177481000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1522177481000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1522177481000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1522177481000},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1522177481000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1522177481000},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1522177481000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1522177481000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1522177481000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1522177481000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522177481000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522177481000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1522177481000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1522177481000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1522177481000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1522177481000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1522177481000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1522177481000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1522177481000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522177481000},{"_id":"themes/next/source/images/favicon-16x16.ico","hash":"57e19c18bfe2f77a1bc3229dc104114dc171ce72","modified":1525030877000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522177481000},{"_id":"themes/next/source/images/favicon-32x32.ico","hash":"603dd2e2778bad8c8c0769017a1dbe9ee18316c5","modified":1525030598000},{"_id":"themes/next/source/images/favicon-docker-16x16.png","hash":"e6d5ef6f849b2b59c127fefe1312d891137601a6","modified":1528123127000},{"_id":"themes/next/source/images/favicon-docker-32x32.png","hash":"b00dffc01cc79e544175bc7eb2481a616a3804c6","modified":1528123227000},{"_id":"themes/next/source/images/favicon-rh-100x100.png","hash":"12aa20859a73d6d3d03faecf3e7af58738bb61ce","modified":1528124090000},{"_id":"themes/next/source/images/favicon-rh-16x16.png","hash":"75eab12cc58a96e2ea575cb7081de41274554c1b","modified":1528123196000},{"_id":"themes/next/source/images/favicon-rh-32x32.png","hash":"c2a7491c509e9a26fa95b21b42d810fa97f13a98","modified":1528123209000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522177481000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1522177481000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522177481000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1522177481000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1522177481000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522177481000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522177481000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522177481000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522177481000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522177481000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522177481000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522177481000},{"_id":"source/_posts/2018/01/.DS_Store","hash":"5bff3ae690c1b328380e4521a3ffa11d95e9a7f3","modified":1525051174000},{"_id":"source/images/post/2018/.DS_Store","hash":"dd3bf6d5840c9f669f19371aaea44074aa48b59b","modified":1525024702000},{"_id":"themes/next/layout/_macro/menu/menu-badge-1.swig","hash":"7ffc5c159ab566805ceda6b8c7a4149a7e296116","modified":1522177481000},{"_id":"themes/next/layout/_macro/menu/menu-badge-2.swig","hash":"7b96a0e6079e845573338523cea4437817a4b1e1","modified":1522177481000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"6a04cd1ef9ebac103d86b61505fa9b0f26268fdc","modified":1522177481000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1522177481000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"cd7e3331a61939c820e0437bf5d815cb0a42fefb","modified":1522177481000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"9f7aa33a620aea6ede1fb907b61fd071c018c525","modified":1522177481000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1522177481000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1522177481000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1522177481000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1522177481000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1522177481000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1522177481000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1522177481000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522177481000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"a5e312dbeb09df15af1dcf89ea2a0475dcda96ed","modified":1523280300000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1522177481000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1522177481000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1522177481000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1522177481000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1522177481000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1522177481000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1522177481000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1522177481000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1522177481000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1522177481000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1522177481000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1522177481000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1522177481000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1522177481000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1522177481000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1522177481000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1522177481000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1522177481000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1522177481000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1522177481000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1522177481000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1522177481000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a0b1430e6d56308ef00f02561c4f8588879b098c","modified":1523031018000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1522177481000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1522177481000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"376789d3954805385ae49d70ca7254c6491d11cb","modified":1525879030000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3fb22fce1612be30e4efa366a0af68a6d2cd973b","modified":1523277894000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1522177481000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1522177481000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1522177481000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1522177481000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1522177481000},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1522177481000},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1522177481000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1522177481000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1522177481000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"d8bf9cb15d9d91c7ad022ba2954b5b4d326f17f7","modified":1522250172000},{"_id":"themes/next/source/js/src/utils.js","hash":"bb67eb5b5f301a92503c81b1f8edd2a4d1fcc879","modified":1522177481000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1522250172000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1522250811000},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1522250172000},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"a40db80eb6386b085ff810fd3e302f12e76b8df7","modified":1522250172000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1522250811000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1522250811000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1522250811000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1522250811000},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1522250334000},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1522250334000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1522250334000},{"_id":"themes/next/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1522250420000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1522250334000},{"_id":"themes/next/source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1522250420000},{"_id":"themes/next/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1522250420000},{"_id":"themes/next/source/lib/reading_progress/README.md","hash":"9b00c4ce1a739c825df4e51977f7525d2c9f6b81","modified":1522250420000},{"_id":"themes/next/source/lib/reading_progress/package.json","hash":"7bcb3787978a0c445b1bd3dfeca6ae6016c98abc","modified":1522250420000},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","hash":"174678a8e2a24763e3fe8b9c25496fdf6ee0220b","modified":1522250420000},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","hash":"98af8d99819882904f9b1a9254bebf40602e1843","modified":1522250420000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1522177481000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1522177481000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1522177481000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1522177481000},{"_id":"source/_posts/2011/01/10/hello-world.md","hash":"b076b9416165ac70a9b91d625f58b4ab9bba7ec1","modified":1522177481000},{"_id":"source/_posts/2014/01/20/install-and-configure-mysql-on-centos.md","hash":"1648f056a530c87cd87b24e0b1da9ee4a61ca788","modified":1522177481000},{"_id":"source/_posts/2014/10/01/configure-vim-syntax-highlight-on-mac.md","hash":"fa02087ac6d73fbc87dc1e4c2aa387fae84ce627","modified":1522177481000},{"_id":"source/_posts/2014/11/08/compile-jdk7-source-code-on-centos.md","hash":"0bf2f40415aa2b42b33c418bd30ff93864b57792","modified":1522177481000},{"_id":"source/_posts/2014/11/19/build-hotspot-jvm-debug-environment-on-linux.md","hash":"dfb7de2e419f1f426c54fe5d2ce8fe396b40d514","modified":1522177481000},{"_id":"source/_posts/2014/12/01/analyse-jvm-startup-flow-through-source-code-create.md","hash":"f73cb1758973f4db4459fdc10f1dd43f3777f1a6","modified":1525033868000},{"_id":"source/_posts/2015/12/03/design-of-intellij-plugin-open-terminal-here.md","hash":"8af2160148c71f7468b825faa4100514fa0baaa6","modified":1522350523000},{"_id":"source/_posts/2014/12/01/analyse-jvm-startup-flow-through-source-code-initialize.md","hash":"772b4ddabbaf3d4b77c8b674d36f85b2b2a66458","modified":1525033868000},{"_id":"source/_posts/2017/07/21/design-of-universal-code-generator-coffee-maker.md","hash":"59b098ecd77fdecbdbfc49c758e11a6d753f4e54","modified":1525031279000},{"_id":"source/_posts/2017/10/15/resource-access-control-via-lua-script-in-nginx.md","hash":"64e4c547974f1fc7a9187d2fe66c5fb29f3deba2","modified":1525893655000},{"_id":"source/_posts/2017/08/30/start-up-a-file-server-using-one-python-command.md","hash":"17c586b67154adb07f629ba03cc53cd8ebc71fe4","modified":1523034819000},{"_id":"source/_posts/2017/11/10/use-environment-variable-or-command-line-parameter-in-spring-cloud.md","hash":"af07a67ad15b70b6b0e9b1f3b3ed5b67f097cbb5","modified":1526316614000},{"_id":"source/_posts/2017/11/14/multiple-files-and-directories-search-in-config-center-of-spring-cloud.md","hash":"93987ac4c6030befdb18c4f68fe1770d063e8705","modified":1526316614000},{"_id":"source/_posts/2017/11/16/set-http-message-converter-as-fastjson-in-spring-cloud.md","hash":"4ccf7267aa78797e620f61467dbb5bf8147404f5","modified":1526316614000},{"_id":"source/_posts/2017/11/20/using-redis-in-spring-cloud.md","hash":"ba6e96a16a4c0698cb0d995eec359504fdff6c4e","modified":1526316614000},{"_id":"source/_posts/2017/11/22/cors-filter-settings-in-zuul-of-spring-cloud.md","hash":"bd0e4c31a1809a492fdbe01818c2fe2ddd59da85","modified":1526316614000},{"_id":"source/_posts/2017/12/02/customize-feign-decoder-in-spring-cloud.md","hash":"6e88f01d70a1a96431d3e5c245f3ddf8e849f673","modified":1526316614000},{"_id":"source/_posts/2018/01/29/compile-openjdk10-source-code-on-mac.md","hash":"6b6e1b2beea257f23ae829678849f0bcdbee0d2e","modified":1525077982000},{"_id":"source/_posts/2018/01/30/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1525051185000},{"_id":"source/_posts/2018/01/30/debug-openjdk10-source-code-on-mac-with-clion-ide.md","hash":"2a6bd5784b1d172048336a43f70eef4a489065f3","modified":1525880164000},{"_id":"source/_posts/2018/02/12/analysis-of-hotspot-jvm-java-class-file-structure.md","hash":"08e1a08efbff0fd94b3b8dbe29dceab542422d5c","modified":1526834790000},{"_id":"source/_posts/2018/02/23/analysis-of-hotspot-jvm-startup-process-creation.md","hash":"582a0c63c0e01b04c36f0a13f403a7d31fe12c28","modified":1526835272000},{"_id":"source/_posts/2018/02/23/analysis-of-hotspot-jvm-startup-process-initialization.md","hash":"ee4ca4b188051ee46ed30c4bcb3e03d1bdb5ecd7","modified":1526835313000},{"_id":"source/_posts/2018/02/24/analysis-of-hotspot-jvm-java-object-model-oop-klass.md","hash":"ad76397d91851ee8a156fa2ab5561c4a568337bc","modified":1527092935000},{"_id":"source/_posts/2018/02/25/analysis-of-hotspot-jvm-java-object-header.md","hash":"a070234e1b5efba9c195f98b570ce1e9e627af6c","modified":1527093225000},{"_id":"source/_posts/2018/04/05/analysis-of-hotspot-jvm-system-gc.md","hash":"bd74ea0c7734b5116fc703840fe9b05991d44b75","modified":1528047658000},{"_id":"source/_posts/2018/04/06/analysis-of-hotspot-jvm-register-natives.md","hash":"1277d1f51fda03667d36c140cebd0b8738b634a9","modified":1528049556000},{"_id":"source/_posts/2018/05/01/consume-mq-message-with-multithreading.md","hash":"2d279c062efb592169d4841a801403de8dc0a1d7","modified":1525889347000},{"_id":"source/_posts/2018/05/06/ascii.txt","hash":"5c684ee86fa61a0557778257a6c40af1f717fb1d","modified":1525888966000},{"_id":"source/_posts/2018/05/06/async-callback-model-in-cluster-architecture.md","hash":"bc9d12e5722d540f6305c12244e9b042480ab8bb","modified":1525888966000},{"_id":"source/_posts/2018/05/05/parse_web_content_and_download_files_using_python.md","hash":"9a58d8272fd2bbdd4e096eb69efa26758f02ab57","modified":1527095917000},{"_id":"source/_posts/2018/05/15/load_instance_class_ascii_flow.txt","hash":"f2a535ba4352a1913fe51472abd61f40fcbe2ae5","modified":1528617721000},{"_id":"source/_posts/2018/05/15/analysis-of-hotspot-java-lang-class-forName.md","hash":"f01a74b3b473dd171a4d725f78d073d183467b26","modified":1528619587000},{"_id":"source/images/post/2018/04/.DS_Store","hash":"5b7b6f6ec8158fe197e02d1e1be8400ed9ed1df2","modified":1525025570000},{"_id":"source/images/post/2018/03/4090800.jpeg","hash":"2daa21a9a4ce9d4eeada6a70f1dbec468cb4644b","modified":1522177481000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1522177481000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1522177481000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1522177481000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1522177481000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1522177481000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1522177481000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1522177481000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1522177481000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"a863f2c8bae1fbccdc181a5d178b808cd80c5b5e","modified":1522177481000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1522177481000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1522250172000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1522250172000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"b85b75426ff7569d54a1f69689895315e80ed85d","modified":1522250172000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1522250811000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1522250811000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1522250811000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1522177481000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522250811000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522250811000},{"_id":"source/images/post/2015/12/03/intellij-plugin-banner.jpg","hash":"37c57494f206569575e13e9ba91677a14dc0c546","modified":1522349241000},{"_id":"source/images/post/2016/01/12/python_logo.jpg","hash":"31c7b91d9154fe77dd84c36129b48344879eb204","modified":1522508128000},{"_id":"source/images/post/2017/11/10/spring-cloud-logo.jpg","hash":"dbc6a03ad2855612938bac7c49f13cd03156d748","modified":1526316745000},{"_id":"source/images/post/2018/01/29/openjdk-logo.jpg","hash":"e6cafe3c90866a44128677a06f726089cfee0f31","modified":1525026114000},{"_id":"source/images/post/2018/01/29/openjdk.jpg","hash":"5828f475e4283b8bbce1804e9195d2c91b924789","modified":1525026315000},{"_id":"source/images/post/2018/01/30/debug-openjdk10-with-clion-ide.jpg","hash":"9e431b268f28856439e96944ed9a7bc96444d083","modified":1525025018000},{"_id":"source/images/post/2018/01/30/edit-configuration.jpg","hash":"da5b4694a73e5e6ca4f2f320fefa0266bd4e4f05","modified":1525025038000},{"_id":"source/images/post/2018/05/01/rabbitmq-logo.png","hash":"28caa2494b30974837f8a01163163dac07fe7856","modified":1525272384000},{"_id":"source/images/post/2018/01/30/import-hotspot-src.jpg","hash":"0f80747e140bddb1045623b3b02ebed1017140e7","modified":1525025055000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"0b57ca04dc3998cf70bb90d777b0db05f3928b82","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1522177481000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522177481000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1522177481000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1522250172000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1522250172000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522250811000},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-1.jpg","hash":"91c95abc79edd1183559d93959cb470e0b0a2132","modified":1522177481000},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-2.jpg","hash":"075755b982a59aa4b1cf9686ed328784ecfa4442","modified":1522177481000},{"_id":"source/images/post/2017/10/15/access_control_by_lua.jpg","hash":"86e88873ff5ded423f73c94ae8a13b1456e60915","modified":1525892929000},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-3.jpg","hash":"41c485b3b467012017a4057697e980f1aae01509","modified":1522177481000},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-4.jpg","hash":"6aed6c9e0d5a8c5649f997e9d4f9b1791a9765db","modified":1522177481000},{"_id":"source/images/post/2014/11/19/debug-jvm-on-linux-5.jpg","hash":"7c219bfaee1b59e521723e973527f3dc244fbe3c","modified":1522177481000},{"_id":"source/images/post/2018/05/05/python_logo.jpg","hash":"e4ce19a733c45a8eaac2092756cfe8be3e85c378","modified":1527095797000},{"_id":"source/images/post/2014/10/01/configure-vim-highlight-on-mac.png","hash":"cbb2bf9cd32578d71dabae8ea9e3df1f8183a8cc","modified":1522177481000},{"_id":"source/images/post/2014/11/08/compile-openjdk7-on-mac.png","hash":"dd088ed47481f6478b5120f828e0d1225083554a","modified":1522177481000}],"Category":[{"name":"默认分类","_id":"cji8ksa1d00082zs689asb6v4"},{"name":"MySQL","_id":"cji8ksa1s000d2zs6564e8fkz"},{"name":"Mac","_id":"cji8ksa1v000i2zs64hc6ys31"},{"name":"OpenJDK","_id":"cji8ksa1y000o2zs6b0abd93q"},{"name":"IntelliJ IDEA","_id":"cji8ksa2800142zs61r0nregq"},{"name":"MyBatis","_id":"cji8ksa2b001d2zs6mzqgqtmh"},{"name":"Python","_id":"cji8ksa2i001p2zs655hrw1dn"},{"name":"Lua","_id":"cji8ksa2l001x2zs65g46api1"},{"name":"Spring Cloud","_id":"cji8ksa2o00232zs6hqt7s05q"},{"name":"多线程","_id":"cji8ksa3000322zs6l8m07bos"},{"name":"架构","_id":"cji8ksa3100392zs6rfwz692j"}],"Data":[],"Page":[{"_content":"GikywNyflS","source":"baidu_verify_GikywNyflS.html","raw":"GikywNyflS","date":"2018-05-09T19:37:02.000Z","updated":"2018-05-09T19:35:47.000Z","path":"baidu_verify_GikywNyflS.html","title":"","comments":1,"layout":"page","_id":"cji8ks9mb00002zs68wserndp","content":"GikywNyflS","site":{"data":{}},"excerpt":"","more":"GikywNyflS"},{"title":"关于我","date":"2018-03-25T16:41:09.000Z","type":"about","comments":0,"_content":"\n\n\n\n![我的微信](/images/Wechat.jpg)","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-03-26 00:41:09\ntype: \"about\"\ncomments: false\n---\n\n\n\n\n![我的微信](/images/Wechat.jpg)","updated":"2018-04-06T17:44:17.000Z","path":"about/index.html","layout":"page","_id":"cji8ks9on00012zs6q1zlfun2","content":"<p><img src=\"/images/Wechat.jpg\" alt=\"我的微信\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/Wechat.jpg\" alt=\"我的微信\"></p>\n"},{"title":"分类","date":"2018-03-25T16:39:44.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-03-26 00:39:44\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-03-27T19:04:41.000Z","path":"categories/index.html","layout":"page","_id":"cji8ks9oo00022zs6bsf0lb5e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"我的书单","date":"2018-03-28T15:53:32.000Z","type":"books","comments":0,"_content":"\n\n> 孔子曰：天若有情天亦老，人丑就得多读书。\n> 孟子曰：老乡，你说得对！\n\n***\n\n# Java基础\n- 《Java编程思想》\n- 《Effective Java》\n- 《Java并发编程实战》\n- 《Head First Java》\n- 《Java7并发编程手册》\n- 《分布式Java应用基础与实战》\n- 《编写高质量代码 改善Java程序的151个建议》\n- 《Java程序性能优化--让你的Java程序更快更稳定》\n- 《重构 改善既有代码的设计》\n- 《Java性能优化权威指南》\n- 《Java多线编程核心技术》\n- 《Java并发编程的艺术》\n- 《Java多线程编程实战指南》\n- 《实战Java高并发程序设计》\n- 《代码大全》\n\n# 框架\n- 《Struts 2 技术详解》\n- 《精通Spring 2.x：企业应用开发详解》\n- 《Lucene实战（第二版）》\n- 《Spring技术内幕》\n- 《Spring Boot实战》\n\n# JVM\n- 《深入Java虚拟机（第二版）》\n- 《深入理解Java虚拟机，JVM高级特性与最佳实践》\n- 《HotSpot实战》\n- 《自己动手写Java虚拟机》\n- 《揭秘Java虚拟机：JVM设计原理与实现》\n- 《大规模Java平台虚拟化与调优》\n\n# 操作系统\n- 《Linux从入门到精通》\n- 《鸟哥的Linux私房菜》\n- 《UNIX网络编程》\n- 《Unix环境高级编程（第三版）》\n- 《Linux/UNIX系统编程手册（上册）》\n- 《Linux/UNIX系统编程手册（下册）》\n\n# 通信协议\n- 《HTTP权威指南》\n- 《图解HTTP》\n- 《图解TCP/IP》\n- 《TCP/IP详解卷1 协议》\n- 《TCP/IP详解卷2 实现》\n- 《TCP/IP详解卷3 TCP事物协议》\n\n# 服务器\n- 《深入剖析Tomcat》\n- 《JBoss实战：服务器配置指南》\n- 《实战Nginx：取代Apache的高性能Web服务器》\n\n# 数据库\n- 《MySQL5权威指南》\n\n# 中间件\n- 《Redis实战》\n- 《Redis设计与实现》\n\n# 网络编程\n- 《Netty权威指南》\n- 《Netty实战》\n\n# 架构\n- 《架构之美》\n- 《大型网站技术架构  核心原理与案例分析》\n- 《大型网站系统与Java中间件实践》\n- 《架构探险：从零开始写Java Web框架》\n- 《高可用架构（第1卷）》\n- 《分布式服务框架原理与实践》\n- 《架构解密：从分布式到微服务》\n- 《决战618：探秘京东技术取胜之道》\n- 《人人都是架构师：分布式系统架构落地与瓶颈突破》\n- 《DevOps：软件架构师行动指南》\n- 《实用软件架构：从系统环境到软件部署》\n- 《企业IT架构转型之道 阿里巴巴中台战略思想与架构实战》\n- 《亿级流量网站架构核心技术 跟开涛学搭建高可用高并发系统》\n- 《架构即未来：现代企业可扩展的Web架构、流程和组织（原书第2版）》\n- 《架构真经：互联网技术架构的设计原则（原书第2版）》\n\n# 大数据\n- 《Hadoop权威指南》\n- 《实战Hadoop--开启通向云计算的捷径》\n\n# 算法/数据结构\n- 《算法导论》\n- 《数据结构与算法分析 Java语言描述》\n\n# 设计模式\n- 《Java与模式》\n- 《研磨设计模式》\n\n# 容器/云\n- 《Docker实战》\n- 《Docker进阶与实战》\n- 《Spring Cloud与Docker微服务架构实战》\n\n# 编译原理\n- 《编译原理》\n- 《编程语言实现模式》\n- 《两周自制脚本语言》\n\n# 团队管理\n- 《狼性团队》\n- 《狼性管理》\n- 《狼性执行》\n- 《团队制胜》\n- 《胜在团队，赢在执行》\n\n# 互联网\n- 《大数据时代》\n- 《人人时代》\n- 《认知盈余》\n- 《参与感》\n- 《黑天鹅》\n- 《思考 快与慢》\n- 《从0到1 开启商业与未来的秘密》\n- 《O2O 移动互联网时代的商业革命》\n- 《变革中国：市场经济的中国之路》\n- 《平台战略：正在席卷全球的商业模式革命》\n- 《翻转世界 互联网思维与新技术如何改变未来》\n\n# 心理学\n- 《行为心理学》\n- 《欲望心理学》\n- 《乌合之众：群体心理研究》\n\n# 经济学\n- 《经济学原理》\n\n# 其他\n- 《摸着石头过河》\n- 《人月神话》\n- 《解密无印良品》\n- 《断舍离》\n- 《极简力》\n- 《浮生六记》\n- 《随遇而安》\n- 《TED演讲的8个秘诀：学习18分钟高效表达》\n- 《极简主义：风靡欧美的工作与生活理念》\n\n","source":"books/index.md","raw":"---\ntitle: 我的书单\ndate: 2018-03-28 23:53:32\ntype: \"books\"\ncomments: false\n---\n\n\n> 孔子曰：天若有情天亦老，人丑就得多读书。\n> 孟子曰：老乡，你说得对！\n\n***\n\n# Java基础\n- 《Java编程思想》\n- 《Effective Java》\n- 《Java并发编程实战》\n- 《Head First Java》\n- 《Java7并发编程手册》\n- 《分布式Java应用基础与实战》\n- 《编写高质量代码 改善Java程序的151个建议》\n- 《Java程序性能优化--让你的Java程序更快更稳定》\n- 《重构 改善既有代码的设计》\n- 《Java性能优化权威指南》\n- 《Java多线编程核心技术》\n- 《Java并发编程的艺术》\n- 《Java多线程编程实战指南》\n- 《实战Java高并发程序设计》\n- 《代码大全》\n\n# 框架\n- 《Struts 2 技术详解》\n- 《精通Spring 2.x：企业应用开发详解》\n- 《Lucene实战（第二版）》\n- 《Spring技术内幕》\n- 《Spring Boot实战》\n\n# JVM\n- 《深入Java虚拟机（第二版）》\n- 《深入理解Java虚拟机，JVM高级特性与最佳实践》\n- 《HotSpot实战》\n- 《自己动手写Java虚拟机》\n- 《揭秘Java虚拟机：JVM设计原理与实现》\n- 《大规模Java平台虚拟化与调优》\n\n# 操作系统\n- 《Linux从入门到精通》\n- 《鸟哥的Linux私房菜》\n- 《UNIX网络编程》\n- 《Unix环境高级编程（第三版）》\n- 《Linux/UNIX系统编程手册（上册）》\n- 《Linux/UNIX系统编程手册（下册）》\n\n# 通信协议\n- 《HTTP权威指南》\n- 《图解HTTP》\n- 《图解TCP/IP》\n- 《TCP/IP详解卷1 协议》\n- 《TCP/IP详解卷2 实现》\n- 《TCP/IP详解卷3 TCP事物协议》\n\n# 服务器\n- 《深入剖析Tomcat》\n- 《JBoss实战：服务器配置指南》\n- 《实战Nginx：取代Apache的高性能Web服务器》\n\n# 数据库\n- 《MySQL5权威指南》\n\n# 中间件\n- 《Redis实战》\n- 《Redis设计与实现》\n\n# 网络编程\n- 《Netty权威指南》\n- 《Netty实战》\n\n# 架构\n- 《架构之美》\n- 《大型网站技术架构  核心原理与案例分析》\n- 《大型网站系统与Java中间件实践》\n- 《架构探险：从零开始写Java Web框架》\n- 《高可用架构（第1卷）》\n- 《分布式服务框架原理与实践》\n- 《架构解密：从分布式到微服务》\n- 《决战618：探秘京东技术取胜之道》\n- 《人人都是架构师：分布式系统架构落地与瓶颈突破》\n- 《DevOps：软件架构师行动指南》\n- 《实用软件架构：从系统环境到软件部署》\n- 《企业IT架构转型之道 阿里巴巴中台战略思想与架构实战》\n- 《亿级流量网站架构核心技术 跟开涛学搭建高可用高并发系统》\n- 《架构即未来：现代企业可扩展的Web架构、流程和组织（原书第2版）》\n- 《架构真经：互联网技术架构的设计原则（原书第2版）》\n\n# 大数据\n- 《Hadoop权威指南》\n- 《实战Hadoop--开启通向云计算的捷径》\n\n# 算法/数据结构\n- 《算法导论》\n- 《数据结构与算法分析 Java语言描述》\n\n# 设计模式\n- 《Java与模式》\n- 《研磨设计模式》\n\n# 容器/云\n- 《Docker实战》\n- 《Docker进阶与实战》\n- 《Spring Cloud与Docker微服务架构实战》\n\n# 编译原理\n- 《编译原理》\n- 《编程语言实现模式》\n- 《两周自制脚本语言》\n\n# 团队管理\n- 《狼性团队》\n- 《狼性管理》\n- 《狼性执行》\n- 《团队制胜》\n- 《胜在团队，赢在执行》\n\n# 互联网\n- 《大数据时代》\n- 《人人时代》\n- 《认知盈余》\n- 《参与感》\n- 《黑天鹅》\n- 《思考 快与慢》\n- 《从0到1 开启商业与未来的秘密》\n- 《O2O 移动互联网时代的商业革命》\n- 《变革中国：市场经济的中国之路》\n- 《平台战略：正在席卷全球的商业模式革命》\n- 《翻转世界 互联网思维与新技术如何改变未来》\n\n# 心理学\n- 《行为心理学》\n- 《欲望心理学》\n- 《乌合之众：群体心理研究》\n\n# 经济学\n- 《经济学原理》\n\n# 其他\n- 《摸着石头过河》\n- 《人月神话》\n- 《解密无印良品》\n- 《断舍离》\n- 《极简力》\n- 《浮生六记》\n- 《随遇而安》\n- 《TED演讲的8个秘诀：学习18分钟高效表达》\n- 《极简主义：风靡欧美的工作与生活理念》\n\n","updated":"2018-05-17T18:03:39.000Z","path":"books/index.html","layout":"page","_id":"cji8ks9oo00032zs6z1wddq00","content":"<blockquote>\n<p>孔子曰：天若有情天亦老，人丑就得多读书。<br>孟子曰：老乡，你说得对！</p>\n</blockquote>\n<hr>\n<h1 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h1><ul>\n<li>《Java编程思想》</li>\n<li>《Effective Java》</li>\n<li>《Java并发编程实战》</li>\n<li>《Head First Java》</li>\n<li>《Java7并发编程手册》</li>\n<li>《分布式Java应用基础与实战》</li>\n<li>《编写高质量代码 改善Java程序的151个建议》</li>\n<li>《Java程序性能优化–让你的Java程序更快更稳定》</li>\n<li>《重构 改善既有代码的设计》</li>\n<li>《Java性能优化权威指南》</li>\n<li>《Java多线编程核心技术》</li>\n<li>《Java并发编程的艺术》</li>\n<li>《Java多线程编程实战指南》</li>\n<li>《实战Java高并发程序设计》</li>\n<li>《代码大全》</li>\n</ul>\n<h1 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h1><ul>\n<li>《Struts 2 技术详解》</li>\n<li>《精通Spring 2.x：企业应用开发详解》</li>\n<li>《Lucene实战（第二版）》</li>\n<li>《Spring技术内幕》</li>\n<li>《Spring Boot实战》</li>\n</ul>\n<h1 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h1><ul>\n<li>《深入Java虚拟机（第二版）》</li>\n<li>《深入理解Java虚拟机，JVM高级特性与最佳实践》</li>\n<li>《HotSpot实战》</li>\n<li>《自己动手写Java虚拟机》</li>\n<li>《揭秘Java虚拟机：JVM设计原理与实现》</li>\n<li>《大规模Java平台虚拟化与调优》</li>\n</ul>\n<h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><ul>\n<li>《Linux从入门到精通》</li>\n<li>《鸟哥的Linux私房菜》</li>\n<li>《UNIX网络编程》</li>\n<li>《Unix环境高级编程（第三版）》</li>\n<li>《Linux/UNIX系统编程手册（上册）》</li>\n<li>《Linux/UNIX系统编程手册（下册）》</li>\n</ul>\n<h1 id=\"通信协议\"><a href=\"#通信协议\" class=\"headerlink\" title=\"通信协议\"></a>通信协议</h1><ul>\n<li>《HTTP权威指南》</li>\n<li>《图解HTTP》</li>\n<li>《图解TCP/IP》</li>\n<li>《TCP/IP详解卷1 协议》</li>\n<li>《TCP/IP详解卷2 实现》</li>\n<li>《TCP/IP详解卷3 TCP事物协议》</li>\n</ul>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><ul>\n<li>《深入剖析Tomcat》</li>\n<li>《JBoss实战：服务器配置指南》</li>\n<li>《实战Nginx：取代Apache的高性能Web服务器》</li>\n</ul>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><ul>\n<li>《MySQL5权威指南》</li>\n</ul>\n<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><ul>\n<li>《Redis实战》</li>\n<li>《Redis设计与实现》</li>\n</ul>\n<h1 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h1><ul>\n<li>《Netty权威指南》</li>\n<li>《Netty实战》</li>\n</ul>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h1><ul>\n<li>《架构之美》</li>\n<li>《大型网站技术架构  核心原理与案例分析》</li>\n<li>《大型网站系统与Java中间件实践》</li>\n<li>《架构探险：从零开始写Java Web框架》</li>\n<li>《高可用架构（第1卷）》</li>\n<li>《分布式服务框架原理与实践》</li>\n<li>《架构解密：从分布式到微服务》</li>\n<li>《决战618：探秘京东技术取胜之道》</li>\n<li>《人人都是架构师：分布式系统架构落地与瓶颈突破》</li>\n<li>《DevOps：软件架构师行动指南》</li>\n<li>《实用软件架构：从系统环境到软件部署》</li>\n<li>《企业IT架构转型之道 阿里巴巴中台战略思想与架构实战》</li>\n<li>《亿级流量网站架构核心技术 跟开涛学搭建高可用高并发系统》</li>\n<li>《架构即未来：现代企业可扩展的Web架构、流程和组织（原书第2版）》</li>\n<li>《架构真经：互联网技术架构的设计原则（原书第2版）》</li>\n</ul>\n<h1 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h1><ul>\n<li>《Hadoop权威指南》</li>\n<li>《实战Hadoop–开启通向云计算的捷径》</li>\n</ul>\n<h1 id=\"算法-数据结构\"><a href=\"#算法-数据结构\" class=\"headerlink\" title=\"算法/数据结构\"></a>算法/数据结构</h1><ul>\n<li>《算法导论》</li>\n<li>《数据结构与算法分析 Java语言描述》</li>\n</ul>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><ul>\n<li>《Java与模式》</li>\n<li>《研磨设计模式》</li>\n</ul>\n<h1 id=\"容器-云\"><a href=\"#容器-云\" class=\"headerlink\" title=\"容器/云\"></a>容器/云</h1><ul>\n<li>《Docker实战》</li>\n<li>《Docker进阶与实战》</li>\n<li>《Spring Cloud与Docker微服务架构实战》</li>\n</ul>\n<h1 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h1><ul>\n<li>《编译原理》</li>\n<li>《编程语言实现模式》</li>\n<li>《两周自制脚本语言》</li>\n</ul>\n<h1 id=\"团队管理\"><a href=\"#团队管理\" class=\"headerlink\" title=\"团队管理\"></a>团队管理</h1><ul>\n<li>《狼性团队》</li>\n<li>《狼性管理》</li>\n<li>《狼性执行》</li>\n<li>《团队制胜》</li>\n<li>《胜在团队，赢在执行》</li>\n</ul>\n<h1 id=\"互联网\"><a href=\"#互联网\" class=\"headerlink\" title=\"互联网\"></a>互联网</h1><ul>\n<li>《大数据时代》</li>\n<li>《人人时代》</li>\n<li>《认知盈余》</li>\n<li>《参与感》</li>\n<li>《黑天鹅》</li>\n<li>《思考 快与慢》</li>\n<li>《从0到1 开启商业与未来的秘密》</li>\n<li>《O2O 移动互联网时代的商业革命》</li>\n<li>《变革中国：市场经济的中国之路》</li>\n<li>《平台战略：正在席卷全球的商业模式革命》</li>\n<li>《翻转世界 互联网思维与新技术如何改变未来》</li>\n</ul>\n<h1 id=\"心理学\"><a href=\"#心理学\" class=\"headerlink\" title=\"心理学\"></a>心理学</h1><ul>\n<li>《行为心理学》</li>\n<li>《欲望心理学》</li>\n<li>《乌合之众：群体心理研究》</li>\n</ul>\n<h1 id=\"经济学\"><a href=\"#经济学\" class=\"headerlink\" title=\"经济学\"></a>经济学</h1><ul>\n<li>《经济学原理》</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>《摸着石头过河》</li>\n<li>《人月神话》</li>\n<li>《解密无印良品》</li>\n<li>《断舍离》</li>\n<li>《极简力》</li>\n<li>《浮生六记》</li>\n<li>《随遇而安》</li>\n<li>《TED演讲的8个秘诀：学习18分钟高效表达》</li>\n<li>《极简主义：风靡欧美的工作与生活理念》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>孔子曰：天若有情天亦老，人丑就得多读书。<br>孟子曰：老乡，你说得对！</p>\n</blockquote>\n<hr>\n<h1 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h1><ul>\n<li>《Java编程思想》</li>\n<li>《Effective Java》</li>\n<li>《Java并发编程实战》</li>\n<li>《Head First Java》</li>\n<li>《Java7并发编程手册》</li>\n<li>《分布式Java应用基础与实战》</li>\n<li>《编写高质量代码 改善Java程序的151个建议》</li>\n<li>《Java程序性能优化–让你的Java程序更快更稳定》</li>\n<li>《重构 改善既有代码的设计》</li>\n<li>《Java性能优化权威指南》</li>\n<li>《Java多线编程核心技术》</li>\n<li>《Java并发编程的艺术》</li>\n<li>《Java多线程编程实战指南》</li>\n<li>《实战Java高并发程序设计》</li>\n<li>《代码大全》</li>\n</ul>\n<h1 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h1><ul>\n<li>《Struts 2 技术详解》</li>\n<li>《精通Spring 2.x：企业应用开发详解》</li>\n<li>《Lucene实战（第二版）》</li>\n<li>《Spring技术内幕》</li>\n<li>《Spring Boot实战》</li>\n</ul>\n<h1 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h1><ul>\n<li>《深入Java虚拟机（第二版）》</li>\n<li>《深入理解Java虚拟机，JVM高级特性与最佳实践》</li>\n<li>《HotSpot实战》</li>\n<li>《自己动手写Java虚拟机》</li>\n<li>《揭秘Java虚拟机：JVM设计原理与实现》</li>\n<li>《大规模Java平台虚拟化与调优》</li>\n</ul>\n<h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><ul>\n<li>《Linux从入门到精通》</li>\n<li>《鸟哥的Linux私房菜》</li>\n<li>《UNIX网络编程》</li>\n<li>《Unix环境高级编程（第三版）》</li>\n<li>《Linux/UNIX系统编程手册（上册）》</li>\n<li>《Linux/UNIX系统编程手册（下册）》</li>\n</ul>\n<h1 id=\"通信协议\"><a href=\"#通信协议\" class=\"headerlink\" title=\"通信协议\"></a>通信协议</h1><ul>\n<li>《HTTP权威指南》</li>\n<li>《图解HTTP》</li>\n<li>《图解TCP/IP》</li>\n<li>《TCP/IP详解卷1 协议》</li>\n<li>《TCP/IP详解卷2 实现》</li>\n<li>《TCP/IP详解卷3 TCP事物协议》</li>\n</ul>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><ul>\n<li>《深入剖析Tomcat》</li>\n<li>《JBoss实战：服务器配置指南》</li>\n<li>《实战Nginx：取代Apache的高性能Web服务器》</li>\n</ul>\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><ul>\n<li>《MySQL5权威指南》</li>\n</ul>\n<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><ul>\n<li>《Redis实战》</li>\n<li>《Redis设计与实现》</li>\n</ul>\n<h1 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h1><ul>\n<li>《Netty权威指南》</li>\n<li>《Netty实战》</li>\n</ul>\n<h1 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h1><ul>\n<li>《架构之美》</li>\n<li>《大型网站技术架构  核心原理与案例分析》</li>\n<li>《大型网站系统与Java中间件实践》</li>\n<li>《架构探险：从零开始写Java Web框架》</li>\n<li>《高可用架构（第1卷）》</li>\n<li>《分布式服务框架原理与实践》</li>\n<li>《架构解密：从分布式到微服务》</li>\n<li>《决战618：探秘京东技术取胜之道》</li>\n<li>《人人都是架构师：分布式系统架构落地与瓶颈突破》</li>\n<li>《DevOps：软件架构师行动指南》</li>\n<li>《实用软件架构：从系统环境到软件部署》</li>\n<li>《企业IT架构转型之道 阿里巴巴中台战略思想与架构实战》</li>\n<li>《亿级流量网站架构核心技术 跟开涛学搭建高可用高并发系统》</li>\n<li>《架构即未来：现代企业可扩展的Web架构、流程和组织（原书第2版）》</li>\n<li>《架构真经：互联网技术架构的设计原则（原书第2版）》</li>\n</ul>\n<h1 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h1><ul>\n<li>《Hadoop权威指南》</li>\n<li>《实战Hadoop–开启通向云计算的捷径》</li>\n</ul>\n<h1 id=\"算法-数据结构\"><a href=\"#算法-数据结构\" class=\"headerlink\" title=\"算法/数据结构\"></a>算法/数据结构</h1><ul>\n<li>《算法导论》</li>\n<li>《数据结构与算法分析 Java语言描述》</li>\n</ul>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><ul>\n<li>《Java与模式》</li>\n<li>《研磨设计模式》</li>\n</ul>\n<h1 id=\"容器-云\"><a href=\"#容器-云\" class=\"headerlink\" title=\"容器/云\"></a>容器/云</h1><ul>\n<li>《Docker实战》</li>\n<li>《Docker进阶与实战》</li>\n<li>《Spring Cloud与Docker微服务架构实战》</li>\n</ul>\n<h1 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h1><ul>\n<li>《编译原理》</li>\n<li>《编程语言实现模式》</li>\n<li>《两周自制脚本语言》</li>\n</ul>\n<h1 id=\"团队管理\"><a href=\"#团队管理\" class=\"headerlink\" title=\"团队管理\"></a>团队管理</h1><ul>\n<li>《狼性团队》</li>\n<li>《狼性管理》</li>\n<li>《狼性执行》</li>\n<li>《团队制胜》</li>\n<li>《胜在团队，赢在执行》</li>\n</ul>\n<h1 id=\"互联网\"><a href=\"#互联网\" class=\"headerlink\" title=\"互联网\"></a>互联网</h1><ul>\n<li>《大数据时代》</li>\n<li>《人人时代》</li>\n<li>《认知盈余》</li>\n<li>《参与感》</li>\n<li>《黑天鹅》</li>\n<li>《思考 快与慢》</li>\n<li>《从0到1 开启商业与未来的秘密》</li>\n<li>《O2O 移动互联网时代的商业革命》</li>\n<li>《变革中国：市场经济的中国之路》</li>\n<li>《平台战略：正在席卷全球的商业模式革命》</li>\n<li>《翻转世界 互联网思维与新技术如何改变未来》</li>\n</ul>\n<h1 id=\"心理学\"><a href=\"#心理学\" class=\"headerlink\" title=\"心理学\"></a>心理学</h1><ul>\n<li>《行为心理学》</li>\n<li>《欲望心理学》</li>\n<li>《乌合之众：群体心理研究》</li>\n</ul>\n<h1 id=\"经济学\"><a href=\"#经济学\" class=\"headerlink\" title=\"经济学\"></a>经济学</h1><ul>\n<li>《经济学原理》</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li>《摸着石头过河》</li>\n<li>《人月神话》</li>\n<li>《解密无印良品》</li>\n<li>《断舍离》</li>\n<li>《极简力》</li>\n<li>《浮生六记》</li>\n<li>《随遇而安》</li>\n<li>《TED演讲的8个秘诀：学习18分钟高效表达》</li>\n<li>《极简主义：风靡欧美的工作与生活理念》</li>\n</ul>\n"},{"title":"标签","date":"2018-03-25T16:41:20.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-03-26 00:41:20\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-03-27T19:04:41.000Z","path":"tags/index.html","layout":"page","_id":"cji8ks9op00042zs6jmlqwm8j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"我的作品","date":"2018-03-29T15:37:01.000Z","type":"works","comments":0,"_content":"\n***\n\n- [Open Terminal Here](/post/2015/12/03/design-of-intellij-plugin-open-terminal-here/) \n一款用于在终端中直接打开文件所在目录的IntelliJ插件。\n\n- [CoffeeMaker](/post/2017/07/21/design-of-universal-code-generator-coffee-maker/)\n一款经过良好设计的代码生成器，可快速生成通用CRUD代码模板，使用方便且易于扩展。\n\n","source":"works/index.md","raw":"---\ntitle: 我的作品\ndate: 2018-03-29 23:37:01\ntype: \"works\"\ncomments: false\n---\n\n***\n\n- [Open Terminal Here](/post/2015/12/03/design-of-intellij-plugin-open-terminal-here/) \n一款用于在终端中直接打开文件所在目录的IntelliJ插件。\n\n- [CoffeeMaker](/post/2017/07/21/design-of-universal-code-generator-coffee-maker/)\n一款经过良好设计的代码生成器，可快速生成通用CRUD代码模板，使用方便且易于扩展。\n\n","updated":"2018-05-23T11:44:11.000Z","path":"works/index.html","layout":"page","_id":"cji8ks9w600052zs6bflocz0y","content":"<hr>\n<ul>\n<li><p><a href=\"/post/2015/12/03/design-of-intellij-plugin-open-terminal-here/\">Open Terminal Here</a><br>一款用于在终端中直接打开文件所在目录的IntelliJ插件。</p>\n</li>\n<li><p><a href=\"/post/2017/07/21/design-of-universal-code-generator-coffee-maker/\">CoffeeMaker</a><br>一款经过良好设计的代码生成器，可快速生成通用CRUD代码模板，使用方便且易于扩展。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<ul>\n<li><p><a href=\"/post/2015/12/03/design-of-intellij-plugin-open-terminal-here/\">Open Terminal Here</a><br>一款用于在终端中直接打开文件所在目录的IntelliJ插件。</p>\n</li>\n<li><p><a href=\"/post/2017/07/21/design-of-universal-code-generator-coffee-maker/\">CoffeeMaker</a><br>一款经过良好设计的代码生成器，可快速生成通用CRUD代码模板，使用方便且易于扩展。</p>\n</li>\n</ul>\n"}],"Post":[{"title":"Hello World","date":"2011-01-10T04:13:35.000Z","_content":"   [原博客](http://zhaohe162.blog.163.com)从2007年7月24日注册已经有10+个年头了，估计也算是中国第一批博客用户了，也见证了网易博客从最初到后来发展成熟的过程。\n   \n记得当年比较流行装扮博客，网易官方推出了各式各样的皮肤，并且允许用户博客自定义和分享，后来推出首页自定义模块，具体方式是通过特定的代码来加入更丰富的功能，也就是那时候最初接触到了HTML/CSS。\n\n装扮玩博客后还有更重要的一项就是：推广。当时为了提高博客访问量增加影响力也着实费了一番功夫，通过各种方式各种渠道宣传、互换人气，当时比较有名的是`博客群(http://www.bokequn.cn)` `博搜(http://www.boosou.com)`和`博无忧（http://www.bo56.com）`。\n\n2009年的时候，网易博客推出了圈子功能，类似QQ群，博友可以把自己的博文、相册推荐到圈子里，圈子里同时有论坛功能，于是大家开始各种灌水，我的圈子从2009年1月份开通，到后来网易博客没落共有3万7千多圈友，在当时也是个比较大的社群了。\n<!-- more -->\n同年，网易博客每隔段时间就发系统公告，说要对系统存储空间进行扩容，后来技术团队应该是攻克了存储扩容问题，于是便再也没有发过类似公告。\n\n从2011年工作后开始更新技术文章，有时候写博客需要贴代码，但网易博客没有这个功能，所以通过意见反馈渠道反馈了这一情况，意外的是居然收到了网易的产品经理的回复，并且网易博客很快加入了该功能，虽然不太好用，但还是很感谢。\n\n2013年网易博客向部分博主推出了广告服务内测，很荣幸被选入其中，由于访问量还不错，前后一年内共入账了1K左右，算是人生中第一桶金。不过随着业务发展，网易公司决定对推广资源进行合理调整，于2014年4月1日下线网易博客有道推广广告位。\n\n...\n\n十一年，零零散散记载了很多篇，随着工作的忙碌近几年更新频率与日俱减。工作年头越来越多，反而慢慢有了重新执笔的冲动，突然想写点什么。\n\n今年（2017）建立了自己的GitHub Pages并注册了自己的域名，经过一番折腾后，决定把原博客的部分文章迁移过来，一方面用于纪念曾经的青葱岁月，另一方面同时鼓励自己笔耕不辍，把自己这些年以来的所见所闻、所感所悟以文字的方式记录下来，如果恰巧你也有类似的经历或共鸣，那也算是人生中一大幸事了。\n","source":"_posts/2011/01/10/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2011-01-10 12:13:35\ncategories: 默认分类\n---\n   [原博客](http://zhaohe162.blog.163.com)从2007年7月24日注册已经有10+个年头了，估计也算是中国第一批博客用户了，也见证了网易博客从最初到后来发展成熟的过程。\n   \n记得当年比较流行装扮博客，网易官方推出了各式各样的皮肤，并且允许用户博客自定义和分享，后来推出首页自定义模块，具体方式是通过特定的代码来加入更丰富的功能，也就是那时候最初接触到了HTML/CSS。\n\n装扮玩博客后还有更重要的一项就是：推广。当时为了提高博客访问量增加影响力也着实费了一番功夫，通过各种方式各种渠道宣传、互换人气，当时比较有名的是`博客群(http://www.bokequn.cn)` `博搜(http://www.boosou.com)`和`博无忧（http://www.bo56.com）`。\n\n2009年的时候，网易博客推出了圈子功能，类似QQ群，博友可以把自己的博文、相册推荐到圈子里，圈子里同时有论坛功能，于是大家开始各种灌水，我的圈子从2009年1月份开通，到后来网易博客没落共有3万7千多圈友，在当时也是个比较大的社群了。\n<!-- more -->\n同年，网易博客每隔段时间就发系统公告，说要对系统存储空间进行扩容，后来技术团队应该是攻克了存储扩容问题，于是便再也没有发过类似公告。\n\n从2011年工作后开始更新技术文章，有时候写博客需要贴代码，但网易博客没有这个功能，所以通过意见反馈渠道反馈了这一情况，意外的是居然收到了网易的产品经理的回复，并且网易博客很快加入了该功能，虽然不太好用，但还是很感谢。\n\n2013年网易博客向部分博主推出了广告服务内测，很荣幸被选入其中，由于访问量还不错，前后一年内共入账了1K左右，算是人生中第一桶金。不过随着业务发展，网易公司决定对推广资源进行合理调整，于2014年4月1日下线网易博客有道推广广告位。\n\n...\n\n十一年，零零散散记载了很多篇，随着工作的忙碌近几年更新频率与日俱减。工作年头越来越多，反而慢慢有了重新执笔的冲动，突然想写点什么。\n\n今年（2017）建立了自己的GitHub Pages并注册了自己的域名，经过一番折腾后，决定把原博客的部分文章迁移过来，一方面用于纪念曾经的青葱岁月，另一方面同时鼓励自己笔耕不辍，把自己这些年以来的所见所闻、所感所悟以文字的方式记录下来，如果恰巧你也有类似的经历或共鸣，那也算是人生中一大幸事了。\n","slug":"hello-world","published":1,"updated":"2018-03-27T19:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1600062zs680jrharn","content":"<p>   <a href=\"http://zhaohe162.blog.163.com\" target=\"_blank\" rel=\"noopener\">原博客</a>从2007年7月24日注册已经有10+个年头了，估计也算是中国第一批博客用户了，也见证了网易博客从最初到后来发展成熟的过程。</p>\n<p>记得当年比较流行装扮博客，网易官方推出了各式各样的皮肤，并且允许用户博客自定义和分享，后来推出首页自定义模块，具体方式是通过特定的代码来加入更丰富的功能，也就是那时候最初接触到了HTML/CSS。</p>\n<p>装扮玩博客后还有更重要的一项就是：推广。当时为了提高博客访问量增加影响力也着实费了一番功夫，通过各种方式各种渠道宣传、互换人气，当时比较有名的是<code>博客群(http://www.bokequn.cn)</code> <code>博搜(http://www.boosou.com)</code>和<code>博无忧（http://www.bo56.com）</code>。</p>\n<p>2009年的时候，网易博客推出了圈子功能，类似QQ群，博友可以把自己的博文、相册推荐到圈子里，圈子里同时有论坛功能，于是大家开始各种灌水，我的圈子从2009年1月份开通，到后来网易博客没落共有3万7千多圈友，在当时也是个比较大的社群了。<br><a id=\"more\"></a><br>同年，网易博客每隔段时间就发系统公告，说要对系统存储空间进行扩容，后来技术团队应该是攻克了存储扩容问题，于是便再也没有发过类似公告。</p>\n<p>从2011年工作后开始更新技术文章，有时候写博客需要贴代码，但网易博客没有这个功能，所以通过意见反馈渠道反馈了这一情况，意外的是居然收到了网易的产品经理的回复，并且网易博客很快加入了该功能，虽然不太好用，但还是很感谢。</p>\n<p>2013年网易博客向部分博主推出了广告服务内测，很荣幸被选入其中，由于访问量还不错，前后一年内共入账了1K左右，算是人生中第一桶金。不过随着业务发展，网易公司决定对推广资源进行合理调整，于2014年4月1日下线网易博客有道推广广告位。</p>\n<p>…</p>\n<p>十一年，零零散散记载了很多篇，随着工作的忙碌近几年更新频率与日俱减。工作年头越来越多，反而慢慢有了重新执笔的冲动，突然想写点什么。</p>\n<p>今年（2017）建立了自己的GitHub Pages并注册了自己的域名，经过一番折腾后，决定把原博客的部分文章迁移过来，一方面用于纪念曾经的青葱岁月，另一方面同时鼓励自己笔耕不辍，把自己这些年以来的所见所闻、所感所悟以文字的方式记录下来，如果恰巧你也有类似的经历或共鸣，那也算是人生中一大幸事了。</p>\n","site":{"data":{}},"excerpt":"<p>   <a href=\"http://zhaohe162.blog.163.com\" target=\"_blank\" rel=\"noopener\">原博客</a>从2007年7月24日注册已经有10+个年头了，估计也算是中国第一批博客用户了，也见证了网易博客从最初到后来发展成熟的过程。</p>\n<p>记得当年比较流行装扮博客，网易官方推出了各式各样的皮肤，并且允许用户博客自定义和分享，后来推出首页自定义模块，具体方式是通过特定的代码来加入更丰富的功能，也就是那时候最初接触到了HTML/CSS。</p>\n<p>装扮玩博客后还有更重要的一项就是：推广。当时为了提高博客访问量增加影响力也着实费了一番功夫，通过各种方式各种渠道宣传、互换人气，当时比较有名的是<code>博客群(http://www.bokequn.cn)</code> <code>博搜(http://www.boosou.com)</code>和<code>博无忧（http://www.bo56.com）</code>。</p>\n<p>2009年的时候，网易博客推出了圈子功能，类似QQ群，博友可以把自己的博文、相册推荐到圈子里，圈子里同时有论坛功能，于是大家开始各种灌水，我的圈子从2009年1月份开通，到后来网易博客没落共有3万7千多圈友，在当时也是个比较大的社群了。<br>","more":"<br>同年，网易博客每隔段时间就发系统公告，说要对系统存储空间进行扩容，后来技术团队应该是攻克了存储扩容问题，于是便再也没有发过类似公告。</p>\n<p>从2011年工作后开始更新技术文章，有时候写博客需要贴代码，但网易博客没有这个功能，所以通过意见反馈渠道反馈了这一情况，意外的是居然收到了网易的产品经理的回复，并且网易博客很快加入了该功能，虽然不太好用，但还是很感谢。</p>\n<p>2013年网易博客向部分博主推出了广告服务内测，很荣幸被选入其中，由于访问量还不错，前后一年内共入账了1K左右，算是人生中第一桶金。不过随着业务发展，网易公司决定对推广资源进行合理调整，于2014年4月1日下线网易博客有道推广广告位。</p>\n<p>…</p>\n<p>十一年，零零散散记载了很多篇，随着工作的忙碌近几年更新频率与日俱减。工作年头越来越多，反而慢慢有了重新执笔的冲动，突然想写点什么。</p>\n<p>今年（2017）建立了自己的GitHub Pages并注册了自己的域名，经过一番折腾后，决定把原博客的部分文章迁移过来，一方面用于纪念曾经的青葱岁月，另一方面同时鼓励自己笔耕不辍，把自己这些年以来的所见所闻、所感所悟以文字的方式记录下来，如果恰巧你也有类似的经历或共鸣，那也算是人生中一大幸事了。</p>"},{"title":"CentOS通过yum安装配置MySQL","date":"2014-01-20T04:06:34.000Z","_content":"\n# 安装MySQL\n```bash\n[root@HunterWorkStation local]# yum -y install mysql mysql-server\n```\n\n\n# 启动MySQL服务\n```bash\n[root@HunterWorkStation local]# service mysqld start\n\nInitializing MySQL database:  Installing MySQL system tables...    OK\nFilling help tables...   OK\n\nTo start mysqld at boot time you have to copy\nsupport-files/mysql.server to the right place for your system\n\nPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !\nTo do so, start the server, then issue the following commands:\n\n/usr/bin/mysqladmin -u root password 'new-password'\n/usr/bin/mysqladmin -u root -h localhost.localdomain password 'new-password'\n\nAlternatively you can run:\n/usr/bin/mysql_secure_installation\n\nwhich will also give you the option of removing the test\ndatabases and anonymous user created by default.  This is\nstrongly recommended for production servers.\n\nSee the manual for more instructions.\nYou can start the MySQL daemon with:\n\ncd /usr ; /usr/bin/mysqld_safe &\nYou can test the MySQL daemon with mysql-test-run.pl\ncd /usr/mysql-test ; perl mysql-test-run.pl\n\nPlease report any problems with the /usr/bin/mysqlbug script!\n\n\nStarting mysqld:                                           [  OK  ]\n```\n<!-- more -->\n# 设置root用户密码\n```bash\n[root@HunterWorkStation local]# mysqladmin -u root password 'YOUR PASSWORD HERE'\n```\n\n# 登陆数据库并授权\n此时用户是无法远程登陆该数据库的，接下来为用户授权\n```bash\n[root@HunterWorkStation local]# mysql -u root -p\n\nEnter password: \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 4\nServer version: 5.1.71 Source distribution\n\nCopyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> grant all on *.* to root@'%' identified by '123456';  # 为所有主机授权使用root用户操作所有库和表，密码123456\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n\n# 设置MySQL服务开机自启动\n```bash\n[root@HunterWorkStation local]# chkconfig mysqld on\n```\n\n设置后查看是否设置成功\n```bash\n[root@HunterWorkStation local]# chkconfig --list | grep mysqld\n\nmysqld    0:off\t 1:off  2:on  3:on  4:on  5:on  6:off   # 2-5为on则表示自启动\n```\n\n# 设置服务端编码\n```bash\n[root@HunterWorkStation local]# vim /etc/my.cnf\n\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nuser=mysql\ndefault-character-set=utf8\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n```\n\n# 重启MySQL服务\n```bash\n[root@HunterWorkStation local]# service mysqld restart\nStopping mysqld:                                           [  OK  ]\nStarting mysqld:                                           [  OK  ]\n```\n\n\n至此，安装配置完毕，接来下可以用客户端连接操作MySQL。","source":"_posts/2014/01/20/install-and-configure-mysql-on-centos.md","raw":"---\ntitle: CentOS通过yum安装配置MySQL\ndate: 2014-01-20 12:06:34\ncategories: MySQL\ntags:\n    - MySQL\n    - CentOS\n---\n\n# 安装MySQL\n```bash\n[root@HunterWorkStation local]# yum -y install mysql mysql-server\n```\n\n\n# 启动MySQL服务\n```bash\n[root@HunterWorkStation local]# service mysqld start\n\nInitializing MySQL database:  Installing MySQL system tables...    OK\nFilling help tables...   OK\n\nTo start mysqld at boot time you have to copy\nsupport-files/mysql.server to the right place for your system\n\nPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !\nTo do so, start the server, then issue the following commands:\n\n/usr/bin/mysqladmin -u root password 'new-password'\n/usr/bin/mysqladmin -u root -h localhost.localdomain password 'new-password'\n\nAlternatively you can run:\n/usr/bin/mysql_secure_installation\n\nwhich will also give you the option of removing the test\ndatabases and anonymous user created by default.  This is\nstrongly recommended for production servers.\n\nSee the manual for more instructions.\nYou can start the MySQL daemon with:\n\ncd /usr ; /usr/bin/mysqld_safe &\nYou can test the MySQL daemon with mysql-test-run.pl\ncd /usr/mysql-test ; perl mysql-test-run.pl\n\nPlease report any problems with the /usr/bin/mysqlbug script!\n\n\nStarting mysqld:                                           [  OK  ]\n```\n<!-- more -->\n# 设置root用户密码\n```bash\n[root@HunterWorkStation local]# mysqladmin -u root password 'YOUR PASSWORD HERE'\n```\n\n# 登陆数据库并授权\n此时用户是无法远程登陆该数据库的，接下来为用户授权\n```bash\n[root@HunterWorkStation local]# mysql -u root -p\n\nEnter password: \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 4\nServer version: 5.1.71 Source distribution\n\nCopyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> grant all on *.* to root@'%' identified by '123456';  # 为所有主机授权使用root用户操作所有库和表，密码123456\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n\n# 设置MySQL服务开机自启动\n```bash\n[root@HunterWorkStation local]# chkconfig mysqld on\n```\n\n设置后查看是否设置成功\n```bash\n[root@HunterWorkStation local]# chkconfig --list | grep mysqld\n\nmysqld    0:off\t 1:off  2:on  3:on  4:on  5:on  6:off   # 2-5为on则表示自启动\n```\n\n# 设置服务端编码\n```bash\n[root@HunterWorkStation local]# vim /etc/my.cnf\n\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\nuser=mysql\ndefault-character-set=utf8\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n```\n\n# 重启MySQL服务\n```bash\n[root@HunterWorkStation local]# service mysqld restart\nStopping mysqld:                                           [  OK  ]\nStarting mysqld:                                           [  OK  ]\n```\n\n\n至此，安装配置完毕，接来下可以用客户端连接操作MySQL。","slug":"install-and-configure-mysql-on-centos","published":1,"updated":"2018-03-27T19:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1a00072zs6ofh6z0y8","content":"<h1 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># yum -y install mysql mysql-server</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"启动MySQL服务\"><a href=\"#启动MySQL服务\" class=\"headerlink\" title=\"启动MySQL服务\"></a>启动MySQL服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># service mysqld start</span></span><br><span class=\"line\"></span><br><span class=\"line\">Initializing MySQL database:  Installing MySQL system tables...    OK</span><br><span class=\"line\">Filling <span class=\"built_in\">help</span> tables...   OK</span><br><span class=\"line\"></span><br><span class=\"line\">To start mysqld at boot time you have to copy</span><br><span class=\"line\">support-files/mysql.server to the right place <span class=\"keyword\">for</span> your system</span><br><span class=\"line\"></span><br><span class=\"line\">PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</span><br><span class=\"line\">To <span class=\"keyword\">do</span> so, start the server, <span class=\"keyword\">then</span> issue the following commands:</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/mysqladmin -u root password <span class=\"string\">'new-password'</span></span><br><span class=\"line\">/usr/bin/mysqladmin -u root -h localhost.localdomain password <span class=\"string\">'new-password'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively you can run:</span><br><span class=\"line\">/usr/bin/mysql_secure_installation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">which</span> will also give you the option of removing the <span class=\"built_in\">test</span></span><br><span class=\"line\">databases and anonymous user created by default.  This is</span><br><span class=\"line\">strongly recommended <span class=\"keyword\">for</span> production servers.</span><br><span class=\"line\"></span><br><span class=\"line\">See the manual <span class=\"keyword\">for</span> more instructions.</span><br><span class=\"line\">You can start the MySQL daemon with:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr ; /usr/bin/mysqld_safe &amp;</span><br><span class=\"line\">You can <span class=\"built_in\">test</span> the MySQL daemon with mysql-test-run.pl</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/mysql-test ; perl mysql-test-run.pl</span><br><span class=\"line\"></span><br><span class=\"line\">Please report any problems with the /usr/bin/mysqlbug script!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Starting mysqld:                                           [  OK  ]</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"设置root用户密码\"><a href=\"#设置root用户密码\" class=\"headerlink\" title=\"设置root用户密码\"></a>设置root用户密码</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># mysqladmin -u root password 'YOUR PASSWORD HERE'</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"登陆数据库并授权\"><a href=\"#登陆数据库并授权\" class=\"headerlink\" title=\"登陆数据库并授权\"></a>登陆数据库并授权</h1><p>此时用户是无法远程登陆该数据库的，接下来为用户授权<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># mysql -u root -p</span></span><br><span class=\"line\"></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 4</span><br><span class=\"line\">Server version: 5.1.71 Source distribution</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; grant all on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">'123456'</span>;  <span class=\"comment\"># 为所有主机授权使用root用户操作所有库和表，密码123456</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"设置MySQL服务开机自启动\"><a href=\"#设置MySQL服务开机自启动\" class=\"headerlink\" title=\"设置MySQL服务开机自启动\"></a>设置MySQL服务开机自启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># chkconfig mysqld on</span></span><br></pre></td></tr></table></figure>\n<p>设置后查看是否设置成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># chkconfig --list | grep mysqld</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysqld    0:off\t 1:off  2:on  3:on  4:on  5:on  6:off   <span class=\"comment\"># 2-5为on则表示自启动</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"设置服务端编码\"><a href=\"#设置服务端编码\" class=\"headerlink\" title=\"设置服务端编码\"></a>设置服务端编码</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># vim /etc/my.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">datadir=/var/lib/mysql</span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">symbolic-links=0</span><br></pre></td></tr></table></figure>\n<h1 id=\"重启MySQL服务\"><a href=\"#重启MySQL服务\" class=\"headerlink\" title=\"重启MySQL服务\"></a>重启MySQL服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># service mysqld restart</span></span><br><span class=\"line\">Stopping mysqld:                                           [  OK  ]</span><br><span class=\"line\">Starting mysqld:                                           [  OK  ]</span><br></pre></td></tr></table></figure>\n<p>至此，安装配置完毕，接来下可以用客户端连接操作MySQL。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># yum -y install mysql mysql-server</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"启动MySQL服务\"><a href=\"#启动MySQL服务\" class=\"headerlink\" title=\"启动MySQL服务\"></a>启动MySQL服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># service mysqld start</span></span><br><span class=\"line\"></span><br><span class=\"line\">Initializing MySQL database:  Installing MySQL system tables...    OK</span><br><span class=\"line\">Filling <span class=\"built_in\">help</span> tables...   OK</span><br><span class=\"line\"></span><br><span class=\"line\">To start mysqld at boot time you have to copy</span><br><span class=\"line\">support-files/mysql.server to the right place <span class=\"keyword\">for</span> your system</span><br><span class=\"line\"></span><br><span class=\"line\">PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</span><br><span class=\"line\">To <span class=\"keyword\">do</span> so, start the server, <span class=\"keyword\">then</span> issue the following commands:</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/mysqladmin -u root password <span class=\"string\">'new-password'</span></span><br><span class=\"line\">/usr/bin/mysqladmin -u root -h localhost.localdomain password <span class=\"string\">'new-password'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively you can run:</span><br><span class=\"line\">/usr/bin/mysql_secure_installation</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">which</span> will also give you the option of removing the <span class=\"built_in\">test</span></span><br><span class=\"line\">databases and anonymous user created by default.  This is</span><br><span class=\"line\">strongly recommended <span class=\"keyword\">for</span> production servers.</span><br><span class=\"line\"></span><br><span class=\"line\">See the manual <span class=\"keyword\">for</span> more instructions.</span><br><span class=\"line\">You can start the MySQL daemon with:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr ; /usr/bin/mysqld_safe &amp;</span><br><span class=\"line\">You can <span class=\"built_in\">test</span> the MySQL daemon with mysql-test-run.pl</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/mysql-test ; perl mysql-test-run.pl</span><br><span class=\"line\"></span><br><span class=\"line\">Please report any problems with the /usr/bin/mysqlbug script!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Starting mysqld:                                           [  OK  ]</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"设置root用户密码\"><a href=\"#设置root用户密码\" class=\"headerlink\" title=\"设置root用户密码\"></a>设置root用户密码</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># mysqladmin -u root password 'YOUR PASSWORD HERE'</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"登陆数据库并授权\"><a href=\"#登陆数据库并授权\" class=\"headerlink\" title=\"登陆数据库并授权\"></a>登陆数据库并授权</h1><p>此时用户是无法远程登陆该数据库的，接下来为用户授权<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># mysql -u root -p</span></span><br><span class=\"line\"></span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 4</span><br><span class=\"line\">Server version: 5.1.71 Source distribution</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; grant all on *.* to root@<span class=\"string\">'%'</span> identified by <span class=\"string\">'123456'</span>;  <span class=\"comment\"># 为所有主机授权使用root用户操作所有库和表，密码123456</span></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"设置MySQL服务开机自启动\"><a href=\"#设置MySQL服务开机自启动\" class=\"headerlink\" title=\"设置MySQL服务开机自启动\"></a>设置MySQL服务开机自启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># chkconfig mysqld on</span></span><br></pre></td></tr></table></figure>\n<p>设置后查看是否设置成功<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># chkconfig --list | grep mysqld</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysqld    0:off\t 1:off  2:on  3:on  4:on  5:on  6:off   <span class=\"comment\"># 2-5为on则表示自启动</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"设置服务端编码\"><a href=\"#设置服务端编码\" class=\"headerlink\" title=\"设置服务端编码\"></a>设置服务端编码</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># vim /etc/my.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">datadir=/var/lib/mysql</span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">symbolic-links=0</span><br></pre></td></tr></table></figure>\n<h1 id=\"重启MySQL服务\"><a href=\"#重启MySQL服务\" class=\"headerlink\" title=\"重启MySQL服务\"></a>重启MySQL服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@HunterWorkStation <span class=\"built_in\">local</span>]<span class=\"comment\"># service mysqld restart</span></span><br><span class=\"line\">Stopping mysqld:                                           [  OK  ]</span><br><span class=\"line\">Starting mysqld:                                           [  OK  ]</span><br></pre></td></tr></table></figure>\n<p>至此，安装配置完毕，接来下可以用客户端连接操作MySQL。</p>"},{"title":"Mac下vim开启语法高亮&着色","date":"2014-01-20T04:06:34.000Z","_content":"\n\nMac OS并不像大多数Linux发行版vim默认自带语法着色高亮显示（通常Linux可通过编辑/etc/vimrc进行全局设置或~/vimrc进行单用户设置），使用vi/vim编辑文件时很不方便，如何解决 ?\n\n\n# 编辑文件/usr/share/vim/vimrc\n```bash\nBobZhao@mac:~ > sudo vim /usr/share/vim/vimrc\nPassword:\n\" Configuration file for vim\nset modelines=0         \" CVE-2007-2438\n\n\" Normally we use vim-extensions. If you want true vi-compatibility\n\" remove change the following statements\nset nocompatible        \" Use Vim defaults instead of 100% vi compatibility\nset backspace=2         \" more powerful backspacing\n\n\" Don't write backup file if vim is being called by \"crontab -e\"\nau BufWrite /private/tmp/crontab.* set nowritebackup\n\" Don't write backup file if vim is being called by \"chpass\"\nau BufWrite /private/etc/pw.* set nowritebackup\n```\n\n<!-- more -->\n\n# 在set backspace=2下插入配置\n```bash\nset ai                  \" auto indenting\nset history=100         \" keep 100 lines of history\nset ruler               \" show the cursor position\nsyntax on               \" syntax highlighting\nset hlsearch            \" highlight the last searched term\nfiletype plugin on      \" use the file type plugins\n\n\" When editing a file, always jump to the last cursor position\nautocmd BufReadPost *\n\\ if ! exists(\"g:leave_my_cursor_position_alone\") |\n\\ if line(\"'\\\"\") > 0 && line (\"'\\\"\") <= line(\"$\") |\n\\ exe \"normal g'\\\"\" |\n\\ endif |\n\\ endif\n```\n\n# 验证\n再次打开该文件发现已经生效\n![configure-vim](/images/post/2014/10/01/configure-vim-highlight-on-mac.png)\n\n\n","source":"_posts/2014/10/01/configure-vim-syntax-highlight-on-mac.md","raw":"---\ntitle: Mac下vim开启语法高亮&着色\ndate: 2014-01-20 12:06:34\ncategories: Mac\ntags:\n    - Linux\n    - vim\n    - Mac\n---\n\n\nMac OS并不像大多数Linux发行版vim默认自带语法着色高亮显示（通常Linux可通过编辑/etc/vimrc进行全局设置或~/vimrc进行单用户设置），使用vi/vim编辑文件时很不方便，如何解决 ?\n\n\n# 编辑文件/usr/share/vim/vimrc\n```bash\nBobZhao@mac:~ > sudo vim /usr/share/vim/vimrc\nPassword:\n\" Configuration file for vim\nset modelines=0         \" CVE-2007-2438\n\n\" Normally we use vim-extensions. If you want true vi-compatibility\n\" remove change the following statements\nset nocompatible        \" Use Vim defaults instead of 100% vi compatibility\nset backspace=2         \" more powerful backspacing\n\n\" Don't write backup file if vim is being called by \"crontab -e\"\nau BufWrite /private/tmp/crontab.* set nowritebackup\n\" Don't write backup file if vim is being called by \"chpass\"\nau BufWrite /private/etc/pw.* set nowritebackup\n```\n\n<!-- more -->\n\n# 在set backspace=2下插入配置\n```bash\nset ai                  \" auto indenting\nset history=100         \" keep 100 lines of history\nset ruler               \" show the cursor position\nsyntax on               \" syntax highlighting\nset hlsearch            \" highlight the last searched term\nfiletype plugin on      \" use the file type plugins\n\n\" When editing a file, always jump to the last cursor position\nautocmd BufReadPost *\n\\ if ! exists(\"g:leave_my_cursor_position_alone\") |\n\\ if line(\"'\\\"\") > 0 && line (\"'\\\"\") <= line(\"$\") |\n\\ exe \"normal g'\\\"\" |\n\\ endif |\n\\ endif\n```\n\n# 验证\n再次打开该文件发现已经生效\n![configure-vim](/images/post/2014/10/01/configure-vim-highlight-on-mac.png)\n\n\n","slug":"configure-vim-syntax-highlight-on-mac","published":1,"updated":"2018-03-27T19:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1f00092zs6ikmgw8qm","content":"<p>Mac OS并不像大多数Linux发行版vim默认自带语法着色高亮显示（通常Linux可通过编辑/etc/vimrc进行全局设置或~/vimrc进行单用户设置），使用vi/vim编辑文件时很不方便，如何解决 ?</p>\n<h1 id=\"编辑文件-usr-share-vim-vimrc\"><a href=\"#编辑文件-usr-share-vim-vimrc\" class=\"headerlink\" title=\"编辑文件/usr/share/vim/vimrc\"></a>编辑文件/usr/share/vim/vimrc</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BobZhao@mac:~ &gt; sudo vim /usr/share/vim/vimrc</span><br><span class=\"line\">Password:</span><br><span class=\"line\"><span class=\"string\">\" Configuration file for vim</span></span><br><span class=\"line\"><span class=\"string\">set modelines=0         \"</span> CVE-2007-2438</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" Normally we use vim-extensions. If you want true vi-compatibility</span></span><br><span class=\"line\"><span class=\"string\">\"</span> remove change the following statements</span><br><span class=\"line\"><span class=\"built_in\">set</span> nocompatible        <span class=\"string\">\" Use Vim defaults instead of 100% vi compatibility</span></span><br><span class=\"line\"><span class=\"string\">set backspace=2         \"</span> more powerful backspacing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" Don't write backup file if vim is being called by \"</span>crontab -e<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">au BufWrite /private/tmp/crontab.* set nowritebackup</span></span><br><span class=\"line\"><span class=\"string\">\"</span> Don<span class=\"string\">'t write backup file if vim is being called by \"chpass\"</span></span><br><span class=\"line\"><span class=\"string\">au BufWrite /private/etc/pw.* set nowritebackup</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"在set-backspace-2下插入配置\"><a href=\"#在set-backspace-2下插入配置\" class=\"headerlink\" title=\"在set backspace=2下插入配置\"></a>在set backspace=2下插入配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> ai                  <span class=\"string\">\" auto indenting</span></span><br><span class=\"line\"><span class=\"string\">set history=100         \"</span> keep 100 lines of <span class=\"built_in\">history</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> ruler               <span class=\"string\">\" show the cursor position</span></span><br><span class=\"line\"><span class=\"string\">syntax on               \"</span> syntax highlighting</span><br><span class=\"line\"><span class=\"built_in\">set</span> hlsearch            <span class=\"string\">\" highlight the last searched term</span></span><br><span class=\"line\"><span class=\"string\">filetype plugin on      \"</span> use the file <span class=\"built_in\">type</span> plugins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" When editing a file, always jump to the last cursor position</span></span><br><span class=\"line\"><span class=\"string\">autocmd BufReadPost *</span></span><br><span class=\"line\"><span class=\"string\">\\ if ! exists(\"</span>g:leave_my_cursor_position_alone<span class=\"string\">\") |</span></span><br><span class=\"line\"><span class=\"string\">\\ if line(\"</span><span class=\"string\">'\\\"\") &gt; 0 &amp;&amp; line (\"'</span>\\<span class=\"string\">\"\"</span>) &lt;= line(<span class=\"string\">\"$\"</span>) |</span><br><span class=\"line\">\\ exe <span class=\"string\">\"normal g'\\\"\"</span> |</span><br><span class=\"line\">\\ endif |</span><br><span class=\"line\">\\ endif</span><br></pre></td></tr></table></figure>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>再次打开该文件发现已经生效<br><img src=\"/images/post/2014/10/01/configure-vim-highlight-on-mac.png\" alt=\"configure-vim\"></p>\n","site":{"data":{}},"excerpt":"<p>Mac OS并不像大多数Linux发行版vim默认自带语法着色高亮显示（通常Linux可通过编辑/etc/vimrc进行全局设置或~/vimrc进行单用户设置），使用vi/vim编辑文件时很不方便，如何解决 ?</p>\n<h1 id=\"编辑文件-usr-share-vim-vimrc\"><a href=\"#编辑文件-usr-share-vim-vimrc\" class=\"headerlink\" title=\"编辑文件/usr/share/vim/vimrc\"></a>编辑文件/usr/share/vim/vimrc</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BobZhao@mac:~ &gt; sudo vim /usr/share/vim/vimrc</span><br><span class=\"line\">Password:</span><br><span class=\"line\"><span class=\"string\">\" Configuration file for vim</span></span><br><span class=\"line\"><span class=\"string\">set modelines=0         \"</span> CVE-2007-2438</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" Normally we use vim-extensions. If you want true vi-compatibility</span></span><br><span class=\"line\"><span class=\"string\">\"</span> remove change the following statements</span><br><span class=\"line\"><span class=\"built_in\">set</span> nocompatible        <span class=\"string\">\" Use Vim defaults instead of 100% vi compatibility</span></span><br><span class=\"line\"><span class=\"string\">set backspace=2         \"</span> more powerful backspacing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" Don't write backup file if vim is being called by \"</span>crontab -e<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">au BufWrite /private/tmp/crontab.* set nowritebackup</span></span><br><span class=\"line\"><span class=\"string\">\"</span> Don<span class=\"string\">'t write backup file if vim is being called by \"chpass\"</span></span><br><span class=\"line\"><span class=\"string\">au BufWrite /private/etc/pw.* set nowritebackup</span></span><br></pre></td></tr></table></figure>","more":"<h1 id=\"在set-backspace-2下插入配置\"><a href=\"#在set-backspace-2下插入配置\" class=\"headerlink\" title=\"在set backspace=2下插入配置\"></a>在set backspace=2下插入配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> ai                  <span class=\"string\">\" auto indenting</span></span><br><span class=\"line\"><span class=\"string\">set history=100         \"</span> keep 100 lines of <span class=\"built_in\">history</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> ruler               <span class=\"string\">\" show the cursor position</span></span><br><span class=\"line\"><span class=\"string\">syntax on               \"</span> syntax highlighting</span><br><span class=\"line\"><span class=\"built_in\">set</span> hlsearch            <span class=\"string\">\" highlight the last searched term</span></span><br><span class=\"line\"><span class=\"string\">filetype plugin on      \"</span> use the file <span class=\"built_in\">type</span> plugins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\" When editing a file, always jump to the last cursor position</span></span><br><span class=\"line\"><span class=\"string\">autocmd BufReadPost *</span></span><br><span class=\"line\"><span class=\"string\">\\ if ! exists(\"</span>g:leave_my_cursor_position_alone<span class=\"string\">\") |</span></span><br><span class=\"line\"><span class=\"string\">\\ if line(\"</span><span class=\"string\">'\\\"\") &gt; 0 &amp;&amp; line (\"'</span>\\<span class=\"string\">\"\"</span>) &lt;= line(<span class=\"string\">\"$\"</span>) |</span><br><span class=\"line\">\\ exe <span class=\"string\">\"normal g'\\\"\"</span> |</span><br><span class=\"line\">\\ endif |</span><br><span class=\"line\">\\ endif</span><br></pre></td></tr></table></figure>\n<h1 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h1><p>再次打开该文件发现已经生效<br><img src=\"/images/post/2014/10/01/configure-vim-highlight-on-mac.png\" alt=\"configure-vim\"></p>"},{"title":"在Linux上编译OpenJDK7源码","date":"2014-11-07T21:50:46.000Z","_content":"\n\n# 软件环境\n- OS：CentOS 6.5\n- JDK: OpenJDK-7u40\n\n# 准备工作\n\n## 下载源码包\n[OpenJDK Source Releases](https://jdk7.java.net/source.html)\n\n## 解压源码包\n```bash\n# unzip openjdk-7u40-fcs-src-b43-26_aug_2013.zip\n```\n\n- hotspot 虚拟机实现，大部分是C/C++代码\n- jdk Java核心类库目录，位于 jdk/src/share/classes\n- langtools 一些编译工具\n\n## 安装依赖\n```bash\nyum -y install gcc gcc-c++ alsa-lib alsa-lib-devel libXrender libXrender-devel libXi-devel libXt-devel libXtst-devel cups cups-devel\n```\n\n<!-- more -->\n\n## 安装freetype\n```bash\n# ./configure && make && make install\n```\n\n## 安装Ant\n```bash\nln -s /usr/local/apache-ant-1.9.4/bin/ant /usr/bin/ant\n```\n\n## 安装JDK（如果已有则不必重新安装） \n`Sun JDK或Open JDK均可，过程略.`\n\n# 环境配置\n编辑文件`vim ~/.bash_profile`加入以下变量\n\n```\nexport LANG=\"C\"\nexport ALT_BOOTDIR=\"/usr/java/jdk1.7.0_67/\"\nexport ANT_HOME=\"/usr/local/apache-ant-1.9.4\"\nexport ALT_FREETYPE_HEADERS_PATH=\"/usr/local/include/freetype2\"\nexport ALT_FREETYPE_LIB_PATH=\"/usr/local/lib\"\nexport ALLOW_DOWNLOADS=true\nexport SKIP_DEBUG_BUILD=false\nexport SKIP_FASTDEBUG_BUILD=true\nexport DEBUG_NAME=debug\nunset JAVA_HOME\nunset CLASSPATH\n```\n\n使变量生效\n```\n# source ~/.bash_profile\n```\n\n# 编译源码\n\n## 测试环境是否健全\n```\n# make sanity\n```\n\n## 如果输出以下内容则表示通过，可以进行编译。\n```\nSanity check passed.\n```\n\n## 开始编译\n```\n# make ARCH_DATA_MODEL=64\n```\n\n## 看到如下输出则为编译成功\n```\n>>>Finished making images @ Sat Nov  8 00:45:16 EST 2014 ...\nmake[2]: Leaving directory `/usr/local/openjdk/jdk/make'\n########################################################################\n##### Leaving jdk for target(s) sanity all docs images             #####\n########################################################################\n##### Build time 00:10:15 jdk for target(s) sanity all docs images #####\n########################################################################\n\n#-- Build times ----------\nTarget debug_build\nStart 2014-11-08 00:26:41\nEnd   2014-11-08 00:45:16\n00:02:11 corba\n00:04:36 hotspot\n00:00:24 jaxp\n00:00:30 jaxws\n00:10:15 jdk\n00:00:39 langtools\n00:18:35 TOTAL\n-------------------------\nmake[1]: Leaving directory `/usr/local/openjdk'\n[root@BobServerStation openjdk]#\n```\n\n# 测试验证\n\n## 一个测试类\n```java\n/**\n* Author: HunterZhao\n* Date: 2014-11-08\n*/\npublic class Test{\n  public static void main(String[] args){\n       System.out.println(\"Hello OpenJDK~\");\n  }\n}\n```\n\n使用刚生成的JDK编译\n```\n# ./build/linux-amd64/bin/javac Test.java\n```\n在当前目录下会生成Test.class文件，然后运行便会看到输出。\n```\n# ./build/linux-amd64/bin/java Test\nHello OpenJDK~\n```\n\n## 另一个测试类\n进入目录`jdk/src/share/classes/java/io`，然后修改`PrintStream.java`\n\n```java\n/**\n   * Prints a string.  If the argument is <code>null</code> then the string\n   * <code>\"null\"</code> is printed.  Otherwise, the string's characters are\n   * converted into bytes according to the platform's default character\n   * encoding, and these bytes are written in exactly the manner of the\n   * <code>{@link #write(int)}</code> method.\n   *\n   * @param      s   The <code>String</code> to be printed\n   */\n  public void print(String s) {\n      if (s == null) {\n          s = \"null\";\n      }\n      s = s + \" This is OpenJdk7 compiled by Bob.Z!!!\";  // 重新赋值\n      write(s);\n  }\n```\n\n接下来重新编译JDK，重新编译刚才的Test.java文件并运行会看到如下输出：\n\n\n![compile-openjdk7](/images/post/2014/11/08/compile-openjdk7-on-mac.png)\n\nEnjoy them~\n\n\n# Reference\n- OpenJDK: https://jdk7.java.net/\n- freetype: http://download.savannah.gnu.org/releases/freetype/\n- Ant: http://archive.apache.org/dist/ant/binaries/","source":"_posts/2014/11/08/compile-jdk7-source-code-on-centos.md","raw":"---\ntitle: 在Linux上编译OpenJDK7源码\ndate: 2014-11-08 05:50:46\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - CentOS\n---\n\n\n# 软件环境\n- OS：CentOS 6.5\n- JDK: OpenJDK-7u40\n\n# 准备工作\n\n## 下载源码包\n[OpenJDK Source Releases](https://jdk7.java.net/source.html)\n\n## 解压源码包\n```bash\n# unzip openjdk-7u40-fcs-src-b43-26_aug_2013.zip\n```\n\n- hotspot 虚拟机实现，大部分是C/C++代码\n- jdk Java核心类库目录，位于 jdk/src/share/classes\n- langtools 一些编译工具\n\n## 安装依赖\n```bash\nyum -y install gcc gcc-c++ alsa-lib alsa-lib-devel libXrender libXrender-devel libXi-devel libXt-devel libXtst-devel cups cups-devel\n```\n\n<!-- more -->\n\n## 安装freetype\n```bash\n# ./configure && make && make install\n```\n\n## 安装Ant\n```bash\nln -s /usr/local/apache-ant-1.9.4/bin/ant /usr/bin/ant\n```\n\n## 安装JDK（如果已有则不必重新安装） \n`Sun JDK或Open JDK均可，过程略.`\n\n# 环境配置\n编辑文件`vim ~/.bash_profile`加入以下变量\n\n```\nexport LANG=\"C\"\nexport ALT_BOOTDIR=\"/usr/java/jdk1.7.0_67/\"\nexport ANT_HOME=\"/usr/local/apache-ant-1.9.4\"\nexport ALT_FREETYPE_HEADERS_PATH=\"/usr/local/include/freetype2\"\nexport ALT_FREETYPE_LIB_PATH=\"/usr/local/lib\"\nexport ALLOW_DOWNLOADS=true\nexport SKIP_DEBUG_BUILD=false\nexport SKIP_FASTDEBUG_BUILD=true\nexport DEBUG_NAME=debug\nunset JAVA_HOME\nunset CLASSPATH\n```\n\n使变量生效\n```\n# source ~/.bash_profile\n```\n\n# 编译源码\n\n## 测试环境是否健全\n```\n# make sanity\n```\n\n## 如果输出以下内容则表示通过，可以进行编译。\n```\nSanity check passed.\n```\n\n## 开始编译\n```\n# make ARCH_DATA_MODEL=64\n```\n\n## 看到如下输出则为编译成功\n```\n>>>Finished making images @ Sat Nov  8 00:45:16 EST 2014 ...\nmake[2]: Leaving directory `/usr/local/openjdk/jdk/make'\n########################################################################\n##### Leaving jdk for target(s) sanity all docs images             #####\n########################################################################\n##### Build time 00:10:15 jdk for target(s) sanity all docs images #####\n########################################################################\n\n#-- Build times ----------\nTarget debug_build\nStart 2014-11-08 00:26:41\nEnd   2014-11-08 00:45:16\n00:02:11 corba\n00:04:36 hotspot\n00:00:24 jaxp\n00:00:30 jaxws\n00:10:15 jdk\n00:00:39 langtools\n00:18:35 TOTAL\n-------------------------\nmake[1]: Leaving directory `/usr/local/openjdk'\n[root@BobServerStation openjdk]#\n```\n\n# 测试验证\n\n## 一个测试类\n```java\n/**\n* Author: HunterZhao\n* Date: 2014-11-08\n*/\npublic class Test{\n  public static void main(String[] args){\n       System.out.println(\"Hello OpenJDK~\");\n  }\n}\n```\n\n使用刚生成的JDK编译\n```\n# ./build/linux-amd64/bin/javac Test.java\n```\n在当前目录下会生成Test.class文件，然后运行便会看到输出。\n```\n# ./build/linux-amd64/bin/java Test\nHello OpenJDK~\n```\n\n## 另一个测试类\n进入目录`jdk/src/share/classes/java/io`，然后修改`PrintStream.java`\n\n```java\n/**\n   * Prints a string.  If the argument is <code>null</code> then the string\n   * <code>\"null\"</code> is printed.  Otherwise, the string's characters are\n   * converted into bytes according to the platform's default character\n   * encoding, and these bytes are written in exactly the manner of the\n   * <code>{@link #write(int)}</code> method.\n   *\n   * @param      s   The <code>String</code> to be printed\n   */\n  public void print(String s) {\n      if (s == null) {\n          s = \"null\";\n      }\n      s = s + \" This is OpenJdk7 compiled by Bob.Z!!!\";  // 重新赋值\n      write(s);\n  }\n```\n\n接下来重新编译JDK，重新编译刚才的Test.java文件并运行会看到如下输出：\n\n\n![compile-openjdk7](/images/post/2014/11/08/compile-openjdk7-on-mac.png)\n\nEnjoy them~\n\n\n# Reference\n- OpenJDK: https://jdk7.java.net/\n- freetype: http://download.savannah.gnu.org/releases/freetype/\n- Ant: http://archive.apache.org/dist/ant/binaries/","slug":"compile-jdk7-source-code-on-centos","published":1,"updated":"2018-03-27T19:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1q000b2zs6vtcta56w","content":"<h1 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h1><ul>\n<li>OS：CentOS 6.5</li>\n<li>JDK: OpenJDK-7u40</li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h2><p><a href=\"https://jdk7.java.net/source.html\" target=\"_blank\" rel=\"noopener\">OpenJDK Source Releases</a></p>\n<h2 id=\"解压源码包\"><a href=\"#解压源码包\" class=\"headerlink\" title=\"解压源码包\"></a>解压源码包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># unzip openjdk-7u40-fcs-src-b43-26_aug_2013.zip</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>hotspot 虚拟机实现，大部分是C/C++代码</li>\n<li>jdk Java核心类库目录，位于 jdk/src/share/classes</li>\n<li>langtools 一些编译工具</li>\n</ul>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ alsa-lib alsa-lib-devel libXrender libXrender-devel libXi-devel libXt-devel libXtst-devel cups cups-devel</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"安装freetype\"><a href=\"#安装freetype\" class=\"headerlink\" title=\"安装freetype\"></a>安装freetype</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Ant\"><a href=\"#安装Ant\" class=\"headerlink\" title=\"安装Ant\"></a>安装Ant</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/apache-ant-1.9.4/bin/ant /usr/bin/ant</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装JDK（如果已有则不必重新安装）\"><a href=\"#安装JDK（如果已有则不必重新安装）\" class=\"headerlink\" title=\"安装JDK（如果已有则不必重新安装）\"></a>安装JDK（如果已有则不必重新安装）</h2><p><code>Sun JDK或Open JDK均可，过程略.</code></p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>编辑文件<code>vim ~/.bash_profile</code>加入以下变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LANG=&quot;C&quot;</span><br><span class=\"line\">export ALT_BOOTDIR=&quot;/usr/java/jdk1.7.0_67/&quot;</span><br><span class=\"line\">export ANT_HOME=&quot;/usr/local/apache-ant-1.9.4&quot;</span><br><span class=\"line\">export ALT_FREETYPE_HEADERS_PATH=&quot;/usr/local/include/freetype2&quot;</span><br><span class=\"line\">export ALT_FREETYPE_LIB_PATH=&quot;/usr/local/lib&quot;</span><br><span class=\"line\">export ALLOW_DOWNLOADS=true</span><br><span class=\"line\">export SKIP_DEBUG_BUILD=false</span><br><span class=\"line\">export SKIP_FASTDEBUG_BUILD=true</span><br><span class=\"line\">export DEBUG_NAME=debug</span><br><span class=\"line\">unset JAVA_HOME</span><br><span class=\"line\">unset CLASSPATH</span><br></pre></td></tr></table></figure>\n<p>使变量生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># source ~/.bash_profile</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h1><h2 id=\"测试环境是否健全\"><a href=\"#测试环境是否健全\" class=\"headerlink\" title=\"测试环境是否健全\"></a>测试环境是否健全</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># make sanity</span><br></pre></td></tr></table></figure>\n<h2 id=\"如果输出以下内容则表示通过，可以进行编译。\"><a href=\"#如果输出以下内容则表示通过，可以进行编译。\" class=\"headerlink\" title=\"如果输出以下内容则表示通过，可以进行编译。\"></a>如果输出以下内容则表示通过，可以进行编译。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sanity check passed.</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># make ARCH_DATA_MODEL=64</span><br></pre></td></tr></table></figure>\n<h2 id=\"看到如下输出则为编译成功\"><a href=\"#看到如下输出则为编译成功\" class=\"headerlink\" title=\"看到如下输出则为编译成功\"></a>看到如下输出则为编译成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;Finished making images @ Sat Nov  8 00:45:16 EST 2014 ...</span><br><span class=\"line\">make[2]: Leaving directory `/usr/local/openjdk/jdk/make&apos;</span><br><span class=\"line\">########################################################################</span><br><span class=\"line\">##### Leaving jdk for target(s) sanity all docs images             #####</span><br><span class=\"line\">########################################################################</span><br><span class=\"line\">##### Build time 00:10:15 jdk for target(s) sanity all docs images #####</span><br><span class=\"line\">########################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">#-- Build times ----------</span><br><span class=\"line\">Target debug_build</span><br><span class=\"line\">Start 2014-11-08 00:26:41</span><br><span class=\"line\">End   2014-11-08 00:45:16</span><br><span class=\"line\">00:02:11 corba</span><br><span class=\"line\">00:04:36 hotspot</span><br><span class=\"line\">00:00:24 jaxp</span><br><span class=\"line\">00:00:30 jaxws</span><br><span class=\"line\">00:10:15 jdk</span><br><span class=\"line\">00:00:39 langtools</span><br><span class=\"line\">00:18:35 TOTAL</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">make[1]: Leaving directory `/usr/local/openjdk&apos;</span><br><span class=\"line\">[root@BobServerStation openjdk]#</span><br></pre></td></tr></table></figure>\n<h1 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h1><h2 id=\"一个测试类\"><a href=\"#一个测试类\" class=\"headerlink\" title=\"一个测试类\"></a>一个测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Author: HunterZhao</span></span><br><span class=\"line\"><span class=\"comment\">* Date: 2014-11-08</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"Hello OpenJDK~\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用刚生成的JDK编译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ./build/linux-amd64/bin/javac Test.java</span><br></pre></td></tr></table></figure></p>\n<p>在当前目录下会生成Test.class文件，然后运行便会看到输出。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ./build/linux-amd64/bin/java Test</span><br><span class=\"line\">Hello OpenJDK~</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"另一个测试类\"><a href=\"#另一个测试类\" class=\"headerlink\" title=\"另一个测试类\"></a>另一个测试类</h2><p>进入目录<code>jdk/src/share/classes/java/io</code>，然后修改<code>PrintStream.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Prints a string.  If the argument is &lt;code&gt;null&lt;/code&gt; then the string</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;\"null\"&lt;/code&gt; is printed.  Otherwise, the string's characters are</span></span><br><span class=\"line\"><span class=\"comment\">   * converted into bytes according to the platform's default character</span></span><br><span class=\"line\"><span class=\"comment\">   * encoding, and these bytes are written in exactly the manner of the</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;&#123;<span class=\"doctag\">@link</span> #write(int)&#125;&lt;/code&gt; method.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>      s   The &lt;code&gt;String&lt;/code&gt; to be printed</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          s = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      s = s + <span class=\"string\">\" This is OpenJdk7 compiled by Bob.Z!!!\"</span>;  <span class=\"comment\">// 重新赋值</span></span><br><span class=\"line\">      write(s);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>接下来重新编译JDK，重新编译刚才的Test.java文件并运行会看到如下输出：</p>\n<p><img src=\"/images/post/2014/11/08/compile-openjdk7-on-mac.png\" alt=\"compile-openjdk7\"></p>\n<p>Enjoy them~</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>OpenJDK: <a href=\"https://jdk7.java.net/\" target=\"_blank\" rel=\"noopener\">https://jdk7.java.net/</a></li>\n<li>freetype: <a href=\"http://download.savannah.gnu.org/releases/freetype/\" target=\"_blank\" rel=\"noopener\">http://download.savannah.gnu.org/releases/freetype/</a></li>\n<li>Ant: <a href=\"http://archive.apache.org/dist/ant/binaries/\" target=\"_blank\" rel=\"noopener\">http://archive.apache.org/dist/ant/binaries/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h1><ul>\n<li>OS：CentOS 6.5</li>\n<li>JDK: OpenJDK-7u40</li>\n</ul>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h2><p><a href=\"https://jdk7.java.net/source.html\" target=\"_blank\" rel=\"noopener\">OpenJDK Source Releases</a></p>\n<h2 id=\"解压源码包\"><a href=\"#解压源码包\" class=\"headerlink\" title=\"解压源码包\"></a>解压源码包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># unzip openjdk-7u40-fcs-src-b43-26_aug_2013.zip</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>hotspot 虚拟机实现，大部分是C/C++代码</li>\n<li>jdk Java核心类库目录，位于 jdk/src/share/classes</li>\n<li>langtools 一些编译工具</li>\n</ul>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ alsa-lib alsa-lib-devel libXrender libXrender-devel libXi-devel libXt-devel libXtst-devel cups cups-devel</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"安装freetype\"><a href=\"#安装freetype\" class=\"headerlink\" title=\"安装freetype\"></a>安装freetype</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装Ant\"><a href=\"#安装Ant\" class=\"headerlink\" title=\"安装Ant\"></a>安装Ant</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/apache-ant-1.9.4/bin/ant /usr/bin/ant</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装JDK（如果已有则不必重新安装）\"><a href=\"#安装JDK（如果已有则不必重新安装）\" class=\"headerlink\" title=\"安装JDK（如果已有则不必重新安装）\"></a>安装JDK（如果已有则不必重新安装）</h2><p><code>Sun JDK或Open JDK均可，过程略.</code></p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>编辑文件<code>vim ~/.bash_profile</code>加入以下变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LANG=&quot;C&quot;</span><br><span class=\"line\">export ALT_BOOTDIR=&quot;/usr/java/jdk1.7.0_67/&quot;</span><br><span class=\"line\">export ANT_HOME=&quot;/usr/local/apache-ant-1.9.4&quot;</span><br><span class=\"line\">export ALT_FREETYPE_HEADERS_PATH=&quot;/usr/local/include/freetype2&quot;</span><br><span class=\"line\">export ALT_FREETYPE_LIB_PATH=&quot;/usr/local/lib&quot;</span><br><span class=\"line\">export ALLOW_DOWNLOADS=true</span><br><span class=\"line\">export SKIP_DEBUG_BUILD=false</span><br><span class=\"line\">export SKIP_FASTDEBUG_BUILD=true</span><br><span class=\"line\">export DEBUG_NAME=debug</span><br><span class=\"line\">unset JAVA_HOME</span><br><span class=\"line\">unset CLASSPATH</span><br></pre></td></tr></table></figure>\n<p>使变量生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># source ~/.bash_profile</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h1><h2 id=\"测试环境是否健全\"><a href=\"#测试环境是否健全\" class=\"headerlink\" title=\"测试环境是否健全\"></a>测试环境是否健全</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># make sanity</span><br></pre></td></tr></table></figure>\n<h2 id=\"如果输出以下内容则表示通过，可以进行编译。\"><a href=\"#如果输出以下内容则表示通过，可以进行编译。\" class=\"headerlink\" title=\"如果输出以下内容则表示通过，可以进行编译。\"></a>如果输出以下内容则表示通过，可以进行编译。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sanity check passed.</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># make ARCH_DATA_MODEL=64</span><br></pre></td></tr></table></figure>\n<h2 id=\"看到如下输出则为编译成功\"><a href=\"#看到如下输出则为编译成功\" class=\"headerlink\" title=\"看到如下输出则为编译成功\"></a>看到如下输出则为编译成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;Finished making images @ Sat Nov  8 00:45:16 EST 2014 ...</span><br><span class=\"line\">make[2]: Leaving directory `/usr/local/openjdk/jdk/make&apos;</span><br><span class=\"line\">########################################################################</span><br><span class=\"line\">##### Leaving jdk for target(s) sanity all docs images             #####</span><br><span class=\"line\">########################################################################</span><br><span class=\"line\">##### Build time 00:10:15 jdk for target(s) sanity all docs images #####</span><br><span class=\"line\">########################################################################</span><br><span class=\"line\"></span><br><span class=\"line\">#-- Build times ----------</span><br><span class=\"line\">Target debug_build</span><br><span class=\"line\">Start 2014-11-08 00:26:41</span><br><span class=\"line\">End   2014-11-08 00:45:16</span><br><span class=\"line\">00:02:11 corba</span><br><span class=\"line\">00:04:36 hotspot</span><br><span class=\"line\">00:00:24 jaxp</span><br><span class=\"line\">00:00:30 jaxws</span><br><span class=\"line\">00:10:15 jdk</span><br><span class=\"line\">00:00:39 langtools</span><br><span class=\"line\">00:18:35 TOTAL</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">make[1]: Leaving directory `/usr/local/openjdk&apos;</span><br><span class=\"line\">[root@BobServerStation openjdk]#</span><br></pre></td></tr></table></figure>\n<h1 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h1><h2 id=\"一个测试类\"><a href=\"#一个测试类\" class=\"headerlink\" title=\"一个测试类\"></a>一个测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Author: HunterZhao</span></span><br><span class=\"line\"><span class=\"comment\">* Date: 2014-11-08</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"Hello OpenJDK~\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用刚生成的JDK编译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ./build/linux-amd64/bin/javac Test.java</span><br></pre></td></tr></table></figure></p>\n<p>在当前目录下会生成Test.class文件，然后运行便会看到输出。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ./build/linux-amd64/bin/java Test</span><br><span class=\"line\">Hello OpenJDK~</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"另一个测试类\"><a href=\"#另一个测试类\" class=\"headerlink\" title=\"另一个测试类\"></a>另一个测试类</h2><p>进入目录<code>jdk/src/share/classes/java/io</code>，然后修改<code>PrintStream.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Prints a string.  If the argument is &lt;code&gt;null&lt;/code&gt; then the string</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;\"null\"&lt;/code&gt; is printed.  Otherwise, the string's characters are</span></span><br><span class=\"line\"><span class=\"comment\">   * converted into bytes according to the platform's default character</span></span><br><span class=\"line\"><span class=\"comment\">   * encoding, and these bytes are written in exactly the manner of the</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;&#123;<span class=\"doctag\">@link</span> #write(int)&#125;&lt;/code&gt; method.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span>      s   The &lt;code&gt;String&lt;/code&gt; to be printed</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          s = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      s = s + <span class=\"string\">\" This is OpenJdk7 compiled by Bob.Z!!!\"</span>;  <span class=\"comment\">// 重新赋值</span></span><br><span class=\"line\">      write(s);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>接下来重新编译JDK，重新编译刚才的Test.java文件并运行会看到如下输出：</p>\n<p><img src=\"/images/post/2014/11/08/compile-openjdk7-on-mac.png\" alt=\"compile-openjdk7\"></p>\n<p>Enjoy them~</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>OpenJDK: <a href=\"https://jdk7.java.net/\" target=\"_blank\" rel=\"noopener\">https://jdk7.java.net/</a></li>\n<li>freetype: <a href=\"http://download.savannah.gnu.org/releases/freetype/\" target=\"_blank\" rel=\"noopener\">http://download.savannah.gnu.org/releases/freetype/</a></li>\n<li>Ant: <a href=\"http://archive.apache.org/dist/ant/binaries/\" target=\"_blank\" rel=\"noopener\">http://archive.apache.org/dist/ant/binaries/</a></li>\n</ul>"},{"title":"在Linux下搭建OpenJDK7源码调试环境","date":"2014-11-19T09:17:53.000Z","_content":"\n在前面的文章中博主已经介绍过如何在Linux下编译OpenJDK7源码，现继续介绍如何在Linux下搭建基于eclipse IDE的Hotspot源码调试环境。鉴于网上关于JVM源码调试方面的文章寥寥无几并且内容参差不全，本文将把博主摸索数天的经验及成果以图文形式详细介绍Hotspot的debug过程。\n\n# 软件环境\n- OS：CentOS 6.5\n- OpenJDK: OpenJDK-7u40\n- JDK Version：openjdk-7u40-fcs-src-b43-26_aug_2013\n- IDE：eclipse-cpp-luna-SR1-linux-gtk-x86_64\n\n# 导入源码\n首先解压JDK源码包至`/usr/local`目录，然后启动eclipse，依次选择`File` > `New` > `Makefile Project with Existing Code`(如果没有则在Other里找)\n\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-1.jpg)\n\n# 配置环境变量\n定位到项目名右键 > `Properties >C/C++ Build`需要修改两个地方：\n- 将Builder里`Use default build command`的对勾去掉，填入参数`ARCH_DATA_MODEL=64`\n- 将`Build location`的`Build directory`追加上`/make`，最终是`${workspace_lc:/hotspot}/make`，目的是告诉make编译器到该目录下寻找编译文件Makefile。\n\n<!-- more -->\n\n\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-2.jpg)\n\n# 开始编译\n选择菜单栏`Project` > `Build Project`，如果运气不差的话会看到已经开始build了，沏杯咖啡慢慢等吧（首次build大概需要10-20m）。\n\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-3.jpg)\n\n部分LOG信息：\n\n```bash\nmake[4]: Entering directory `/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug'\necho \"**NOTICE** Dtrace support disabled: \"/usr/include/sys/sdt.h not found\"\"\n**NOTICE** Dtrace support disabled: /usr/include/sys/sdt.h not found\nmake[4]: Leaving directory `/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug'\nAll done.\nmake[3]: Leaving directory `/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug'\ncd linux_amd64_compiler2/fastdebug && ./test_gamma\njava version \"1.7.0_67\"\nJava(TM) SE Runtime Environment (build 1.7.0_67-b01)\nOpenJDK 64-Bit Server VM (build 24.0-b56-internal-fastdebug, mixed mode)\n\n 1. A1 B5 C8 D6 E3 F7 G2 H4 \n 2. A1 B6 C8 D3 E7 F4 G2 H5 \n 3. A1 B7 C4 D6 E8 F2 G5 H3 \n 4. A1 B7 C5 D8 E2 F4 G6 H3 \n 5. A2 B4 C6 D8 E3 F1 G7 H5 \n 6. A2 B5 C7 D1 E3 F8 G6 H4\n\n -- 此处略去N行------\n\n\n Using java runtime at: /usr/java/jdk1.7.0_67/jre\nmake[2]: Leaving directory `/usr/local/openjdk/hotspot/build/linux'\nmake[1]: Leaving directory `/usr/local/openjdk/hotspot/make'\ncd /usr/local/openjdk/hotspot/make; \\\n    make BUILD_FLAVOR=fastdebug VM_TARGET=fastdebug1 generic_build1 \nINFO: ENABLE_FULL_DEBUG_SYMBOLS=1\nINFO: /usr/bin/objcopy cmd found so will create .debuginfo files.\nINFO: STRIP_POLICY=min_strip\nINFO: ZIP_DEBUGINFO_FILES=1\nmake[1]: Entering directory `/usr/local/openjdk/hotspot/make'\nmkdir -p /usr/local/openjdk/hotspot/build/linux\nNo compiler1 (fastdebug1) for ARCH_DATA_MODEL=64\nmake[1]: Leaving directory `/usr/local/openjdk/hotspot/make'\nmake BUILD_FLAVOR=fastdebug VM_SUBDIR=fastdebug \\\n      EXPORT_SUBDIR=/fastdebug \\\n      generic_export\nINFO: ENABLE_FULL_DEBUG_SYMBOLS=1\nINFO: /usr/bin/objcopy cmd found so will create .debuginfo files.\nINFO: STRIP_POLICY=min_strip\nINFO: ZIP_DEBUGINFO_FILES=1\nmake[1]: Entering directory `/usr/local/openjdk/hotspot/make'\nmake[1]: Nothing to be done for `generic_export'.\nmake[1]: Leaving directory `/usr/local/openjdk/hotspot/make'\n\n16:02:09 Build Finished (took 8s.216ms)\n```\n\n# 配置DEBUG环境\n- 编译成功之后就可以测试了，需配置如下几步\n点选菜单栏`Run` > `Debug Configurations` > `New launch configuration`，在`C/C++ Application`里填入`/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug/gamma`，Project选择当前项目。\n- 在`Argument tab`页里`Program arguments`填入`-version`\n- 在`Environment tab`页里`Environment variables to set`填入`JAVA_HOME | /usr/java/jdk1.7.0.67`\n- 在`Common tab`页里勾选`Debug`\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-4.jpg)\n\n# 进入调试模式\n配置完毕后，点击Debug即可进入调试模式，Hotspot内部一览无余，\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-5.jpg)\n","source":"_posts/2014/11/19/build-hotspot-jvm-debug-environment-on-linux.md","raw":"---\ntitle: 在Linux下搭建OpenJDK7源码调试环境\ndate: 2014-11-19 17:17:53\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - Linux\n    - CentOS\n---\n\n在前面的文章中博主已经介绍过如何在Linux下编译OpenJDK7源码，现继续介绍如何在Linux下搭建基于eclipse IDE的Hotspot源码调试环境。鉴于网上关于JVM源码调试方面的文章寥寥无几并且内容参差不全，本文将把博主摸索数天的经验及成果以图文形式详细介绍Hotspot的debug过程。\n\n# 软件环境\n- OS：CentOS 6.5\n- OpenJDK: OpenJDK-7u40\n- JDK Version：openjdk-7u40-fcs-src-b43-26_aug_2013\n- IDE：eclipse-cpp-luna-SR1-linux-gtk-x86_64\n\n# 导入源码\n首先解压JDK源码包至`/usr/local`目录，然后启动eclipse，依次选择`File` > `New` > `Makefile Project with Existing Code`(如果没有则在Other里找)\n\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-1.jpg)\n\n# 配置环境变量\n定位到项目名右键 > `Properties >C/C++ Build`需要修改两个地方：\n- 将Builder里`Use default build command`的对勾去掉，填入参数`ARCH_DATA_MODEL=64`\n- 将`Build location`的`Build directory`追加上`/make`，最终是`${workspace_lc:/hotspot}/make`，目的是告诉make编译器到该目录下寻找编译文件Makefile。\n\n<!-- more -->\n\n\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-2.jpg)\n\n# 开始编译\n选择菜单栏`Project` > `Build Project`，如果运气不差的话会看到已经开始build了，沏杯咖啡慢慢等吧（首次build大概需要10-20m）。\n\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-3.jpg)\n\n部分LOG信息：\n\n```bash\nmake[4]: Entering directory `/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug'\necho \"**NOTICE** Dtrace support disabled: \"/usr/include/sys/sdt.h not found\"\"\n**NOTICE** Dtrace support disabled: /usr/include/sys/sdt.h not found\nmake[4]: Leaving directory `/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug'\nAll done.\nmake[3]: Leaving directory `/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug'\ncd linux_amd64_compiler2/fastdebug && ./test_gamma\njava version \"1.7.0_67\"\nJava(TM) SE Runtime Environment (build 1.7.0_67-b01)\nOpenJDK 64-Bit Server VM (build 24.0-b56-internal-fastdebug, mixed mode)\n\n 1. A1 B5 C8 D6 E3 F7 G2 H4 \n 2. A1 B6 C8 D3 E7 F4 G2 H5 \n 3. A1 B7 C4 D6 E8 F2 G5 H3 \n 4. A1 B7 C5 D8 E2 F4 G6 H3 \n 5. A2 B4 C6 D8 E3 F1 G7 H5 \n 6. A2 B5 C7 D1 E3 F8 G6 H4\n\n -- 此处略去N行------\n\n\n Using java runtime at: /usr/java/jdk1.7.0_67/jre\nmake[2]: Leaving directory `/usr/local/openjdk/hotspot/build/linux'\nmake[1]: Leaving directory `/usr/local/openjdk/hotspot/make'\ncd /usr/local/openjdk/hotspot/make; \\\n    make BUILD_FLAVOR=fastdebug VM_TARGET=fastdebug1 generic_build1 \nINFO: ENABLE_FULL_DEBUG_SYMBOLS=1\nINFO: /usr/bin/objcopy cmd found so will create .debuginfo files.\nINFO: STRIP_POLICY=min_strip\nINFO: ZIP_DEBUGINFO_FILES=1\nmake[1]: Entering directory `/usr/local/openjdk/hotspot/make'\nmkdir -p /usr/local/openjdk/hotspot/build/linux\nNo compiler1 (fastdebug1) for ARCH_DATA_MODEL=64\nmake[1]: Leaving directory `/usr/local/openjdk/hotspot/make'\nmake BUILD_FLAVOR=fastdebug VM_SUBDIR=fastdebug \\\n      EXPORT_SUBDIR=/fastdebug \\\n      generic_export\nINFO: ENABLE_FULL_DEBUG_SYMBOLS=1\nINFO: /usr/bin/objcopy cmd found so will create .debuginfo files.\nINFO: STRIP_POLICY=min_strip\nINFO: ZIP_DEBUGINFO_FILES=1\nmake[1]: Entering directory `/usr/local/openjdk/hotspot/make'\nmake[1]: Nothing to be done for `generic_export'.\nmake[1]: Leaving directory `/usr/local/openjdk/hotspot/make'\n\n16:02:09 Build Finished (took 8s.216ms)\n```\n\n# 配置DEBUG环境\n- 编译成功之后就可以测试了，需配置如下几步\n点选菜单栏`Run` > `Debug Configurations` > `New launch configuration`，在`C/C++ Application`里填入`/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug/gamma`，Project选择当前项目。\n- 在`Argument tab`页里`Program arguments`填入`-version`\n- 在`Environment tab`页里`Environment variables to set`填入`JAVA_HOME | /usr/java/jdk1.7.0.67`\n- 在`Common tab`页里勾选`Debug`\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-4.jpg)\n\n# 进入调试模式\n配置完毕后，点击Debug即可进入调试模式，Hotspot内部一览无余，\n![debug-openjdk7](/images/post/2014/11/19/debug-jvm-on-linux-5.jpg)\n","slug":"build-hotspot-jvm-debug-environment-on-linux","published":1,"updated":"2018-03-27T19:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1r000c2zs6il38gh0g","content":"<p>在前面的文章中博主已经介绍过如何在Linux下编译OpenJDK7源码，现继续介绍如何在Linux下搭建基于eclipse IDE的Hotspot源码调试环境。鉴于网上关于JVM源码调试方面的文章寥寥无几并且内容参差不全，本文将把博主摸索数天的经验及成果以图文形式详细介绍Hotspot的debug过程。</p>\n<h1 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h1><ul>\n<li>OS：CentOS 6.5</li>\n<li>OpenJDK: OpenJDK-7u40</li>\n<li>JDK Version：openjdk-7u40-fcs-src-b43-26_aug_2013</li>\n<li>IDE：eclipse-cpp-luna-SR1-linux-gtk-x86_64</li>\n</ul>\n<h1 id=\"导入源码\"><a href=\"#导入源码\" class=\"headerlink\" title=\"导入源码\"></a>导入源码</h1><p>首先解压JDK源码包至<code>/usr/local</code>目录，然后启动eclipse，依次选择<code>File</code> &gt; <code>New</code> &gt; <code>Makefile Project with Existing Code</code>(如果没有则在Other里找)</p>\n<p><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-1.jpg\" alt=\"debug-openjdk7\"></p>\n<h1 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h1><p>定位到项目名右键 &gt; <code>Properties &gt;C/C++ Build</code>需要修改两个地方：</p>\n<ul>\n<li>将Builder里<code>Use default build command</code>的对勾去掉，填入参数<code>ARCH_DATA_MODEL=64</code></li>\n<li>将<code>Build location</code>的<code>Build directory</code>追加上<code>/make</code>，最终是<code>${workspace_lc:/hotspot}/make</code>，目的是告诉make编译器到该目录下寻找编译文件Makefile。</li>\n</ul>\n<a id=\"more\"></a>\n<p><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-2.jpg\" alt=\"debug-openjdk7\"></p>\n<h1 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h1><p>选择菜单栏<code>Project</code> &gt; <code>Build Project</code>，如果运气不差的话会看到已经开始build了，沏杯咖啡慢慢等吧（首次build大概需要10-20m）。</p>\n<p><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-3.jpg\" alt=\"debug-openjdk7\"></p>\n<p>部分LOG信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make[4]: Entering directory `/usr/<span class=\"built_in\">local</span>/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">echo \"**NOTICE** Dtrace support disabled: \"/usr/include/sys/sdt.h not found\"\"</span></span><br><span class=\"line\"><span class=\"string\">**NOTICE** Dtrace support disabled: /usr/include/sys/sdt.h not found</span></span><br><span class=\"line\"><span class=\"string\">make[4]: Leaving directory `/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug'</span></span><br><span class=\"line\">All <span class=\"keyword\">done</span>.</span><br><span class=\"line\">make[3]: Leaving directory `/usr/<span class=\"built_in\">local</span>/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">cd linux_amd64_compiler2/fastdebug &amp;&amp; ./test_gamma</span></span><br><span class=\"line\"><span class=\"string\">java version \"1.7.0_67\"</span></span><br><span class=\"line\"><span class=\"string\">Java(TM) SE Runtime Environment (build 1.7.0_67-b01)</span></span><br><span class=\"line\"><span class=\"string\">OpenJDK 64-Bit Server VM (build 24.0-b56-internal-fastdebug, mixed mode)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> 1. A1 B5 C8 D6 E3 F7 G2 H4 </span></span><br><span class=\"line\"><span class=\"string\"> 2. A1 B6 C8 D3 E7 F4 G2 H5 </span></span><br><span class=\"line\"><span class=\"string\"> 3. A1 B7 C4 D6 E8 F2 G5 H3 </span></span><br><span class=\"line\"><span class=\"string\"> 4. A1 B7 C5 D8 E2 F4 G6 H3 </span></span><br><span class=\"line\"><span class=\"string\"> 5. A2 B4 C6 D8 E3 F1 G7 H5 </span></span><br><span class=\"line\"><span class=\"string\"> 6. A2 B5 C7 D1 E3 F8 G6 H4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> -- 此处略去N行------</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> Using java runtime at: /usr/java/jdk1.7.0_67/jre</span></span><br><span class=\"line\"><span class=\"string\">make[2]: Leaving directory `/usr/local/openjdk/hotspot/build/linux'</span></span><br><span class=\"line\">make[1]: Leaving directory `/usr/<span class=\"built_in\">local</span>/openjdk/hotspot/make<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">cd /usr/local/openjdk/hotspot/make; \\</span></span><br><span class=\"line\"><span class=\"string\">    make BUILD_FLAVOR=fastdebug VM_TARGET=fastdebug1 generic_build1 </span></span><br><span class=\"line\"><span class=\"string\">INFO: ENABLE_FULL_DEBUG_SYMBOLS=1</span></span><br><span class=\"line\"><span class=\"string\">INFO: /usr/bin/objcopy cmd found so will create .debuginfo files.</span></span><br><span class=\"line\"><span class=\"string\">INFO: STRIP_POLICY=min_strip</span></span><br><span class=\"line\"><span class=\"string\">INFO: ZIP_DEBUGINFO_FILES=1</span></span><br><span class=\"line\"><span class=\"string\">make[1]: Entering directory `/usr/local/openjdk/hotspot/make'</span></span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/openjdk/hotspot/build/linux</span><br><span class=\"line\">No compiler1 (fastdebug1) <span class=\"keyword\">for</span> ARCH_DATA_MODEL=64</span><br><span class=\"line\">make[1]: Leaving directory `/usr/<span class=\"built_in\">local</span>/openjdk/hotspot/make<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">make BUILD_FLAVOR=fastdebug VM_SUBDIR=fastdebug \\</span></span><br><span class=\"line\"><span class=\"string\">      EXPORT_SUBDIR=/fastdebug \\</span></span><br><span class=\"line\"><span class=\"string\">      generic_export</span></span><br><span class=\"line\"><span class=\"string\">INFO: ENABLE_FULL_DEBUG_SYMBOLS=1</span></span><br><span class=\"line\"><span class=\"string\">INFO: /usr/bin/objcopy cmd found so will create .debuginfo files.</span></span><br><span class=\"line\"><span class=\"string\">INFO: STRIP_POLICY=min_strip</span></span><br><span class=\"line\"><span class=\"string\">INFO: ZIP_DEBUGINFO_FILES=1</span></span><br><span class=\"line\"><span class=\"string\">make[1]: Entering directory `/usr/local/openjdk/hotspot/make'</span></span><br><span class=\"line\">make[1]: Nothing to be <span class=\"keyword\">done</span> <span class=\"keyword\">for</span> `generic_export<span class=\"string\">'.</span></span><br><span class=\"line\"><span class=\"string\">make[1]: Leaving directory `/usr/local/openjdk/hotspot/make'</span></span><br><span class=\"line\"></span><br><span class=\"line\">16:02:09 Build Finished (took 8s.216ms)</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置DEBUG环境\"><a href=\"#配置DEBUG环境\" class=\"headerlink\" title=\"配置DEBUG环境\"></a>配置DEBUG环境</h1><ul>\n<li>编译成功之后就可以测试了，需配置如下几步<br>点选菜单栏<code>Run</code> &gt; <code>Debug Configurations</code> &gt; <code>New launch configuration</code>，在<code>C/C++ Application</code>里填入<code>/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug/gamma</code>，Project选择当前项目。</li>\n<li>在<code>Argument tab</code>页里<code>Program arguments</code>填入<code>-version</code></li>\n<li>在<code>Environment tab</code>页里<code>Environment variables to set</code>填入<code>JAVA_HOME | /usr/java/jdk1.7.0.67</code></li>\n<li>在<code>Common tab</code>页里勾选<code>Debug</code><br><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-4.jpg\" alt=\"debug-openjdk7\"></li>\n</ul>\n<h1 id=\"进入调试模式\"><a href=\"#进入调试模式\" class=\"headerlink\" title=\"进入调试模式\"></a>进入调试模式</h1><p>配置完毕后，点击Debug即可进入调试模式，Hotspot内部一览无余，<br><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-5.jpg\" alt=\"debug-openjdk7\"></p>\n","site":{"data":{}},"excerpt":"<p>在前面的文章中博主已经介绍过如何在Linux下编译OpenJDK7源码，现继续介绍如何在Linux下搭建基于eclipse IDE的Hotspot源码调试环境。鉴于网上关于JVM源码调试方面的文章寥寥无几并且内容参差不全，本文将把博主摸索数天的经验及成果以图文形式详细介绍Hotspot的debug过程。</p>\n<h1 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h1><ul>\n<li>OS：CentOS 6.5</li>\n<li>OpenJDK: OpenJDK-7u40</li>\n<li>JDK Version：openjdk-7u40-fcs-src-b43-26_aug_2013</li>\n<li>IDE：eclipse-cpp-luna-SR1-linux-gtk-x86_64</li>\n</ul>\n<h1 id=\"导入源码\"><a href=\"#导入源码\" class=\"headerlink\" title=\"导入源码\"></a>导入源码</h1><p>首先解压JDK源码包至<code>/usr/local</code>目录，然后启动eclipse，依次选择<code>File</code> &gt; <code>New</code> &gt; <code>Makefile Project with Existing Code</code>(如果没有则在Other里找)</p>\n<p><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-1.jpg\" alt=\"debug-openjdk7\"></p>\n<h1 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h1><p>定位到项目名右键 &gt; <code>Properties &gt;C/C++ Build</code>需要修改两个地方：</p>\n<ul>\n<li>将Builder里<code>Use default build command</code>的对勾去掉，填入参数<code>ARCH_DATA_MODEL=64</code></li>\n<li>将<code>Build location</code>的<code>Build directory</code>追加上<code>/make</code>，最终是<code>${workspace_lc:/hotspot}/make</code>，目的是告诉make编译器到该目录下寻找编译文件Makefile。</li>\n</ul>","more":"<p><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-2.jpg\" alt=\"debug-openjdk7\"></p>\n<h1 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h1><p>选择菜单栏<code>Project</code> &gt; <code>Build Project</code>，如果运气不差的话会看到已经开始build了，沏杯咖啡慢慢等吧（首次build大概需要10-20m）。</p>\n<p><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-3.jpg\" alt=\"debug-openjdk7\"></p>\n<p>部分LOG信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make[4]: Entering directory `/usr/<span class=\"built_in\">local</span>/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">echo \"**NOTICE** Dtrace support disabled: \"/usr/include/sys/sdt.h not found\"\"</span></span><br><span class=\"line\"><span class=\"string\">**NOTICE** Dtrace support disabled: /usr/include/sys/sdt.h not found</span></span><br><span class=\"line\"><span class=\"string\">make[4]: Leaving directory `/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug'</span></span><br><span class=\"line\">All <span class=\"keyword\">done</span>.</span><br><span class=\"line\">make[3]: Leaving directory `/usr/<span class=\"built_in\">local</span>/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">cd linux_amd64_compiler2/fastdebug &amp;&amp; ./test_gamma</span></span><br><span class=\"line\"><span class=\"string\">java version \"1.7.0_67\"</span></span><br><span class=\"line\"><span class=\"string\">Java(TM) SE Runtime Environment (build 1.7.0_67-b01)</span></span><br><span class=\"line\"><span class=\"string\">OpenJDK 64-Bit Server VM (build 24.0-b56-internal-fastdebug, mixed mode)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> 1. A1 B5 C8 D6 E3 F7 G2 H4 </span></span><br><span class=\"line\"><span class=\"string\"> 2. A1 B6 C8 D3 E7 F4 G2 H5 </span></span><br><span class=\"line\"><span class=\"string\"> 3. A1 B7 C4 D6 E8 F2 G5 H3 </span></span><br><span class=\"line\"><span class=\"string\"> 4. A1 B7 C5 D8 E2 F4 G6 H3 </span></span><br><span class=\"line\"><span class=\"string\"> 5. A2 B4 C6 D8 E3 F1 G7 H5 </span></span><br><span class=\"line\"><span class=\"string\"> 6. A2 B5 C7 D1 E3 F8 G6 H4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> -- 此处略去N行------</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> Using java runtime at: /usr/java/jdk1.7.0_67/jre</span></span><br><span class=\"line\"><span class=\"string\">make[2]: Leaving directory `/usr/local/openjdk/hotspot/build/linux'</span></span><br><span class=\"line\">make[1]: Leaving directory `/usr/<span class=\"built_in\">local</span>/openjdk/hotspot/make<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">cd /usr/local/openjdk/hotspot/make; \\</span></span><br><span class=\"line\"><span class=\"string\">    make BUILD_FLAVOR=fastdebug VM_TARGET=fastdebug1 generic_build1 </span></span><br><span class=\"line\"><span class=\"string\">INFO: ENABLE_FULL_DEBUG_SYMBOLS=1</span></span><br><span class=\"line\"><span class=\"string\">INFO: /usr/bin/objcopy cmd found so will create .debuginfo files.</span></span><br><span class=\"line\"><span class=\"string\">INFO: STRIP_POLICY=min_strip</span></span><br><span class=\"line\"><span class=\"string\">INFO: ZIP_DEBUGINFO_FILES=1</span></span><br><span class=\"line\"><span class=\"string\">make[1]: Entering directory `/usr/local/openjdk/hotspot/make'</span></span><br><span class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/openjdk/hotspot/build/linux</span><br><span class=\"line\">No compiler1 (fastdebug1) <span class=\"keyword\">for</span> ARCH_DATA_MODEL=64</span><br><span class=\"line\">make[1]: Leaving directory `/usr/<span class=\"built_in\">local</span>/openjdk/hotspot/make<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">make BUILD_FLAVOR=fastdebug VM_SUBDIR=fastdebug \\</span></span><br><span class=\"line\"><span class=\"string\">      EXPORT_SUBDIR=/fastdebug \\</span></span><br><span class=\"line\"><span class=\"string\">      generic_export</span></span><br><span class=\"line\"><span class=\"string\">INFO: ENABLE_FULL_DEBUG_SYMBOLS=1</span></span><br><span class=\"line\"><span class=\"string\">INFO: /usr/bin/objcopy cmd found so will create .debuginfo files.</span></span><br><span class=\"line\"><span class=\"string\">INFO: STRIP_POLICY=min_strip</span></span><br><span class=\"line\"><span class=\"string\">INFO: ZIP_DEBUGINFO_FILES=1</span></span><br><span class=\"line\"><span class=\"string\">make[1]: Entering directory `/usr/local/openjdk/hotspot/make'</span></span><br><span class=\"line\">make[1]: Nothing to be <span class=\"keyword\">done</span> <span class=\"keyword\">for</span> `generic_export<span class=\"string\">'.</span></span><br><span class=\"line\"><span class=\"string\">make[1]: Leaving directory `/usr/local/openjdk/hotspot/make'</span></span><br><span class=\"line\"></span><br><span class=\"line\">16:02:09 Build Finished (took 8s.216ms)</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置DEBUG环境\"><a href=\"#配置DEBUG环境\" class=\"headerlink\" title=\"配置DEBUG环境\"></a>配置DEBUG环境</h1><ul>\n<li>编译成功之后就可以测试了，需配置如下几步<br>点选菜单栏<code>Run</code> &gt; <code>Debug Configurations</code> &gt; <code>New launch configuration</code>，在<code>C/C++ Application</code>里填入<code>/usr/local/openjdk/hotspot/build/linux/linux_amd64_compiler2/fastdebug/gamma</code>，Project选择当前项目。</li>\n<li>在<code>Argument tab</code>页里<code>Program arguments</code>填入<code>-version</code></li>\n<li>在<code>Environment tab</code>页里<code>Environment variables to set</code>填入<code>JAVA_HOME | /usr/java/jdk1.7.0.67</code></li>\n<li>在<code>Common tab</code>页里勾选<code>Debug</code><br><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-4.jpg\" alt=\"debug-openjdk7\"></li>\n</ul>\n<h1 id=\"进入调试模式\"><a href=\"#进入调试模式\" class=\"headerlink\" title=\"进入调试模式\"></a>进入调试模式</h1><p>配置完毕后，点击Debug即可进入调试模式，Hotspot内部一览无余，<br><img src=\"/images/post/2014/11/19/debug-jvm-on-linux-5.jpg\" alt=\"debug-openjdk7\"></p>"},{"title":"【Hotspot源码分析】从HotSpot源码角度深入分析Java程序启动过程-创建","date":"2014-11-30T19:43:40.000Z","_content":"\n博主在11年到12年的时候曾连续研究过十个月的JVM，读过的相关书籍包括：\n\n- [深入Java虚拟机](https://book.douban.com/subject/1138768/)\n这本书可以说是介绍JVM内部原理的鼻祖了，于2003年出版现已绝版，不过可以再某宝买到影印版。虽然当时JDK最高仅为1.4但JVM内部的构造已大体形成，所以博主强烈推荐此书。p.s 我肯定不会告诉你这书博主看了3遍：D\n\n- [深入理解Java虚拟机](https://book.douban.com/subject/6522893/)\n国内周某人写的，鉴于博主对于国人写的书向来不怎么感兴趣还是不提了。\n\n\n说起JVM它可以是以下三种：\n1. 一个正在运行的Java实例\n2. Java虚拟机规范\n3. 一种JVM虚拟机实现\n\n之前的研究基本上都是虚拟机规范和JVM参数调优层面的内容，但是总觉得有些意犹未尽所以决定深入研究一下Hotspot实现，由大部分C/C++和少量汇编代码构成，但清晰的结构和优雅的编码使其并不难读，不得不赞叹一句SUN的大师们的智慧。至于如何编译、调试OpenJDK&Hotspot博主在前面的文章已经介绍过，这里便不再赘述，所以直入主题。\n\n<!-- more -->\n让我们从Java程序主入口开始逐步分析，主入口文件位于 `hotspot/src/share/tools/launcher/java.c`\n\nmain方法内容如下：\n\n\n```c\n/*\n * Entry point.\n * JAVA程序主入口\n */\nint\nmain(int argc, char ** argv)\n{\n    char *jarfile = 0;\n    char *classname = 0;\n    char *s = 0;\n    char *main_class = NULL;\n    int ret;\n    InvocationFunctions ifn;\n    jlong start, end;\n    char jrepath[MAXPATHLEN], jvmpath[MAXPATHLEN];\n    char ** original_argv = argv;\n\n    if (getenv(\"_JAVA_LAUNCHER_DEBUG\") != 0) {\n        _launcher_debug = JNI_TRUE;\n        printf(\"----_JAVA_LAUNCHER_DEBUG----\\n\");\n    }\n\n#ifndef GAMMA\n    // 确保指定的版本正在运行\n    SelectVersion(argc, argv, &main_class);\n#endif /* ifndef GAMMA */\n\n    /* copy original argv */\n    {\n      int i;\n      original_argv = (char**)JLI_MemAlloc(sizeof(char*)*(argc+1));\n      for(i = 0; i < argc+1; i++)\n        original_argv[i] = argv[i];\n    }\n\n    // 创建运行环境，如检查系统使用的数据模型（32bit、64bit），获取使用的JRE路径，找到jvm.cfg解析已知的vm类型\n    // 设置新的LD_LIBRARY_PATH变量\n    CreateExecutionEnvironment(&argc, &argv,\n                               jrepath, sizeof(jrepath),\n                               jvmpath, sizeof(jvmpath),\n                               original_argv);\n\n    printf(\"Using java runtime at: %s\\n\", jrepath);\n\n    ifn.CreateJavaVM = 0;\n    ifn.GetDefaultJavaVMInitArgs = 0;\n\n    if (_launcher_debug)\n      start = CounterGet();\n    // 通过jvmpath找到libjvm.so 并将其JNI_CreateJavaVM和JNI_GetDefaultJavaVMInitArgs方法的\n    // 符号地址返回，挂载到InvocationFunctions的CreateJavaVM和GetDefaultJavaVMInitArgs以便初始化调用\n    if (!LoadJavaVM(jvmpath, &ifn)) {\n      exit(6);\n    }\n    if (_launcher_debug) {\n      end   = CounterGet();\n      printf(\"%ld micro seconds to LoadJavaVM\\n\",\n             (long)(jint)Counter2Micros(end-start));\n    }\n\n#ifdef JAVA_ARGS  /* javac, jar and friends. */\n    progname = \"java\";\n#else             /* java, oldjava, javaw and friends */\n#ifdef PROGNAME\n    progname = PROGNAME;\n#else\n    progname = *argv;\n    if ((s = strrchr(progname, FILE_SEPARATOR)) != 0) {\n        progname = s + 1;\n    }\n#endif /* PROGNAME */\n#endif /* JAVA_ARGS */\n    ++argv;\n    --argc;\n\n#ifdef JAVA_ARGS\n    // 转换命令行参数 如：javac -cp foo:foo/\"*\" -J-ms32m\n    /* Preprocess wrapper arguments */\n    TranslateApplicationArgs(&argc, &argv);\n    /**\n     * 添加了三个VM选项\n     * -Denv.class.patp 用户设置的CLASSPATH变量，如果CLASSPATH显式设置了tools.jar\n     *                  则可以反编译VM的工具类sun.tools.*\n     * -Dapplication.home 应用程序目录\n     * -Djava.class.path 应用程序的类文件目录\n     */\n    if (!AddApplicationOptions()) {\n        exit(1);\n    }\n#endif\n\n    /* Set default CLASSPATH */\n    if ((s = getenv(\"CLASSPATH\")) == 0) {\n        s = \".\";\n    }\n#ifndef JAVA_ARGS\n    SetClassPath(s);\n#endif\n\n    /*\n     *  解析命令行参数-cp、-version、-*path、-X*等参数\n     *  Parse command line options; if the return value of\n     *  ParseArguments is false, the program should exit.\n     */\n    if (!ParseArguments(&argc, &argv, &jarfile, &classname, &ret, jvmpath)) {\n      exit(ret);\n    }\n\n    /* Override class path if -jar flag was specified */\n    if (jarfile != 0) {\n        SetClassPath(jarfile);\n    }\n\n    /* set the -Dsun.java.command pseudo property */\n    SetJavaCommandLineProp(classname, jarfile, argc, argv);\n\n    /* Set the -Dsun.java.launcher pseudo property */\n    SetJavaLauncherProp();\n\n    /* set the -Dsun.java.launcher.* platform properties */\n    SetJavaLauncherPlatformProps();\n\n#ifndef GAMMA\n    /* Show the splash screen if needed */\n    ShowSplashScreen();\n#endif\n\n    /*\n     * 移除环境变量防止重复执行\n     * Done with all command line processing and potential re-execs so\n     * clean up the environment.\n     */\n    (void)UnsetEnv(ENV_ENTRY);\n#ifndef GAMMA\n    (void)UnsetEnv(SPLASH_FILE_ENV_ENTRY);\n    (void)UnsetEnv(SPLASH_JAR_ENV_ENTRY);\n\n    JLI_MemFree(splash_jar_entry);\n    JLI_MemFree(splash_file_entry);\n#endif\n\n    /*\n     * 指定线程大小\n     * If user doesn't specify stack size, check if VM has a preference.\n     * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will\n     * return its default stack size through the init args structure.\n     */\n    if (threadStackSize == 0) {\n      struct JDK1_1InitArgs args1_1;\n      memset((void*)&args1_1, 0, sizeof(args1_1));\n      args1_1.version = JNI_VERSION_1_1;\n      ifn.GetDefaultJavaVMInitArgs(&args1_1);  /* ignore return value */\n      if (args1_1.javaStackSize > 0) {\n         threadStackSize = args1_1.javaStackSize;\n      }\n    }\n\n    { /* Create a new thread to create JVM and invoke main method */\n      struct JavaMainArgs args;\n\n      args.argc = argc;\n      args.argv = argv;\n      args.jarfile = jarfile;\n      args.classname = classname;\n      args.ifn = ifn;\n      // block当前线程并且在新线程中继续执行\n      // 至于为什么在新线程中创建JVM见如下注释引用或原文https://bugs.openjdk.java.net/browse/JDK-6316197\n//      Primordial thread is created by the kernel before any program/library code\n//      has a chance to run. It's stack size and location can be very different\n//      from other threads created by the application. Creating JVM from primordial\n//      thread and later running Java code in the primordial thread introduced\n//      many problems:\n//\n//      1. On Windows primordial thread stack size is controlled by PE header in\n//         the executable. There is no way for user to change it dynamically, which\n//         means -Xss does not work for primordial thread.\n//\n//      2. On Solaris/Linux, primordial thread stack size is controlled by ulimit -s,\n//         which is usually very large (8M). To compensate for that we set guard\n//         page in the middle of stack to artificially reduce the stack size. However,\n//         this may interfere with native applications.\n//\n//      3. Setting guard page for primordial thread is dangerous. Unlike other\n//         threads, primordial thread stack can grow on demand. getrlimit()\n//         tells VM the ulimit value which is the upper limit but not necessarily\n//         the actual stack size. What could happen is that VM sets up the guard\n//         at the theoretical limit, but because the program doesn't really use\n//         that much stack, the unused space is reused for other purposes (e.g. malloc)\n//         by the OS (this reuse won't occur with other threads). We ended up having\n//         some C heap inserted between stack and its guard page.\n//\n//      4. On Linux VM bangs stack address below current SP to check for stack overflows.\n//         This will trigger SEGV's if it happens in primordial thread due to a security\n//         feature built into the kernel. Linux VM gets around the problem by manually\n//         expanding the stack. However when VM is expanding the stack, for a very short\n//         period the available stack space will be reduced to just 1 page. If a signal\n//         is delivered in that window, VM could end up without space to handle the signal.\n//\n//      5. Some Linux kernel randomizes the starting stack address for primordial thread\n//         both for stack coloring and exec-shield, but it won't tell the application.\n//         This makes it impossible to reliably detect stack location and size in primordial\n//         thread. VM needs the information to correctly handle stack overflows. We do\n//         have some cushion which is enough most of the time, but as shown in bug reports\n//         people do hit crashes because of this.\n//\n//      6. On Linux there is no thr_main() equivalent that can tell if current thread\n//         is primordial thread, makes it even harder to have special code to handle\n//         primordial thread.\n//\n//      I'm sure there are other issues that I didn't cover in the list. Basically\n//      primordial thread has been a constant source of runtime bugs.\n//\n//      This proposal calls for java launcher to stop calling JNI_CreateJavaVM from\n//      primordial thread. Instead, it can create a new thread and move all invocation\n//      code to the new thread. Primordial thread simply waits for the new thread\n//      to return and then it can terminate the process with the same exit value returned\n//      by the new thread. With this change we won't see any of the above problems\n//      as long as the application is started by a standard Sun launcher.\n//\n//      The above mentioned will still exist if VM is invoked from natvie application.\n//      Which means we have to keep all current VM workarounds for primordial thread,\n//      and probably need to add more. But reliability wise this is still significantly\n//      better as most people are using standard launcher. Also, unlike standard java\n//      launcher, customers have full control of native launcher. For example, if they\n//      wish to use larger stack on Windows, they could simply rebuild their launcher\n//      with larger stack size.\n      return ContinueInNewThread(JavaMain, threadStackSize, (void*)&args);\n    }\n}\n\nint JNICALL\nJavaMain(void * _args)\n{\n    struct JavaMainArgs *args = (struct JavaMainArgs *)_args;\n    int argc = args->argc;\n    char **argv = args->argv;\n    char *jarfile = args->jarfile;\n    char *classname = args->classname;\n    InvocationFunctions ifn = args->ifn;\n\n    JavaVM *vm = 0;\n    JNIEnv *env = 0;\n    jstring mainClassName;\n    jclass mainClass;\n    jmethodID mainID;\n    jobjectArray mainArgs;\n    int ret = 0;\n    jlong start, end;\n\n    /*\n     * Error message to print or display; by default the message will\n     * only be displayed in a window.\n     */\n    char * message = \"Fatal exception occurred.  Program will exit.\";\n    jboolean messageDest = JNI_FALSE;\n\n    /* Initialize the virtual machine */\n\n    if (_launcher_debug)\n        start = CounterGet();\n    // ================================\n    // 开始进行虚拟机初始化，此方法内部调用了JNI_CreateJavaVM，\n    // 这里做的事情非常之多，也是JVM启动的精华部分\n    // 由于这部分内容甚多，所以在下篇文章中介绍\n    // ================================\n    if (!InitializeJVM(&vm, &env, &ifn)) {\n        ReportErrorMessage(\"Could not create the Java virtual machine.\",\n                           JNI_TRUE);\n        exit(1);\n    }\n    // 如果输入了-version或-showversion参数\n    if (printVersion || showVersion) {\n        PrintJavaVersion(env);\n        if ((*env)->ExceptionOccurred(env)) {\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n        if (printVersion) {\n            ret = 0;\n            message = NULL;\n            goto leave;\n        }\n        if (showVersion) {\n            fprintf(stderr, \"\\n\");\n        }\n    }\n\n    // 如果jar文件和类名均未指定则输出默认usage信息\n    /* If the user specified neither a class name nor a JAR file */\n    if (jarfile == 0 && classname == 0) {\n        PrintUsage();\n        message = NULL;\n        goto leave;\n    }\n\n#ifndef GAMMA\n    FreeKnownVMs();  /* after last possible PrintUsage() */\n#endif\n\n    if (_launcher_debug) {\n        end   = CounterGet();\n        printf(\"%ld micro seconds to InitializeJVM\\n\",\n               (long)(jint)Counter2Micros(end-start));\n    }\n\n    /* At this stage, argc/argv have the applications' arguments */\n    if (_launcher_debug) {\n        int i = 0;\n        printf(\"Main-Class is '%s'\\n\", classname ? classname : \"\");\n        printf(\"Apps' argc is %d\\n\", argc);\n        for (; i < argc; i++) {\n            printf(\"    argv[%2d] = '%s'\\n\", i, argv[i]);\n        }\n    }\n\n    ret = 1;\n\n    /*\n     * 获取应用程序的主类文件\n     */\n    // 解析jar包并加载主类文件\n    if (jarfile != 0) {\n        // 如果传入的是jar文件名称则通过调用java.util.jar.JarFile加载jar包并获取主类\n        mainClassName = GetMainClassName(env, jarfile);\n        if ((*env)->ExceptionOccurred(env)) {\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n        if (mainClassName == NULL) {\n          const char * format = \"Failed to load Main-Class manifest \"\n                                \"attribute from\\n%s\";\n          message = (char*)JLI_MemAlloc((strlen(format) + strlen(jarfile)) *\n                                    sizeof(char));\n          sprintf(message, format, jarfile);\n          messageDest = JNI_TRUE;\n          goto leave;\n        }\n        classname = (char *)(*env)->GetStringUTFChars(env, mainClassName, 0);\n        if (classname == NULL) {\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n        // 加载mainClass\n        mainClass = LoadClass(env, classname);\n        if(mainClass == NULL) { /* exception occured */\n            const char * format = \"Could not find the main class: %s. Program will exit.\";\n            ReportExceptionDescription(env);\n            message = (char *)JLI_MemAlloc((strlen(format) +\n                                            strlen(classname)) * sizeof(char) );\n            messageDest = JNI_TRUE;\n            sprintf(message, format, classname);\n            goto leave;\n        }\n        (*env)->ReleaseStringUTFChars(env, mainClassName, classname);\n    } else {\n      // 加载主类文件\n      mainClassName = NewPlatformString(env, classname);\n      if (mainClassName == NULL) {\n        const char * format = \"Failed to load Main Class: %s\";\n        message = (char *)JLI_MemAlloc((strlen(format) + strlen(classname)) *\n                                   sizeof(char) );\n        sprintf(message, format, classname);\n        messageDest = JNI_TRUE;\n        goto leave;\n      }\n      classname = (char *)(*env)->GetStringUTFChars(env, mainClassName, 0);\n      if (classname == NULL) {\n        ReportExceptionDescription(env);\n        goto leave;\n      }\n      mainClass = LoadClass(env, classname);\n      if(mainClass == NULL) { /* exception occured */\n        const char * format = \"Could not find the main class: %s.  Program will exit.\";\n        ReportExceptionDescription(env);\n        message = (char *)JLI_MemAlloc((strlen(format) +\n                                        strlen(classname)) * sizeof(char) );\n        messageDest = JNI_TRUE;\n        sprintf(message, format, classname);\n        goto leave;\n      }\n      (*env)->ReleaseStringUTFChars(env, mainClassName, classname);\n    }\n\n    // 获得主方法的ID\n    mainID = (*env)->GetStaticMethodID(env, mainClass, \"main\",\n                                       \"([Ljava/lang/String;)V\");\n    if (mainID == NULL) {\n        if ((*env)->ExceptionOccurred(env)) {\n            ReportExceptionDescription(env);\n        } else {\n          message = \"No main method found in specified class.\";\n          messageDest = JNI_TRUE;\n        }\n        goto leave;\n    }\n\n    {    /* Make sure the main method is public */\n        jint mods;\n        jmethodID mid;\n        // 通过反射获得main方法修饰符\n        jobject obj = (*env)->ToReflectedMethod(env, mainClass,\n                                                mainID, JNI_TRUE);\n\n        if( obj == NULL) { /* exception occurred */\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n\n        mid =\n          (*env)->GetMethodID(env,\n                              (*env)->GetObjectClass(env, obj),\n                              \"getModifiers\", \"()I\");\n        if ((*env)->ExceptionOccurred(env)) {\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n        // 确保是public类型\n        mods = (*env)->CallIntMethod(env, obj, mid);\n        if ((mods & 1) == 0) { /* if (!Modifier.isPublic(mods)) ... */\n            message = \"Main method not public.\";\n            messageDest = JNI_TRUE;\n            goto leave;\n        }\n    }\n\n    // 构建参数数组\n    mainArgs = NewPlatformStringArray(env, argv, argc);\n    if (mainArgs == NULL) {\n        ReportExceptionDescription(env);\n        goto leave;\n    }\n\n    // 调用main方法\n    /* Invoke main method. */\n    (*env)->CallStaticVoidMethod(env, mainClass, mainID, mainArgs);\n\n    /*\n     * The launcher's exit code (in the absence of calls to\n     * System.exit) will be non-zero if main threw an exception.\n     */\n    ret = (*env)->ExceptionOccurred(env) == NULL ? 0 : 1;\n\n    /*\n     * Detach the main thread so that it appears to have ended when\n     * the application's main method exits.  This will invoke the\n     * uncaught exception handler machinery if main threw an\n     * exception.  An uncaught exception handler cannot change the\n     * launcher's return code except by calling System.exit.\n     */\n    if ((*vm)->DetachCurrentThread(vm) != 0) {\n        message = \"Could not detach main thread.\";\n        messageDest = JNI_TRUE;\n        ret = 1;\n        goto leave;\n    }\n\n    message = NULL;\n\n leave:\n    /*\n     * Wait for all non-daemon threads to end, then destroy the VM.\n     * This will actually create a trivial new Java waiter thread\n     * named \"DestroyJavaVM\", but this will be seen as a different\n     * thread from the one that executed main, even though they are\n     * the same C thread.  This allows mainThread.join() and\n     * mainThread.isAlive() to work as expected.\n     */\n    (*vm)->DestroyJavaVM(vm);\n\n    if(message != NULL && !noExitErrorMessage)\n      ReportErrorMessage(message, messageDest);\n    return ret;\n}\n```\n\n\n\n下篇文章将介绍JVM初始化部分。","source":"_posts/2014/12/01/analyse-jvm-startup-flow-through-source-code-create.md","raw":"---\ntitle: 【Hotspot源码分析】从HotSpot源码角度深入分析Java程序启动过程-创建\ndate: 2014-12-01 03:43:40\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n---\n\n博主在11年到12年的时候曾连续研究过十个月的JVM，读过的相关书籍包括：\n\n- [深入Java虚拟机](https://book.douban.com/subject/1138768/)\n这本书可以说是介绍JVM内部原理的鼻祖了，于2003年出版现已绝版，不过可以再某宝买到影印版。虽然当时JDK最高仅为1.4但JVM内部的构造已大体形成，所以博主强烈推荐此书。p.s 我肯定不会告诉你这书博主看了3遍：D\n\n- [深入理解Java虚拟机](https://book.douban.com/subject/6522893/)\n国内周某人写的，鉴于博主对于国人写的书向来不怎么感兴趣还是不提了。\n\n\n说起JVM它可以是以下三种：\n1. 一个正在运行的Java实例\n2. Java虚拟机规范\n3. 一种JVM虚拟机实现\n\n之前的研究基本上都是虚拟机规范和JVM参数调优层面的内容，但是总觉得有些意犹未尽所以决定深入研究一下Hotspot实现，由大部分C/C++和少量汇编代码构成，但清晰的结构和优雅的编码使其并不难读，不得不赞叹一句SUN的大师们的智慧。至于如何编译、调试OpenJDK&Hotspot博主在前面的文章已经介绍过，这里便不再赘述，所以直入主题。\n\n<!-- more -->\n让我们从Java程序主入口开始逐步分析，主入口文件位于 `hotspot/src/share/tools/launcher/java.c`\n\nmain方法内容如下：\n\n\n```c\n/*\n * Entry point.\n * JAVA程序主入口\n */\nint\nmain(int argc, char ** argv)\n{\n    char *jarfile = 0;\n    char *classname = 0;\n    char *s = 0;\n    char *main_class = NULL;\n    int ret;\n    InvocationFunctions ifn;\n    jlong start, end;\n    char jrepath[MAXPATHLEN], jvmpath[MAXPATHLEN];\n    char ** original_argv = argv;\n\n    if (getenv(\"_JAVA_LAUNCHER_DEBUG\") != 0) {\n        _launcher_debug = JNI_TRUE;\n        printf(\"----_JAVA_LAUNCHER_DEBUG----\\n\");\n    }\n\n#ifndef GAMMA\n    // 确保指定的版本正在运行\n    SelectVersion(argc, argv, &main_class);\n#endif /* ifndef GAMMA */\n\n    /* copy original argv */\n    {\n      int i;\n      original_argv = (char**)JLI_MemAlloc(sizeof(char*)*(argc+1));\n      for(i = 0; i < argc+1; i++)\n        original_argv[i] = argv[i];\n    }\n\n    // 创建运行环境，如检查系统使用的数据模型（32bit、64bit），获取使用的JRE路径，找到jvm.cfg解析已知的vm类型\n    // 设置新的LD_LIBRARY_PATH变量\n    CreateExecutionEnvironment(&argc, &argv,\n                               jrepath, sizeof(jrepath),\n                               jvmpath, sizeof(jvmpath),\n                               original_argv);\n\n    printf(\"Using java runtime at: %s\\n\", jrepath);\n\n    ifn.CreateJavaVM = 0;\n    ifn.GetDefaultJavaVMInitArgs = 0;\n\n    if (_launcher_debug)\n      start = CounterGet();\n    // 通过jvmpath找到libjvm.so 并将其JNI_CreateJavaVM和JNI_GetDefaultJavaVMInitArgs方法的\n    // 符号地址返回，挂载到InvocationFunctions的CreateJavaVM和GetDefaultJavaVMInitArgs以便初始化调用\n    if (!LoadJavaVM(jvmpath, &ifn)) {\n      exit(6);\n    }\n    if (_launcher_debug) {\n      end   = CounterGet();\n      printf(\"%ld micro seconds to LoadJavaVM\\n\",\n             (long)(jint)Counter2Micros(end-start));\n    }\n\n#ifdef JAVA_ARGS  /* javac, jar and friends. */\n    progname = \"java\";\n#else             /* java, oldjava, javaw and friends */\n#ifdef PROGNAME\n    progname = PROGNAME;\n#else\n    progname = *argv;\n    if ((s = strrchr(progname, FILE_SEPARATOR)) != 0) {\n        progname = s + 1;\n    }\n#endif /* PROGNAME */\n#endif /* JAVA_ARGS */\n    ++argv;\n    --argc;\n\n#ifdef JAVA_ARGS\n    // 转换命令行参数 如：javac -cp foo:foo/\"*\" -J-ms32m\n    /* Preprocess wrapper arguments */\n    TranslateApplicationArgs(&argc, &argv);\n    /**\n     * 添加了三个VM选项\n     * -Denv.class.patp 用户设置的CLASSPATH变量，如果CLASSPATH显式设置了tools.jar\n     *                  则可以反编译VM的工具类sun.tools.*\n     * -Dapplication.home 应用程序目录\n     * -Djava.class.path 应用程序的类文件目录\n     */\n    if (!AddApplicationOptions()) {\n        exit(1);\n    }\n#endif\n\n    /* Set default CLASSPATH */\n    if ((s = getenv(\"CLASSPATH\")) == 0) {\n        s = \".\";\n    }\n#ifndef JAVA_ARGS\n    SetClassPath(s);\n#endif\n\n    /*\n     *  解析命令行参数-cp、-version、-*path、-X*等参数\n     *  Parse command line options; if the return value of\n     *  ParseArguments is false, the program should exit.\n     */\n    if (!ParseArguments(&argc, &argv, &jarfile, &classname, &ret, jvmpath)) {\n      exit(ret);\n    }\n\n    /* Override class path if -jar flag was specified */\n    if (jarfile != 0) {\n        SetClassPath(jarfile);\n    }\n\n    /* set the -Dsun.java.command pseudo property */\n    SetJavaCommandLineProp(classname, jarfile, argc, argv);\n\n    /* Set the -Dsun.java.launcher pseudo property */\n    SetJavaLauncherProp();\n\n    /* set the -Dsun.java.launcher.* platform properties */\n    SetJavaLauncherPlatformProps();\n\n#ifndef GAMMA\n    /* Show the splash screen if needed */\n    ShowSplashScreen();\n#endif\n\n    /*\n     * 移除环境变量防止重复执行\n     * Done with all command line processing and potential re-execs so\n     * clean up the environment.\n     */\n    (void)UnsetEnv(ENV_ENTRY);\n#ifndef GAMMA\n    (void)UnsetEnv(SPLASH_FILE_ENV_ENTRY);\n    (void)UnsetEnv(SPLASH_JAR_ENV_ENTRY);\n\n    JLI_MemFree(splash_jar_entry);\n    JLI_MemFree(splash_file_entry);\n#endif\n\n    /*\n     * 指定线程大小\n     * If user doesn't specify stack size, check if VM has a preference.\n     * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will\n     * return its default stack size through the init args structure.\n     */\n    if (threadStackSize == 0) {\n      struct JDK1_1InitArgs args1_1;\n      memset((void*)&args1_1, 0, sizeof(args1_1));\n      args1_1.version = JNI_VERSION_1_1;\n      ifn.GetDefaultJavaVMInitArgs(&args1_1);  /* ignore return value */\n      if (args1_1.javaStackSize > 0) {\n         threadStackSize = args1_1.javaStackSize;\n      }\n    }\n\n    { /* Create a new thread to create JVM and invoke main method */\n      struct JavaMainArgs args;\n\n      args.argc = argc;\n      args.argv = argv;\n      args.jarfile = jarfile;\n      args.classname = classname;\n      args.ifn = ifn;\n      // block当前线程并且在新线程中继续执行\n      // 至于为什么在新线程中创建JVM见如下注释引用或原文https://bugs.openjdk.java.net/browse/JDK-6316197\n//      Primordial thread is created by the kernel before any program/library code\n//      has a chance to run. It's stack size and location can be very different\n//      from other threads created by the application. Creating JVM from primordial\n//      thread and later running Java code in the primordial thread introduced\n//      many problems:\n//\n//      1. On Windows primordial thread stack size is controlled by PE header in\n//         the executable. There is no way for user to change it dynamically, which\n//         means -Xss does not work for primordial thread.\n//\n//      2. On Solaris/Linux, primordial thread stack size is controlled by ulimit -s,\n//         which is usually very large (8M). To compensate for that we set guard\n//         page in the middle of stack to artificially reduce the stack size. However,\n//         this may interfere with native applications.\n//\n//      3. Setting guard page for primordial thread is dangerous. Unlike other\n//         threads, primordial thread stack can grow on demand. getrlimit()\n//         tells VM the ulimit value which is the upper limit but not necessarily\n//         the actual stack size. What could happen is that VM sets up the guard\n//         at the theoretical limit, but because the program doesn't really use\n//         that much stack, the unused space is reused for other purposes (e.g. malloc)\n//         by the OS (this reuse won't occur with other threads). We ended up having\n//         some C heap inserted between stack and its guard page.\n//\n//      4. On Linux VM bangs stack address below current SP to check for stack overflows.\n//         This will trigger SEGV's if it happens in primordial thread due to a security\n//         feature built into the kernel. Linux VM gets around the problem by manually\n//         expanding the stack. However when VM is expanding the stack, for a very short\n//         period the available stack space will be reduced to just 1 page. If a signal\n//         is delivered in that window, VM could end up without space to handle the signal.\n//\n//      5. Some Linux kernel randomizes the starting stack address for primordial thread\n//         both for stack coloring and exec-shield, but it won't tell the application.\n//         This makes it impossible to reliably detect stack location and size in primordial\n//         thread. VM needs the information to correctly handle stack overflows. We do\n//         have some cushion which is enough most of the time, but as shown in bug reports\n//         people do hit crashes because of this.\n//\n//      6. On Linux there is no thr_main() equivalent that can tell if current thread\n//         is primordial thread, makes it even harder to have special code to handle\n//         primordial thread.\n//\n//      I'm sure there are other issues that I didn't cover in the list. Basically\n//      primordial thread has been a constant source of runtime bugs.\n//\n//      This proposal calls for java launcher to stop calling JNI_CreateJavaVM from\n//      primordial thread. Instead, it can create a new thread and move all invocation\n//      code to the new thread. Primordial thread simply waits for the new thread\n//      to return and then it can terminate the process with the same exit value returned\n//      by the new thread. With this change we won't see any of the above problems\n//      as long as the application is started by a standard Sun launcher.\n//\n//      The above mentioned will still exist if VM is invoked from natvie application.\n//      Which means we have to keep all current VM workarounds for primordial thread,\n//      and probably need to add more. But reliability wise this is still significantly\n//      better as most people are using standard launcher. Also, unlike standard java\n//      launcher, customers have full control of native launcher. For example, if they\n//      wish to use larger stack on Windows, they could simply rebuild their launcher\n//      with larger stack size.\n      return ContinueInNewThread(JavaMain, threadStackSize, (void*)&args);\n    }\n}\n\nint JNICALL\nJavaMain(void * _args)\n{\n    struct JavaMainArgs *args = (struct JavaMainArgs *)_args;\n    int argc = args->argc;\n    char **argv = args->argv;\n    char *jarfile = args->jarfile;\n    char *classname = args->classname;\n    InvocationFunctions ifn = args->ifn;\n\n    JavaVM *vm = 0;\n    JNIEnv *env = 0;\n    jstring mainClassName;\n    jclass mainClass;\n    jmethodID mainID;\n    jobjectArray mainArgs;\n    int ret = 0;\n    jlong start, end;\n\n    /*\n     * Error message to print or display; by default the message will\n     * only be displayed in a window.\n     */\n    char * message = \"Fatal exception occurred.  Program will exit.\";\n    jboolean messageDest = JNI_FALSE;\n\n    /* Initialize the virtual machine */\n\n    if (_launcher_debug)\n        start = CounterGet();\n    // ================================\n    // 开始进行虚拟机初始化，此方法内部调用了JNI_CreateJavaVM，\n    // 这里做的事情非常之多，也是JVM启动的精华部分\n    // 由于这部分内容甚多，所以在下篇文章中介绍\n    // ================================\n    if (!InitializeJVM(&vm, &env, &ifn)) {\n        ReportErrorMessage(\"Could not create the Java virtual machine.\",\n                           JNI_TRUE);\n        exit(1);\n    }\n    // 如果输入了-version或-showversion参数\n    if (printVersion || showVersion) {\n        PrintJavaVersion(env);\n        if ((*env)->ExceptionOccurred(env)) {\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n        if (printVersion) {\n            ret = 0;\n            message = NULL;\n            goto leave;\n        }\n        if (showVersion) {\n            fprintf(stderr, \"\\n\");\n        }\n    }\n\n    // 如果jar文件和类名均未指定则输出默认usage信息\n    /* If the user specified neither a class name nor a JAR file */\n    if (jarfile == 0 && classname == 0) {\n        PrintUsage();\n        message = NULL;\n        goto leave;\n    }\n\n#ifndef GAMMA\n    FreeKnownVMs();  /* after last possible PrintUsage() */\n#endif\n\n    if (_launcher_debug) {\n        end   = CounterGet();\n        printf(\"%ld micro seconds to InitializeJVM\\n\",\n               (long)(jint)Counter2Micros(end-start));\n    }\n\n    /* At this stage, argc/argv have the applications' arguments */\n    if (_launcher_debug) {\n        int i = 0;\n        printf(\"Main-Class is '%s'\\n\", classname ? classname : \"\");\n        printf(\"Apps' argc is %d\\n\", argc);\n        for (; i < argc; i++) {\n            printf(\"    argv[%2d] = '%s'\\n\", i, argv[i]);\n        }\n    }\n\n    ret = 1;\n\n    /*\n     * 获取应用程序的主类文件\n     */\n    // 解析jar包并加载主类文件\n    if (jarfile != 0) {\n        // 如果传入的是jar文件名称则通过调用java.util.jar.JarFile加载jar包并获取主类\n        mainClassName = GetMainClassName(env, jarfile);\n        if ((*env)->ExceptionOccurred(env)) {\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n        if (mainClassName == NULL) {\n          const char * format = \"Failed to load Main-Class manifest \"\n                                \"attribute from\\n%s\";\n          message = (char*)JLI_MemAlloc((strlen(format) + strlen(jarfile)) *\n                                    sizeof(char));\n          sprintf(message, format, jarfile);\n          messageDest = JNI_TRUE;\n          goto leave;\n        }\n        classname = (char *)(*env)->GetStringUTFChars(env, mainClassName, 0);\n        if (classname == NULL) {\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n        // 加载mainClass\n        mainClass = LoadClass(env, classname);\n        if(mainClass == NULL) { /* exception occured */\n            const char * format = \"Could not find the main class: %s. Program will exit.\";\n            ReportExceptionDescription(env);\n            message = (char *)JLI_MemAlloc((strlen(format) +\n                                            strlen(classname)) * sizeof(char) );\n            messageDest = JNI_TRUE;\n            sprintf(message, format, classname);\n            goto leave;\n        }\n        (*env)->ReleaseStringUTFChars(env, mainClassName, classname);\n    } else {\n      // 加载主类文件\n      mainClassName = NewPlatformString(env, classname);\n      if (mainClassName == NULL) {\n        const char * format = \"Failed to load Main Class: %s\";\n        message = (char *)JLI_MemAlloc((strlen(format) + strlen(classname)) *\n                                   sizeof(char) );\n        sprintf(message, format, classname);\n        messageDest = JNI_TRUE;\n        goto leave;\n      }\n      classname = (char *)(*env)->GetStringUTFChars(env, mainClassName, 0);\n      if (classname == NULL) {\n        ReportExceptionDescription(env);\n        goto leave;\n      }\n      mainClass = LoadClass(env, classname);\n      if(mainClass == NULL) { /* exception occured */\n        const char * format = \"Could not find the main class: %s.  Program will exit.\";\n        ReportExceptionDescription(env);\n        message = (char *)JLI_MemAlloc((strlen(format) +\n                                        strlen(classname)) * sizeof(char) );\n        messageDest = JNI_TRUE;\n        sprintf(message, format, classname);\n        goto leave;\n      }\n      (*env)->ReleaseStringUTFChars(env, mainClassName, classname);\n    }\n\n    // 获得主方法的ID\n    mainID = (*env)->GetStaticMethodID(env, mainClass, \"main\",\n                                       \"([Ljava/lang/String;)V\");\n    if (mainID == NULL) {\n        if ((*env)->ExceptionOccurred(env)) {\n            ReportExceptionDescription(env);\n        } else {\n          message = \"No main method found in specified class.\";\n          messageDest = JNI_TRUE;\n        }\n        goto leave;\n    }\n\n    {    /* Make sure the main method is public */\n        jint mods;\n        jmethodID mid;\n        // 通过反射获得main方法修饰符\n        jobject obj = (*env)->ToReflectedMethod(env, mainClass,\n                                                mainID, JNI_TRUE);\n\n        if( obj == NULL) { /* exception occurred */\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n\n        mid =\n          (*env)->GetMethodID(env,\n                              (*env)->GetObjectClass(env, obj),\n                              \"getModifiers\", \"()I\");\n        if ((*env)->ExceptionOccurred(env)) {\n            ReportExceptionDescription(env);\n            goto leave;\n        }\n        // 确保是public类型\n        mods = (*env)->CallIntMethod(env, obj, mid);\n        if ((mods & 1) == 0) { /* if (!Modifier.isPublic(mods)) ... */\n            message = \"Main method not public.\";\n            messageDest = JNI_TRUE;\n            goto leave;\n        }\n    }\n\n    // 构建参数数组\n    mainArgs = NewPlatformStringArray(env, argv, argc);\n    if (mainArgs == NULL) {\n        ReportExceptionDescription(env);\n        goto leave;\n    }\n\n    // 调用main方法\n    /* Invoke main method. */\n    (*env)->CallStaticVoidMethod(env, mainClass, mainID, mainArgs);\n\n    /*\n     * The launcher's exit code (in the absence of calls to\n     * System.exit) will be non-zero if main threw an exception.\n     */\n    ret = (*env)->ExceptionOccurred(env) == NULL ? 0 : 1;\n\n    /*\n     * Detach the main thread so that it appears to have ended when\n     * the application's main method exits.  This will invoke the\n     * uncaught exception handler machinery if main threw an\n     * exception.  An uncaught exception handler cannot change the\n     * launcher's return code except by calling System.exit.\n     */\n    if ((*vm)->DetachCurrentThread(vm) != 0) {\n        message = \"Could not detach main thread.\";\n        messageDest = JNI_TRUE;\n        ret = 1;\n        goto leave;\n    }\n\n    message = NULL;\n\n leave:\n    /*\n     * Wait for all non-daemon threads to end, then destroy the VM.\n     * This will actually create a trivial new Java waiter thread\n     * named \"DestroyJavaVM\", but this will be seen as a different\n     * thread from the one that executed main, even though they are\n     * the same C thread.  This allows mainThread.join() and\n     * mainThread.isAlive() to work as expected.\n     */\n    (*vm)->DestroyJavaVM(vm);\n\n    if(message != NULL && !noExitErrorMessage)\n      ReportErrorMessage(message, messageDest);\n    return ret;\n}\n```\n\n\n\n下篇文章将介绍JVM初始化部分。","slug":"analyse-jvm-startup-flow-through-source-code-create","published":1,"updated":"2018-04-29T20:31:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1t000e2zs60a0ib9bd","content":"<p>博主在11年到12年的时候曾连续研究过十个月的JVM，读过的相关书籍包括：</p>\n<ul>\n<li><p><a href=\"https://book.douban.com/subject/1138768/\" target=\"_blank\" rel=\"noopener\">深入Java虚拟机</a><br>这本书可以说是介绍JVM内部原理的鼻祖了，于2003年出版现已绝版，不过可以再某宝买到影印版。虽然当时JDK最高仅为1.4但JVM内部的构造已大体形成，所以博主强烈推荐此书。p.s 我肯定不会告诉你这书博主看了3遍：D</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/6522893/\" target=\"_blank\" rel=\"noopener\">深入理解Java虚拟机</a><br>国内周某人写的，鉴于博主对于国人写的书向来不怎么感兴趣还是不提了。</p>\n</li>\n</ul>\n<p>说起JVM它可以是以下三种：</p>\n<ol>\n<li>一个正在运行的Java实例</li>\n<li>Java虚拟机规范</li>\n<li>一种JVM虚拟机实现</li>\n</ol>\n<p>之前的研究基本上都是虚拟机规范和JVM参数调优层面的内容，但是总觉得有些意犹未尽所以决定深入研究一下Hotspot实现，由大部分C/C++和少量汇编代码构成，但清晰的结构和优雅的编码使其并不难读，不得不赞叹一句SUN的大师们的智慧。至于如何编译、调试OpenJDK&amp;Hotspot博主在前面的文章已经介绍过，这里便不再赘述，所以直入主题。</p>\n<a id=\"more\"></a>\n<p>让我们从Java程序主入口开始逐步分析，主入口文件位于 <code>hotspot/src/share/tools/launcher/java.c</code></p>\n<p>main方法内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Entry point.</span></span><br><span class=\"line\"><span class=\"comment\"> * JAVA程序主入口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> ** argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *jarfile = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *classname = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *main_class = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">    InvocationFunctions ifn;</span><br><span class=\"line\">    jlong start, end;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> jrepath[MAXPATHLEN], jvmpath[MAXPATHLEN];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ** original_argv = argv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getenv(<span class=\"string\">\"_JAVA_LAUNCHER_DEBUG\"</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        _launcher_debug = JNI_TRUE;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"----_JAVA_LAUNCHER_DEBUG----\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> GAMMA</span></span><br><span class=\"line\">    <span class=\"comment\">// 确保指定的版本正在运行</span></span><br><span class=\"line\">    SelectVersion(argc, argv, &amp;main_class);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* ifndef GAMMA */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* copy original argv */</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">      original_argv = (<span class=\"keyword\">char</span>**)JLI_MemAlloc(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>*)*(argc+<span class=\"number\">1</span>));</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; argc+<span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        original_argv[i] = argv[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建运行环境，如检查系统使用的数据模型（32bit、64bit），获取使用的JRE路径，找到jvm.cfg解析已知的vm类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置新的LD_LIBRARY_PATH变量</span></span><br><span class=\"line\">    CreateExecutionEnvironment(&amp;argc, &amp;argv,</span><br><span class=\"line\">                               jrepath, <span class=\"keyword\">sizeof</span>(jrepath),</span><br><span class=\"line\">                               jvmpath, <span class=\"keyword\">sizeof</span>(jvmpath),</span><br><span class=\"line\">                               original_argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Using java runtime at: %s\\n\"</span>, jrepath);</span><br><span class=\"line\"></span><br><span class=\"line\">    ifn.CreateJavaVM = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ifn.GetDefaultJavaVMInitArgs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug)</span><br><span class=\"line\">      start = CounterGet();</span><br><span class=\"line\">    <span class=\"comment\">// 通过jvmpath找到libjvm.so 并将其JNI_CreateJavaVM和JNI_GetDefaultJavaVMInitArgs方法的</span></span><br><span class=\"line\">    <span class=\"comment\">// 符号地址返回，挂载到InvocationFunctions的CreateJavaVM和GetDefaultJavaVMInitArgs以便初始化调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!LoadJavaVM(jvmpath, &amp;ifn)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug) &#123;</span><br><span class=\"line\">      end   = CounterGet();</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld micro seconds to LoadJavaVM\\n\"</span>,</span><br><span class=\"line\">             (<span class=\"keyword\">long</span>)(jint)Counter2Micros(end-start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> JAVA_ARGS  <span class=\"comment\">/* javac, jar and friends. */</span></span></span><br><span class=\"line\">    progname = <span class=\"string\">\"java\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>             <span class=\"comment\">/* java, oldjava, javaw and friends */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PROGNAME</span></span><br><span class=\"line\">    progname = PROGNAME;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    progname = *argv;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = <span class=\"built_in\">strrchr</span>(progname, FILE_SEPARATOR)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        progname = s + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* PROGNAME */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* JAVA_ARGS */</span></span></span><br><span class=\"line\">    ++argv;</span><br><span class=\"line\">    --argc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> JAVA_ARGS</span></span><br><span class=\"line\">    <span class=\"comment\">// 转换命令行参数 如：javac -cp foo:foo/\"*\" -J-ms32m</span></span><br><span class=\"line\">    <span class=\"comment\">/* Preprocess wrapper arguments */</span></span><br><span class=\"line\">    TranslateApplicationArgs(&amp;argc, &amp;argv);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加了三个VM选项</span></span><br><span class=\"line\"><span class=\"comment\">     * -Denv.class.patp 用户设置的CLASSPATH变量，如果CLASSPATH显式设置了tools.jar</span></span><br><span class=\"line\"><span class=\"comment\">     *                  则可以反编译VM的工具类sun.tools.*</span></span><br><span class=\"line\"><span class=\"comment\">     * -Dapplication.home 应用程序目录</span></span><br><span class=\"line\"><span class=\"comment\">     * -Djava.class.path 应用程序的类文件目录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!AddApplicationOptions()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Set default CLASSPATH */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = getenv(<span class=\"string\">\"CLASSPATH\"</span>)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> JAVA_ARGS</span></span><br><span class=\"line\">    SetClassPath(s);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  解析命令行参数-cp、-version、-*path、-X*等参数</span></span><br><span class=\"line\"><span class=\"comment\">     *  Parse command line options; if the return value of</span></span><br><span class=\"line\"><span class=\"comment\">     *  ParseArguments is false, the program should exit.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ParseArguments(&amp;argc, &amp;argv, &amp;jarfile, &amp;classname, &amp;ret, jvmpath)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Override class path if -jar flag was specified */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jarfile != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        SetClassPath(jarfile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* set the -Dsun.java.command pseudo property */</span></span><br><span class=\"line\">    SetJavaCommandLineProp(classname, jarfile, argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Set the -Dsun.java.launcher pseudo property */</span></span><br><span class=\"line\">    SetJavaLauncherProp();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* set the -Dsun.java.launcher.* platform properties */</span></span><br><span class=\"line\">    SetJavaLauncherPlatformProps();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> GAMMA</span></span><br><span class=\"line\">    <span class=\"comment\">/* Show the splash screen if needed */</span></span><br><span class=\"line\">    ShowSplashScreen();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除环境变量防止重复执行</span></span><br><span class=\"line\"><span class=\"comment\">     * Done with all command line processing and potential re-execs so</span></span><br><span class=\"line\"><span class=\"comment\">     * clean up the environment.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    (<span class=\"keyword\">void</span>)UnsetEnv(ENV_ENTRY);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> GAMMA</span></span><br><span class=\"line\">    (<span class=\"keyword\">void</span>)UnsetEnv(SPLASH_FILE_ENV_ENTRY);</span><br><span class=\"line\">    (<span class=\"keyword\">void</span>)UnsetEnv(SPLASH_JAR_ENV_ENTRY);</span><br><span class=\"line\"></span><br><span class=\"line\">    JLI_MemFree(splash_jar_entry);</span><br><span class=\"line\">    JLI_MemFree(splash_file_entry);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定线程大小</span></span><br><span class=\"line\"><span class=\"comment\">     * If user doesn't specify stack size, check if VM has a preference.</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will</span></span><br><span class=\"line\"><span class=\"comment\">     * return its default stack size through the init args structure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (threadStackSize == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">JDK1_1InitArgs</span> <span class=\"title\">args1_1</span>;</span></span><br><span class=\"line\">      <span class=\"built_in\">memset</span>((<span class=\"keyword\">void</span>*)&amp;args1_1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(args1_1));</span><br><span class=\"line\">      args1_1.version = JNI_VERSION_1_1;</span><br><span class=\"line\">      ifn.GetDefaultJavaVMInitArgs(&amp;args1_1);  <span class=\"comment\">/* ignore return value */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args1_1.javaStackSize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         threadStackSize = args1_1.javaStackSize;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"comment\">/* Create a new thread to create JVM and invoke main method */</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">JavaMainArgs</span> <span class=\"title\">args</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      args.argc = argc;</span><br><span class=\"line\">      args.argv = argv;</span><br><span class=\"line\">      args.jarfile = jarfile;</span><br><span class=\"line\">      args.classname = classname;</span><br><span class=\"line\">      args.ifn = ifn;</span><br><span class=\"line\">      <span class=\"comment\">// block当前线程并且在新线程中继续执行</span></span><br><span class=\"line\">      <span class=\"comment\">// 至于为什么在新线程中创建JVM见如下注释引用或原文https://bugs.openjdk.java.net/browse/JDK-6316197</span></span><br><span class=\"line\"><span class=\"comment\">//      Primordial thread is created by the kernel before any program/library code</span></span><br><span class=\"line\"><span class=\"comment\">//      has a chance to run. It's stack size and location can be very different</span></span><br><span class=\"line\"><span class=\"comment\">//      from other threads created by the application. Creating JVM from primordial</span></span><br><span class=\"line\"><span class=\"comment\">//      thread and later running Java code in the primordial thread introduced</span></span><br><span class=\"line\"><span class=\"comment\">//      many problems:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      1. On Windows primordial thread stack size is controlled by PE header in</span></span><br><span class=\"line\"><span class=\"comment\">//         the executable. There is no way for user to change it dynamically, which</span></span><br><span class=\"line\"><span class=\"comment\">//         means -Xss does not work for primordial thread.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      2. On Solaris/Linux, primordial thread stack size is controlled by ulimit -s,</span></span><br><span class=\"line\"><span class=\"comment\">//         which is usually very large (8M). To compensate for that we set guard</span></span><br><span class=\"line\"><span class=\"comment\">//         page in the middle of stack to artificially reduce the stack size. However,</span></span><br><span class=\"line\"><span class=\"comment\">//         this may interfere with native applications.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      3. Setting guard page for primordial thread is dangerous. Unlike other</span></span><br><span class=\"line\"><span class=\"comment\">//         threads, primordial thread stack can grow on demand. getrlimit()</span></span><br><span class=\"line\"><span class=\"comment\">//         tells VM the ulimit value which is the upper limit but not necessarily</span></span><br><span class=\"line\"><span class=\"comment\">//         the actual stack size. What could happen is that VM sets up the guard</span></span><br><span class=\"line\"><span class=\"comment\">//         at the theoretical limit, but because the program doesn't really use</span></span><br><span class=\"line\"><span class=\"comment\">//         that much stack, the unused space is reused for other purposes (e.g. malloc)</span></span><br><span class=\"line\"><span class=\"comment\">//         by the OS (this reuse won't occur with other threads). We ended up having</span></span><br><span class=\"line\"><span class=\"comment\">//         some C heap inserted between stack and its guard page.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      4. On Linux VM bangs stack address below current SP to check for stack overflows.</span></span><br><span class=\"line\"><span class=\"comment\">//         This will trigger SEGV's if it happens in primordial thread due to a security</span></span><br><span class=\"line\"><span class=\"comment\">//         feature built into the kernel. Linux VM gets around the problem by manually</span></span><br><span class=\"line\"><span class=\"comment\">//         expanding the stack. However when VM is expanding the stack, for a very short</span></span><br><span class=\"line\"><span class=\"comment\">//         period the available stack space will be reduced to just 1 page. If a signal</span></span><br><span class=\"line\"><span class=\"comment\">//         is delivered in that window, VM could end up without space to handle the signal.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      5. Some Linux kernel randomizes the starting stack address for primordial thread</span></span><br><span class=\"line\"><span class=\"comment\">//         both for stack coloring and exec-shield, but it won't tell the application.</span></span><br><span class=\"line\"><span class=\"comment\">//         This makes it impossible to reliably detect stack location and size in primordial</span></span><br><span class=\"line\"><span class=\"comment\">//         thread. VM needs the information to correctly handle stack overflows. We do</span></span><br><span class=\"line\"><span class=\"comment\">//         have some cushion which is enough most of the time, but as shown in bug reports</span></span><br><span class=\"line\"><span class=\"comment\">//         people do hit crashes because of this.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      6. On Linux there is no thr_main() equivalent that can tell if current thread</span></span><br><span class=\"line\"><span class=\"comment\">//         is primordial thread, makes it even harder to have special code to handle</span></span><br><span class=\"line\"><span class=\"comment\">//         primordial thread.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      I'm sure there are other issues that I didn't cover in the list. Basically</span></span><br><span class=\"line\"><span class=\"comment\">//      primordial thread has been a constant source of runtime bugs.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      This proposal calls for java launcher to stop calling JNI_CreateJavaVM from</span></span><br><span class=\"line\"><span class=\"comment\">//      primordial thread. Instead, it can create a new thread and move all invocation</span></span><br><span class=\"line\"><span class=\"comment\">//      code to the new thread. Primordial thread simply waits for the new thread</span></span><br><span class=\"line\"><span class=\"comment\">//      to return and then it can terminate the process with the same exit value returned</span></span><br><span class=\"line\"><span class=\"comment\">//      by the new thread. With this change we won't see any of the above problems</span></span><br><span class=\"line\"><span class=\"comment\">//      as long as the application is started by a standard Sun launcher.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      The above mentioned will still exist if VM is invoked from natvie application.</span></span><br><span class=\"line\"><span class=\"comment\">//      Which means we have to keep all current VM workarounds for primordial thread,</span></span><br><span class=\"line\"><span class=\"comment\">//      and probably need to add more. But reliability wise this is still significantly</span></span><br><span class=\"line\"><span class=\"comment\">//      better as most people are using standard launcher. Also, unlike standard java</span></span><br><span class=\"line\"><span class=\"comment\">//      launcher, customers have full control of native launcher. For example, if they</span></span><br><span class=\"line\"><span class=\"comment\">//      wish to use larger stack on Windows, they could simply rebuild their launcher</span></span><br><span class=\"line\"><span class=\"comment\">//      with larger stack size.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> ContinueInNewThread(JavaMain, threadStackSize, (<span class=\"keyword\">void</span>*)&amp;args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> JNICALL</span><br><span class=\"line\">JavaMain(<span class=\"keyword\">void</span> * _args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">JavaMainArgs</span> *<span class=\"title\">args</span> = (<span class=\"title\">struct</span> <span class=\"title\">JavaMainArgs</span> *)_<span class=\"title\">args</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> argc = args-&gt;argc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> **argv = args-&gt;argv;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *jarfile = args-&gt;jarfile;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *classname = args-&gt;classname;</span><br><span class=\"line\">    InvocationFunctions ifn = args-&gt;ifn;</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaVM *vm = <span class=\"number\">0</span>;</span><br><span class=\"line\">    JNIEnv *env = <span class=\"number\">0</span>;</span><br><span class=\"line\">    jstring mainClassName;</span><br><span class=\"line\">    jclass mainClass;</span><br><span class=\"line\">    jmethodID mainID;</span><br><span class=\"line\">    jobjectArray mainArgs;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    jlong start, end;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Error message to print or display; by default the message will</span></span><br><span class=\"line\"><span class=\"comment\">     * only be displayed in a window.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> * message = <span class=\"string\">\"Fatal exception occurred.  Program will exit.\"</span>;</span><br><span class=\"line\">    jboolean messageDest = JNI_FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize the virtual machine */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug)</span><br><span class=\"line\">        start = CounterGet();</span><br><span class=\"line\">    <span class=\"comment\">// ================================</span></span><br><span class=\"line\">    <span class=\"comment\">// 开始进行虚拟机初始化，此方法内部调用了JNI_CreateJavaVM，</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里做的事情非常之多，也是JVM启动的精华部分</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于这部分内容甚多，所以在下篇文章中介绍</span></span><br><span class=\"line\">    <span class=\"comment\">// ================================</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!InitializeJVM(&amp;vm, &amp;env, &amp;ifn)) &#123;</span><br><span class=\"line\">        ReportErrorMessage(<span class=\"string\">\"Could not create the Java virtual machine.\"</span>,</span><br><span class=\"line\">                           JNI_TRUE);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果输入了-version或-showversion参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printVersion || showVersion) &#123;</span><br><span class=\"line\">        PrintJavaVersion(env);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*env)-&gt;ExceptionOccurred(env)) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (printVersion) &#123;</span><br><span class=\"line\">            ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">            message = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (showVersion) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果jar文件和类名均未指定则输出默认usage信息</span></span><br><span class=\"line\">    <span class=\"comment\">/* If the user specified neither a class name nor a JAR file */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jarfile == <span class=\"number\">0</span> &amp;&amp; classname == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        PrintUsage();</span><br><span class=\"line\">        message = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> GAMMA</span></span><br><span class=\"line\">    FreeKnownVMs();  <span class=\"comment\">/* after last possible PrintUsage() */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug) &#123;</span><br><span class=\"line\">        end   = CounterGet();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld micro seconds to InitializeJVM\\n\"</span>,</span><br><span class=\"line\">               (<span class=\"keyword\">long</span>)(jint)Counter2Micros(end-start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* At this stage, argc/argv have the applications' arguments */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Main-Class is '%s'\\n\"</span>, classname ? classname : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Apps' argc is %d\\n\"</span>, argc);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; argc; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"    argv[%2d] = '%s'\\n\"</span>, i, argv[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取应用程序的主类文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 解析jar包并加载主类文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jarfile != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果传入的是jar文件名称则通过调用java.util.jar.JarFile加载jar包并获取主类</span></span><br><span class=\"line\">        mainClassName = GetMainClassName(env, jarfile);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*env)-&gt;ExceptionOccurred(env)) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainClassName == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * format = <span class=\"string\">\"Failed to load Main-Class manifest \"</span></span><br><span class=\"line\">                                <span class=\"string\">\"attribute from\\n%s\"</span>;</span><br><span class=\"line\">          message = (<span class=\"keyword\">char</span>*)JLI_MemAlloc((<span class=\"built_in\">strlen</span>(format) + <span class=\"built_in\">strlen</span>(jarfile)) *</span><br><span class=\"line\">                                    <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</span><br><span class=\"line\">          <span class=\"built_in\">sprintf</span>(message, format, jarfile);</span><br><span class=\"line\">          messageDest = JNI_TRUE;</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        classname = (<span class=\"keyword\">char</span> *)(*env)-&gt;GetStringUTFChars(env, mainClassName, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (classname == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 加载mainClass</span></span><br><span class=\"line\">        mainClass = LoadClass(env, classname);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mainClass == <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">/* exception occured */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * format = <span class=\"string\">\"Could not find the main class: %s. Program will exit.\"</span>;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            message = (<span class=\"keyword\">char</span> *)JLI_MemAlloc((<span class=\"built_in\">strlen</span>(format) +</span><br><span class=\"line\">                                            <span class=\"built_in\">strlen</span>(classname)) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">            messageDest = JNI_TRUE;</span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(message, format, classname);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        (*env)-&gt;ReleaseStringUTFChars(env, mainClassName, classname);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 加载主类文件</span></span><br><span class=\"line\">      mainClassName = NewPlatformString(env, classname);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mainClassName == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * format = <span class=\"string\">\"Failed to load Main Class: %s\"</span>;</span><br><span class=\"line\">        message = (<span class=\"keyword\">char</span> *)JLI_MemAlloc((<span class=\"built_in\">strlen</span>(format) + <span class=\"built_in\">strlen</span>(classname)) *</span><br><span class=\"line\">                                   <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(message, format, classname);</span><br><span class=\"line\">        messageDest = JNI_TRUE;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      classname = (<span class=\"keyword\">char</span> *)(*env)-&gt;GetStringUTFChars(env, mainClassName, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (classname == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        ReportExceptionDescription(env);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mainClass = LoadClass(env, classname);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(mainClass == <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">/* exception occured */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * format = <span class=\"string\">\"Could not find the main class: %s.  Program will exit.\"</span>;</span><br><span class=\"line\">        ReportExceptionDescription(env);</span><br><span class=\"line\">        message = (<span class=\"keyword\">char</span> *)JLI_MemAlloc((<span class=\"built_in\">strlen</span>(format) +</span><br><span class=\"line\">                                        <span class=\"built_in\">strlen</span>(classname)) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">        messageDest = JNI_TRUE;</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(message, format, classname);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      (*env)-&gt;ReleaseStringUTFChars(env, mainClassName, classname);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获得主方法的ID</span></span><br><span class=\"line\">    mainID = (*env)-&gt;GetStaticMethodID(env, mainClass, <span class=\"string\">\"main\"</span>,</span><br><span class=\"line\">                                       <span class=\"string\">\"([Ljava/lang/String;)V\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mainID == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*env)-&gt;ExceptionOccurred(env)) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          message = <span class=\"string\">\"No main method found in specified class.\"</span>;</span><br><span class=\"line\">          messageDest = JNI_TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;    <span class=\"comment\">/* Make sure the main method is public */</span></span><br><span class=\"line\">        jint mods;</span><br><span class=\"line\">        jmethodID mid;</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射获得main方法修饰符</span></span><br><span class=\"line\">        jobject obj = (*env)-&gt;ToReflectedMethod(env, mainClass,</span><br><span class=\"line\">                                                mainID, JNI_TRUE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( obj == <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">/* exception occurred */</span></span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mid =</span><br><span class=\"line\">          (*env)-&gt;GetMethodID(env,</span><br><span class=\"line\">                              (*env)-&gt;GetObjectClass(env, obj),</span><br><span class=\"line\">                              <span class=\"string\">\"getModifiers\"</span>, <span class=\"string\">\"()I\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*env)-&gt;ExceptionOccurred(env)) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 确保是public类型</span></span><br><span class=\"line\">        mods = (*env)-&gt;CallIntMethod(env, obj, mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((mods &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123; <span class=\"comment\">/* if (!Modifier.isPublic(mods)) ... */</span></span><br><span class=\"line\">            message = <span class=\"string\">\"Main method not public.\"</span>;</span><br><span class=\"line\">            messageDest = JNI_TRUE;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建参数数组</span></span><br><span class=\"line\">    mainArgs = NewPlatformStringArray(env, argv, argc);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mainArgs == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        ReportExceptionDescription(env);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用main方法</span></span><br><span class=\"line\">    <span class=\"comment\">/* Invoke main method. */</span></span><br><span class=\"line\">    (*env)-&gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * The launcher's exit code (in the absence of calls to</span></span><br><span class=\"line\"><span class=\"comment\">     * System.exit) will be non-zero if main threw an exception.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ret = (*env)-&gt;ExceptionOccurred(env) == <span class=\"literal\">NULL</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Detach the main thread so that it appears to have ended when</span></span><br><span class=\"line\"><span class=\"comment\">     * the application's main method exits.  This will invoke the</span></span><br><span class=\"line\"><span class=\"comment\">     * uncaught exception handler machinery if main threw an</span></span><br><span class=\"line\"><span class=\"comment\">     * exception.  An uncaught exception handler cannot change the</span></span><br><span class=\"line\"><span class=\"comment\">     * launcher's return code except by calling System.exit.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((*vm)-&gt;DetachCurrentThread(vm) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        message = <span class=\"string\">\"Could not detach main thread.\"</span>;</span><br><span class=\"line\">        messageDest = JNI_TRUE;</span><br><span class=\"line\">        ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    message = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> leave:</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Wait for all non-daemon threads to end, then destroy the VM.</span></span><br><span class=\"line\"><span class=\"comment\">     * This will actually create a trivial new Java waiter thread</span></span><br><span class=\"line\"><span class=\"comment\">     * named \"DestroyJavaVM\", but this will be seen as a different</span></span><br><span class=\"line\"><span class=\"comment\">     * thread from the one that executed main, even though they are</span></span><br><span class=\"line\"><span class=\"comment\">     * the same C thread.  This allows mainThread.join() and</span></span><br><span class=\"line\"><span class=\"comment\">     * mainThread.isAlive() to work as expected.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    (*vm)-&gt;DestroyJavaVM(vm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(message != <span class=\"literal\">NULL</span> &amp;&amp; !noExitErrorMessage)</span><br><span class=\"line\">      ReportErrorMessage(message, messageDest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下篇文章将介绍JVM初始化部分。</p>\n","site":{"data":{}},"excerpt":"<p>博主在11年到12年的时候曾连续研究过十个月的JVM，读过的相关书籍包括：</p>\n<ul>\n<li><p><a href=\"https://book.douban.com/subject/1138768/\" target=\"_blank\" rel=\"noopener\">深入Java虚拟机</a><br>这本书可以说是介绍JVM内部原理的鼻祖了，于2003年出版现已绝版，不过可以再某宝买到影印版。虽然当时JDK最高仅为1.4但JVM内部的构造已大体形成，所以博主强烈推荐此书。p.s 我肯定不会告诉你这书博主看了3遍：D</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/6522893/\" target=\"_blank\" rel=\"noopener\">深入理解Java虚拟机</a><br>国内周某人写的，鉴于博主对于国人写的书向来不怎么感兴趣还是不提了。</p>\n</li>\n</ul>\n<p>说起JVM它可以是以下三种：</p>\n<ol>\n<li>一个正在运行的Java实例</li>\n<li>Java虚拟机规范</li>\n<li>一种JVM虚拟机实现</li>\n</ol>\n<p>之前的研究基本上都是虚拟机规范和JVM参数调优层面的内容，但是总觉得有些意犹未尽所以决定深入研究一下Hotspot实现，由大部分C/C++和少量汇编代码构成，但清晰的结构和优雅的编码使其并不难读，不得不赞叹一句SUN的大师们的智慧。至于如何编译、调试OpenJDK&amp;Hotspot博主在前面的文章已经介绍过，这里便不再赘述，所以直入主题。</p>","more":"<p>让我们从Java程序主入口开始逐步分析，主入口文件位于 <code>hotspot/src/share/tools/launcher/java.c</code></p>\n<p>main方法内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Entry point.</span></span><br><span class=\"line\"><span class=\"comment\"> * JAVA程序主入口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> ** argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *jarfile = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *classname = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *main_class = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">    InvocationFunctions ifn;</span><br><span class=\"line\">    jlong start, end;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> jrepath[MAXPATHLEN], jvmpath[MAXPATHLEN];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ** original_argv = argv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getenv(<span class=\"string\">\"_JAVA_LAUNCHER_DEBUG\"</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        _launcher_debug = JNI_TRUE;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"----_JAVA_LAUNCHER_DEBUG----\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> GAMMA</span></span><br><span class=\"line\">    <span class=\"comment\">// 确保指定的版本正在运行</span></span><br><span class=\"line\">    SelectVersion(argc, argv, &amp;main_class);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* ifndef GAMMA */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* copy original argv */</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">      original_argv = (<span class=\"keyword\">char</span>**)JLI_MemAlloc(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>*)*(argc+<span class=\"number\">1</span>));</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; argc+<span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        original_argv[i] = argv[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建运行环境，如检查系统使用的数据模型（32bit、64bit），获取使用的JRE路径，找到jvm.cfg解析已知的vm类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置新的LD_LIBRARY_PATH变量</span></span><br><span class=\"line\">    CreateExecutionEnvironment(&amp;argc, &amp;argv,</span><br><span class=\"line\">                               jrepath, <span class=\"keyword\">sizeof</span>(jrepath),</span><br><span class=\"line\">                               jvmpath, <span class=\"keyword\">sizeof</span>(jvmpath),</span><br><span class=\"line\">                               original_argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Using java runtime at: %s\\n\"</span>, jrepath);</span><br><span class=\"line\"></span><br><span class=\"line\">    ifn.CreateJavaVM = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ifn.GetDefaultJavaVMInitArgs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug)</span><br><span class=\"line\">      start = CounterGet();</span><br><span class=\"line\">    <span class=\"comment\">// 通过jvmpath找到libjvm.so 并将其JNI_CreateJavaVM和JNI_GetDefaultJavaVMInitArgs方法的</span></span><br><span class=\"line\">    <span class=\"comment\">// 符号地址返回，挂载到InvocationFunctions的CreateJavaVM和GetDefaultJavaVMInitArgs以便初始化调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!LoadJavaVM(jvmpath, &amp;ifn)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug) &#123;</span><br><span class=\"line\">      end   = CounterGet();</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld micro seconds to LoadJavaVM\\n\"</span>,</span><br><span class=\"line\">             (<span class=\"keyword\">long</span>)(jint)Counter2Micros(end-start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> JAVA_ARGS  <span class=\"comment\">/* javac, jar and friends. */</span></span></span><br><span class=\"line\">    progname = <span class=\"string\">\"java\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>             <span class=\"comment\">/* java, oldjava, javaw and friends */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> PROGNAME</span></span><br><span class=\"line\">    progname = PROGNAME;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    progname = *argv;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = <span class=\"built_in\">strrchr</span>(progname, FILE_SEPARATOR)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        progname = s + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* PROGNAME */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* JAVA_ARGS */</span></span></span><br><span class=\"line\">    ++argv;</span><br><span class=\"line\">    --argc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> JAVA_ARGS</span></span><br><span class=\"line\">    <span class=\"comment\">// 转换命令行参数 如：javac -cp foo:foo/\"*\" -J-ms32m</span></span><br><span class=\"line\">    <span class=\"comment\">/* Preprocess wrapper arguments */</span></span><br><span class=\"line\">    TranslateApplicationArgs(&amp;argc, &amp;argv);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加了三个VM选项</span></span><br><span class=\"line\"><span class=\"comment\">     * -Denv.class.patp 用户设置的CLASSPATH变量，如果CLASSPATH显式设置了tools.jar</span></span><br><span class=\"line\"><span class=\"comment\">     *                  则可以反编译VM的工具类sun.tools.*</span></span><br><span class=\"line\"><span class=\"comment\">     * -Dapplication.home 应用程序目录</span></span><br><span class=\"line\"><span class=\"comment\">     * -Djava.class.path 应用程序的类文件目录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!AddApplicationOptions()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Set default CLASSPATH */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((s = getenv(<span class=\"string\">\"CLASSPATH\"</span>)) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> JAVA_ARGS</span></span><br><span class=\"line\">    SetClassPath(s);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  解析命令行参数-cp、-version、-*path、-X*等参数</span></span><br><span class=\"line\"><span class=\"comment\">     *  Parse command line options; if the return value of</span></span><br><span class=\"line\"><span class=\"comment\">     *  ParseArguments is false, the program should exit.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ParseArguments(&amp;argc, &amp;argv, &amp;jarfile, &amp;classname, &amp;ret, jvmpath)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Override class path if -jar flag was specified */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jarfile != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        SetClassPath(jarfile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* set the -Dsun.java.command pseudo property */</span></span><br><span class=\"line\">    SetJavaCommandLineProp(classname, jarfile, argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Set the -Dsun.java.launcher pseudo property */</span></span><br><span class=\"line\">    SetJavaLauncherProp();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* set the -Dsun.java.launcher.* platform properties */</span></span><br><span class=\"line\">    SetJavaLauncherPlatformProps();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> GAMMA</span></span><br><span class=\"line\">    <span class=\"comment\">/* Show the splash screen if needed */</span></span><br><span class=\"line\">    ShowSplashScreen();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除环境变量防止重复执行</span></span><br><span class=\"line\"><span class=\"comment\">     * Done with all command line processing and potential re-execs so</span></span><br><span class=\"line\"><span class=\"comment\">     * clean up the environment.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    (<span class=\"keyword\">void</span>)UnsetEnv(ENV_ENTRY);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> GAMMA</span></span><br><span class=\"line\">    (<span class=\"keyword\">void</span>)UnsetEnv(SPLASH_FILE_ENV_ENTRY);</span><br><span class=\"line\">    (<span class=\"keyword\">void</span>)UnsetEnv(SPLASH_JAR_ENV_ENTRY);</span><br><span class=\"line\"></span><br><span class=\"line\">    JLI_MemFree(splash_jar_entry);</span><br><span class=\"line\">    JLI_MemFree(splash_file_entry);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定线程大小</span></span><br><span class=\"line\"><span class=\"comment\">     * If user doesn't specify stack size, check if VM has a preference.</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will</span></span><br><span class=\"line\"><span class=\"comment\">     * return its default stack size through the init args structure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (threadStackSize == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">JDK1_1InitArgs</span> <span class=\"title\">args1_1</span>;</span></span><br><span class=\"line\">      <span class=\"built_in\">memset</span>((<span class=\"keyword\">void</span>*)&amp;args1_1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(args1_1));</span><br><span class=\"line\">      args1_1.version = JNI_VERSION_1_1;</span><br><span class=\"line\">      ifn.GetDefaultJavaVMInitArgs(&amp;args1_1);  <span class=\"comment\">/* ignore return value */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args1_1.javaStackSize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         threadStackSize = args1_1.javaStackSize;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"comment\">/* Create a new thread to create JVM and invoke main method */</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">JavaMainArgs</span> <span class=\"title\">args</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      args.argc = argc;</span><br><span class=\"line\">      args.argv = argv;</span><br><span class=\"line\">      args.jarfile = jarfile;</span><br><span class=\"line\">      args.classname = classname;</span><br><span class=\"line\">      args.ifn = ifn;</span><br><span class=\"line\">      <span class=\"comment\">// block当前线程并且在新线程中继续执行</span></span><br><span class=\"line\">      <span class=\"comment\">// 至于为什么在新线程中创建JVM见如下注释引用或原文https://bugs.openjdk.java.net/browse/JDK-6316197</span></span><br><span class=\"line\"><span class=\"comment\">//      Primordial thread is created by the kernel before any program/library code</span></span><br><span class=\"line\"><span class=\"comment\">//      has a chance to run. It's stack size and location can be very different</span></span><br><span class=\"line\"><span class=\"comment\">//      from other threads created by the application. Creating JVM from primordial</span></span><br><span class=\"line\"><span class=\"comment\">//      thread and later running Java code in the primordial thread introduced</span></span><br><span class=\"line\"><span class=\"comment\">//      many problems:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      1. On Windows primordial thread stack size is controlled by PE header in</span></span><br><span class=\"line\"><span class=\"comment\">//         the executable. There is no way for user to change it dynamically, which</span></span><br><span class=\"line\"><span class=\"comment\">//         means -Xss does not work for primordial thread.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      2. On Solaris/Linux, primordial thread stack size is controlled by ulimit -s,</span></span><br><span class=\"line\"><span class=\"comment\">//         which is usually very large (8M). To compensate for that we set guard</span></span><br><span class=\"line\"><span class=\"comment\">//         page in the middle of stack to artificially reduce the stack size. However,</span></span><br><span class=\"line\"><span class=\"comment\">//         this may interfere with native applications.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      3. Setting guard page for primordial thread is dangerous. Unlike other</span></span><br><span class=\"line\"><span class=\"comment\">//         threads, primordial thread stack can grow on demand. getrlimit()</span></span><br><span class=\"line\"><span class=\"comment\">//         tells VM the ulimit value which is the upper limit but not necessarily</span></span><br><span class=\"line\"><span class=\"comment\">//         the actual stack size. What could happen is that VM sets up the guard</span></span><br><span class=\"line\"><span class=\"comment\">//         at the theoretical limit, but because the program doesn't really use</span></span><br><span class=\"line\"><span class=\"comment\">//         that much stack, the unused space is reused for other purposes (e.g. malloc)</span></span><br><span class=\"line\"><span class=\"comment\">//         by the OS (this reuse won't occur with other threads). We ended up having</span></span><br><span class=\"line\"><span class=\"comment\">//         some C heap inserted between stack and its guard page.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      4. On Linux VM bangs stack address below current SP to check for stack overflows.</span></span><br><span class=\"line\"><span class=\"comment\">//         This will trigger SEGV's if it happens in primordial thread due to a security</span></span><br><span class=\"line\"><span class=\"comment\">//         feature built into the kernel. Linux VM gets around the problem by manually</span></span><br><span class=\"line\"><span class=\"comment\">//         expanding the stack. However when VM is expanding the stack, for a very short</span></span><br><span class=\"line\"><span class=\"comment\">//         period the available stack space will be reduced to just 1 page. If a signal</span></span><br><span class=\"line\"><span class=\"comment\">//         is delivered in that window, VM could end up without space to handle the signal.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      5. Some Linux kernel randomizes the starting stack address for primordial thread</span></span><br><span class=\"line\"><span class=\"comment\">//         both for stack coloring and exec-shield, but it won't tell the application.</span></span><br><span class=\"line\"><span class=\"comment\">//         This makes it impossible to reliably detect stack location and size in primordial</span></span><br><span class=\"line\"><span class=\"comment\">//         thread. VM needs the information to correctly handle stack overflows. We do</span></span><br><span class=\"line\"><span class=\"comment\">//         have some cushion which is enough most of the time, but as shown in bug reports</span></span><br><span class=\"line\"><span class=\"comment\">//         people do hit crashes because of this.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      6. On Linux there is no thr_main() equivalent that can tell if current thread</span></span><br><span class=\"line\"><span class=\"comment\">//         is primordial thread, makes it even harder to have special code to handle</span></span><br><span class=\"line\"><span class=\"comment\">//         primordial thread.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      I'm sure there are other issues that I didn't cover in the list. Basically</span></span><br><span class=\"line\"><span class=\"comment\">//      primordial thread has been a constant source of runtime bugs.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      This proposal calls for java launcher to stop calling JNI_CreateJavaVM from</span></span><br><span class=\"line\"><span class=\"comment\">//      primordial thread. Instead, it can create a new thread and move all invocation</span></span><br><span class=\"line\"><span class=\"comment\">//      code to the new thread. Primordial thread simply waits for the new thread</span></span><br><span class=\"line\"><span class=\"comment\">//      to return and then it can terminate the process with the same exit value returned</span></span><br><span class=\"line\"><span class=\"comment\">//      by the new thread. With this change we won't see any of the above problems</span></span><br><span class=\"line\"><span class=\"comment\">//      as long as the application is started by a standard Sun launcher.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//      The above mentioned will still exist if VM is invoked from natvie application.</span></span><br><span class=\"line\"><span class=\"comment\">//      Which means we have to keep all current VM workarounds for primordial thread,</span></span><br><span class=\"line\"><span class=\"comment\">//      and probably need to add more. But reliability wise this is still significantly</span></span><br><span class=\"line\"><span class=\"comment\">//      better as most people are using standard launcher. Also, unlike standard java</span></span><br><span class=\"line\"><span class=\"comment\">//      launcher, customers have full control of native launcher. For example, if they</span></span><br><span class=\"line\"><span class=\"comment\">//      wish to use larger stack on Windows, they could simply rebuild their launcher</span></span><br><span class=\"line\"><span class=\"comment\">//      with larger stack size.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> ContinueInNewThread(JavaMain, threadStackSize, (<span class=\"keyword\">void</span>*)&amp;args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> JNICALL</span><br><span class=\"line\">JavaMain(<span class=\"keyword\">void</span> * _args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">JavaMainArgs</span> *<span class=\"title\">args</span> = (<span class=\"title\">struct</span> <span class=\"title\">JavaMainArgs</span> *)_<span class=\"title\">args</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> argc = args-&gt;argc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> **argv = args-&gt;argv;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *jarfile = args-&gt;jarfile;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *classname = args-&gt;classname;</span><br><span class=\"line\">    InvocationFunctions ifn = args-&gt;ifn;</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaVM *vm = <span class=\"number\">0</span>;</span><br><span class=\"line\">    JNIEnv *env = <span class=\"number\">0</span>;</span><br><span class=\"line\">    jstring mainClassName;</span><br><span class=\"line\">    jclass mainClass;</span><br><span class=\"line\">    jmethodID mainID;</span><br><span class=\"line\">    jobjectArray mainArgs;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    jlong start, end;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Error message to print or display; by default the message will</span></span><br><span class=\"line\"><span class=\"comment\">     * only be displayed in a window.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> * message = <span class=\"string\">\"Fatal exception occurred.  Program will exit.\"</span>;</span><br><span class=\"line\">    jboolean messageDest = JNI_FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize the virtual machine */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug)</span><br><span class=\"line\">        start = CounterGet();</span><br><span class=\"line\">    <span class=\"comment\">// ================================</span></span><br><span class=\"line\">    <span class=\"comment\">// 开始进行虚拟机初始化，此方法内部调用了JNI_CreateJavaVM，</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里做的事情非常之多，也是JVM启动的精华部分</span></span><br><span class=\"line\">    <span class=\"comment\">// 由于这部分内容甚多，所以在下篇文章中介绍</span></span><br><span class=\"line\">    <span class=\"comment\">// ================================</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!InitializeJVM(&amp;vm, &amp;env, &amp;ifn)) &#123;</span><br><span class=\"line\">        ReportErrorMessage(<span class=\"string\">\"Could not create the Java virtual machine.\"</span>,</span><br><span class=\"line\">                           JNI_TRUE);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果输入了-version或-showversion参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printVersion || showVersion) &#123;</span><br><span class=\"line\">        PrintJavaVersion(env);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*env)-&gt;ExceptionOccurred(env)) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (printVersion) &#123;</span><br><span class=\"line\">            ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">            message = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (showVersion) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果jar文件和类名均未指定则输出默认usage信息</span></span><br><span class=\"line\">    <span class=\"comment\">/* If the user specified neither a class name nor a JAR file */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jarfile == <span class=\"number\">0</span> &amp;&amp; classname == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        PrintUsage();</span><br><span class=\"line\">        message = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> GAMMA</span></span><br><span class=\"line\">    FreeKnownVMs();  <span class=\"comment\">/* after last possible PrintUsage() */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug) &#123;</span><br><span class=\"line\">        end   = CounterGet();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%ld micro seconds to InitializeJVM\\n\"</span>,</span><br><span class=\"line\">               (<span class=\"keyword\">long</span>)(jint)Counter2Micros(end-start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* At this stage, argc/argv have the applications' arguments */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_launcher_debug) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Main-Class is '%s'\\n\"</span>, classname ? classname : <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Apps' argc is %d\\n\"</span>, argc);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; i &lt; argc; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"    argv[%2d] = '%s'\\n\"</span>, i, argv[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取应用程序的主类文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">// 解析jar包并加载主类文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jarfile != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果传入的是jar文件名称则通过调用java.util.jar.JarFile加载jar包并获取主类</span></span><br><span class=\"line\">        mainClassName = GetMainClassName(env, jarfile);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*env)-&gt;ExceptionOccurred(env)) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mainClassName == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * format = <span class=\"string\">\"Failed to load Main-Class manifest \"</span></span><br><span class=\"line\">                                <span class=\"string\">\"attribute from\\n%s\"</span>;</span><br><span class=\"line\">          message = (<span class=\"keyword\">char</span>*)JLI_MemAlloc((<span class=\"built_in\">strlen</span>(format) + <span class=\"built_in\">strlen</span>(jarfile)) *</span><br><span class=\"line\">                                    <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</span><br><span class=\"line\">          <span class=\"built_in\">sprintf</span>(message, format, jarfile);</span><br><span class=\"line\">          messageDest = JNI_TRUE;</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        classname = (<span class=\"keyword\">char</span> *)(*env)-&gt;GetStringUTFChars(env, mainClassName, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (classname == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 加载mainClass</span></span><br><span class=\"line\">        mainClass = LoadClass(env, classname);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mainClass == <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">/* exception occured */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * format = <span class=\"string\">\"Could not find the main class: %s. Program will exit.\"</span>;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            message = (<span class=\"keyword\">char</span> *)JLI_MemAlloc((<span class=\"built_in\">strlen</span>(format) +</span><br><span class=\"line\">                                            <span class=\"built_in\">strlen</span>(classname)) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">            messageDest = JNI_TRUE;</span><br><span class=\"line\">            <span class=\"built_in\">sprintf</span>(message, format, classname);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        (*env)-&gt;ReleaseStringUTFChars(env, mainClassName, classname);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 加载主类文件</span></span><br><span class=\"line\">      mainClassName = NewPlatformString(env, classname);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mainClassName == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * format = <span class=\"string\">\"Failed to load Main Class: %s\"</span>;</span><br><span class=\"line\">        message = (<span class=\"keyword\">char</span> *)JLI_MemAlloc((<span class=\"built_in\">strlen</span>(format) + <span class=\"built_in\">strlen</span>(classname)) *</span><br><span class=\"line\">                                   <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(message, format, classname);</span><br><span class=\"line\">        messageDest = JNI_TRUE;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      classname = (<span class=\"keyword\">char</span> *)(*env)-&gt;GetStringUTFChars(env, mainClassName, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (classname == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        ReportExceptionDescription(env);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mainClass = LoadClass(env, classname);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(mainClass == <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">/* exception occured */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * format = <span class=\"string\">\"Could not find the main class: %s.  Program will exit.\"</span>;</span><br><span class=\"line\">        ReportExceptionDescription(env);</span><br><span class=\"line\">        message = (<span class=\"keyword\">char</span> *)JLI_MemAlloc((<span class=\"built_in\">strlen</span>(format) +</span><br><span class=\"line\">                                        <span class=\"built_in\">strlen</span>(classname)) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>) );</span><br><span class=\"line\">        messageDest = JNI_TRUE;</span><br><span class=\"line\">        <span class=\"built_in\">sprintf</span>(message, format, classname);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      (*env)-&gt;ReleaseStringUTFChars(env, mainClassName, classname);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获得主方法的ID</span></span><br><span class=\"line\">    mainID = (*env)-&gt;GetStaticMethodID(env, mainClass, <span class=\"string\">\"main\"</span>,</span><br><span class=\"line\">                                       <span class=\"string\">\"([Ljava/lang/String;)V\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mainID == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*env)-&gt;ExceptionOccurred(env)) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          message = <span class=\"string\">\"No main method found in specified class.\"</span>;</span><br><span class=\"line\">          messageDest = JNI_TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;    <span class=\"comment\">/* Make sure the main method is public */</span></span><br><span class=\"line\">        jint mods;</span><br><span class=\"line\">        jmethodID mid;</span><br><span class=\"line\">        <span class=\"comment\">// 通过反射获得main方法修饰符</span></span><br><span class=\"line\">        jobject obj = (*env)-&gt;ToReflectedMethod(env, mainClass,</span><br><span class=\"line\">                                                mainID, JNI_TRUE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( obj == <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">/* exception occurred */</span></span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mid =</span><br><span class=\"line\">          (*env)-&gt;GetMethodID(env,</span><br><span class=\"line\">                              (*env)-&gt;GetObjectClass(env, obj),</span><br><span class=\"line\">                              <span class=\"string\">\"getModifiers\"</span>, <span class=\"string\">\"()I\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((*env)-&gt;ExceptionOccurred(env)) &#123;</span><br><span class=\"line\">            ReportExceptionDescription(env);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 确保是public类型</span></span><br><span class=\"line\">        mods = (*env)-&gt;CallIntMethod(env, obj, mid);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((mods &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123; <span class=\"comment\">/* if (!Modifier.isPublic(mods)) ... */</span></span><br><span class=\"line\">            message = <span class=\"string\">\"Main method not public.\"</span>;</span><br><span class=\"line\">            messageDest = JNI_TRUE;</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建参数数组</span></span><br><span class=\"line\">    mainArgs = NewPlatformStringArray(env, argv, argc);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mainArgs == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        ReportExceptionDescription(env);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用main方法</span></span><br><span class=\"line\">    <span class=\"comment\">/* Invoke main method. */</span></span><br><span class=\"line\">    (*env)-&gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * The launcher's exit code (in the absence of calls to</span></span><br><span class=\"line\"><span class=\"comment\">     * System.exit) will be non-zero if main threw an exception.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ret = (*env)-&gt;ExceptionOccurred(env) == <span class=\"literal\">NULL</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Detach the main thread so that it appears to have ended when</span></span><br><span class=\"line\"><span class=\"comment\">     * the application's main method exits.  This will invoke the</span></span><br><span class=\"line\"><span class=\"comment\">     * uncaught exception handler machinery if main threw an</span></span><br><span class=\"line\"><span class=\"comment\">     * exception.  An uncaught exception handler cannot change the</span></span><br><span class=\"line\"><span class=\"comment\">     * launcher's return code except by calling System.exit.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((*vm)-&gt;DetachCurrentThread(vm) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        message = <span class=\"string\">\"Could not detach main thread.\"</span>;</span><br><span class=\"line\">        messageDest = JNI_TRUE;</span><br><span class=\"line\">        ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> leave;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    message = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> leave:</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Wait for all non-daemon threads to end, then destroy the VM.</span></span><br><span class=\"line\"><span class=\"comment\">     * This will actually create a trivial new Java waiter thread</span></span><br><span class=\"line\"><span class=\"comment\">     * named \"DestroyJavaVM\", but this will be seen as a different</span></span><br><span class=\"line\"><span class=\"comment\">     * thread from the one that executed main, even though they are</span></span><br><span class=\"line\"><span class=\"comment\">     * the same C thread.  This allows mainThread.join() and</span></span><br><span class=\"line\"><span class=\"comment\">     * mainThread.isAlive() to work as expected.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    (*vm)-&gt;DestroyJavaVM(vm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(message != <span class=\"literal\">NULL</span> &amp;&amp; !noExitErrorMessage)</span><br><span class=\"line\">      ReportErrorMessage(message, messageDest);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下篇文章将介绍JVM初始化部分。</p>"},{"title":"关于IntelliJ IDEA插件Open Terminal Here的设计思路","date":"2015-12-03T02:31:00.000Z","_content":"![IntelliJ Plugin Repo](/images/post/2015/12/03/intellij-plugin-banner.jpg)\n\nOpen Terminal Here是一款用于在终端中直接打开文件所在目录的IntelliJ插件，于2015年12月3日发布至[IntelliJ IDEA官方插件库](https://plugins.jetbrains.com/plugin/8081-open-terminal-here)，目前有3K+次下载，源代码托管于[GitHub](https://github.com/MrHunterZhao/OpenTerminalHere)。\n\n\n<!-- more -->\n\n# 痛点场景\n一直使用IntelliJ IDEA作为IDE，深爱它的智能，正如其名。然而，再完美的东西也有不完美的地方。\n\n作为命令行重度用户自然免不了在命令行进行操作，这种情况下就不得不逐级cd到某个工程文件所在目录，如果目录层级特别深，那酸爽不可思议。\n\n那么，问题来了，如何从命令行中一步切换到文件所在目录？答案就是：给IntelliJ写插件。\n\n\n# 实现思路\nIntelliJ IDEA开放了一套完整的OpenAPI，通过该OpenAPI几乎可以完成对IDEA各个组件的操作及扩展，非常方便。\n\n思路大致为：\n\n1. 首先通过OpenAPI获取工程文件的`VirtualFile`对象，VirtualFile是对文件系统的封装，包含了工程文件几乎所有信息，包括所在系统目录。\n2. 将文件系统目录封装成对应OS的自定义Command对象\n3. 通过`Runtime.getRuntime().exec(command)`调用系统命令行并切换至目标目录\n\n\n# 代码实现\n## 通过OpenAPI获取工程文件所在目录\n\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:31\n * Description: tool for file operation\n */\npublic class FileUtil {\n\n    /**\n     * determine the VirtualFile which selected in Project view\n     * @param project\n     * @return\n     */\n    public static VirtualFile getSelectedProjectFile(@NotNull Project project) {\n\n        AbstractProjectViewPane currentProjectViewPane = ProjectView.getInstance(project).getCurrentProjectViewPane();\n        if (currentProjectViewPane == null) {\n            return null;\n        }\n        DefaultMutableTreeNode node = currentProjectViewPane.getSelectedNode();\n        if (node == null) {\n            return null;\n        }\n        Object selected = null;\n        Object userObject = node.getUserObject();\n        if (userObject instanceof AbstractTreeNode) {\n            selected =  ((AbstractTreeNode)userObject).getValue();\n        }\n        else  if (userObject instanceof NodeDescriptor) {\n            selected =  ((NodeDescriptor)userObject).getElement();\n        }\n\n        if (selected == null) {\n            return null;\n        }\n\n        VirtualFile vf = null;\n        if (selected instanceof PsiDirectory) {\n            vf = ((PsiDirectory)selected).getVirtualFile();\n        }\n        else if (selected instanceof PsiElement) {\n            vf = ((PsiElement) selected).getContainingFile().getVirtualFile().getParent();\n        }\n        else {\n            // ignored\n        }\n\n        return vf;\n    }\n}\n\n```\n\n\n\n## 封装成Command对象\n\n1. Command对象\n\n```java\npublic class Command {\n\n    private String[] cmdArray;\n\n    private String[] envp;\n\n    private File dir;\n\n    public Command(String[] cmdArray) {\n        this.cmdArray = cmdArray;\n    }\n\n    public Command(String[] cmdArray, String[] envp, File dir) {\n        this.cmdArray = cmdArray;\n        this.envp = envp;\n        this.dir = dir;\n    }\n\n    ... 省略setters & getters\n}\n```\n\n2. Win平台命令执行器\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:43\n * Description: command executor for Windows Platform\n */\npublic class WinExecutor extends CommandExecutor {\n\nprivate static final String WIN_CMD = \"C:\\\\Windows\\\\System32\\\\cmd.exe\";\n\n    public WinExecutor(String targetPath) {\n        super.targetPath = targetPath;\n    }\n\n    @Override\n    public String getTerminalPath() {\n        return WIN_CMD;\n    }\n\n    @Override\n    public Command buildCommand() {\n\n        String terminalPath = this.getTerminalPath();\n        String[] cmdArr = {terminalPath, \"/k\", \"start\", \"cd\", getTargetPath()};\n\n        return new Command(cmdArr, null, new File(getTargetPath()));\n    }\n}\n```\n\n3. Mac平台命令执行器\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:42\n * Description: command executor for Mac Platform\n */\npublic class MacExecutor extends CommandExecutor {\n\n    private static final String MAC_TERMINAL = \"/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal\";\n    private static final String ITERM        = \"/Applications/iTerm.app/Contents/MacOS/iTerm\";\n    private static final String ITERM2       = \"/Applications/iTerm.app/Contents/MacOS/iTerm2\";\n\n    public MacExecutor(String targetPath) {\n        setTargetPath(targetPath);\n    }\n\n    @Override\n    public String getTerminalPath() {\n\n        if (isTerminalInstalled(ITERM)) {\n            return ITERM;\n        }\n        else if (isTerminalInstalled(ITERM2)) {\n            return ITERM2;\n        }\n\n        return MAC_TERMINAL;\n    }\n\n    @Override\n    Command buildCommand() {\n        String terminalPath = this.getTerminalPath();\n        String[] cmdArr = {terminalPath, getTargetPath()};\n\n        return new Command(cmdArr);\n    }\n}\n```\n\n\n## 调用系统命令行并切换至目标目录\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:41\n * Description: command execution template\n */\npublic abstract class CommandExecutor {\n\n    /**\n     * determine which terminal to be used\n     * @return\n     */\n    abstract String getTerminalPath();\n\n    /**\n     * build the Command object\n     * @return\n     */\n    abstract Command buildCommand();\n\n    /** path to open */\n    protected String targetPath;\n\n    /**\n     * determine if the specified terminal has been installed\n     * @param terminalPath\n     * @return\n     */\n    protected boolean isTerminalInstalled(String terminalPath) {\n        File terminal = new File(terminalPath);\n        return terminal.exists() && terminal.canExecute();\n    }\n\n    /**\n     * open the target path in terminal\n     */\n    public void openTerminal() {\n\n        Command cmd = this.buildCommand();\n\n        try {\n            Runtime.getRuntime().exec(cmd.getCmdArray(), cmd.getEnvp(), cmd.getDir());\n        } catch (IOException e) {\n            // ignored\n        }\n    };\n\n    public String getTargetPath() {\n        return targetPath;\n    }\n\n    public void setTargetPath(String targetPath) {\n        this.targetPath = targetPath;\n    }\n}\n```\n\n\n## 开放插件入口\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:31\n * Description: An IntelliJ plugin for opening current directory in terminal\n */\npublic class OpenTerminalHereAction extends AnAction {\n\n    public static final String PLUGIN_NAME = \"OpenTerminalHere\";\n\n    @Override\n    public void actionPerformed(AnActionEvent event) {\n\n        Project project = event.getProject();\n        if (project == null) {\n            return;\n        }\n\n        perform(project);\n\n    }\n\n    /**\n     * perform the action\n     * @param project\n     */\n    private void perform(@NotNull Project project) {\n\n        VirtualFile selectedFile = FileUtil.getSelectedProjectFile(project);\n        if (selectedFile == null) {\n            return;\n        }\n\n        String targetPath = selectedFile.getPath();\n        CommandExecutor executor = null;\n        if (SystemInfo.isMac) {\n            executor = new MacExecutor(targetPath);\n        }\n        else if (SystemInfo.isWindows) {\n            executor = new WinExecutor(targetPath);\n        }\n\n        if (executor == null) {\n            NotificationTool.notify(project, PLUGIN_NAME,\n                    \"Your operating system is not supported temporarily.\", NotificationType.ERROR);\n            return;\n        }\n\n        executor.openTerminal();\n    }\n}\n```\n\n## 编辑plugin.xml配置\n\n```xml\n<actions>\n    <!-- 插件基本信息 -->\n    <action id=\"com.bobz.action.OpenTerminalHereAction\" class=\"com.bobz.action.OpenTerminalHereAction\"\n            text=\"Open Terminal Here\" description=\"Open Terminal Here\">\n        <!-- 添加至目标分组 -->\n        <add-to-group group-id=\"ProjectViewPopupMenu\" anchor=\"after\" relative-to-action=\"RevealIn\"/>\n        <!-- 快捷键设置 -->\n        <keyboard-shortcut keymap=\"$default\" first-keystroke=\"ctrl alt T\"/>\n    </action>\n</actions>\n```\n\n\n# 参考引用\n- [IntelliJ Platform SDK](http://www.jetbrains.org/intellij/sdk/docs/welcome.html)\n\n","source":"_posts/2015/12/03/design-of-intellij-plugin-open-terminal-here.md","raw":"---\ntitle: 关于IntelliJ IDEA插件Open Terminal Here的设计思路\ndate: 2015-12-03 10:31:00\ncategories: IntelliJ IDEA\ntags:\n    - IntelliJ IDEA\n    - 插件\n---\n![IntelliJ Plugin Repo](/images/post/2015/12/03/intellij-plugin-banner.jpg)\n\nOpen Terminal Here是一款用于在终端中直接打开文件所在目录的IntelliJ插件，于2015年12月3日发布至[IntelliJ IDEA官方插件库](https://plugins.jetbrains.com/plugin/8081-open-terminal-here)，目前有3K+次下载，源代码托管于[GitHub](https://github.com/MrHunterZhao/OpenTerminalHere)。\n\n\n<!-- more -->\n\n# 痛点场景\n一直使用IntelliJ IDEA作为IDE，深爱它的智能，正如其名。然而，再完美的东西也有不完美的地方。\n\n作为命令行重度用户自然免不了在命令行进行操作，这种情况下就不得不逐级cd到某个工程文件所在目录，如果目录层级特别深，那酸爽不可思议。\n\n那么，问题来了，如何从命令行中一步切换到文件所在目录？答案就是：给IntelliJ写插件。\n\n\n# 实现思路\nIntelliJ IDEA开放了一套完整的OpenAPI，通过该OpenAPI几乎可以完成对IDEA各个组件的操作及扩展，非常方便。\n\n思路大致为：\n\n1. 首先通过OpenAPI获取工程文件的`VirtualFile`对象，VirtualFile是对文件系统的封装，包含了工程文件几乎所有信息，包括所在系统目录。\n2. 将文件系统目录封装成对应OS的自定义Command对象\n3. 通过`Runtime.getRuntime().exec(command)`调用系统命令行并切换至目标目录\n\n\n# 代码实现\n## 通过OpenAPI获取工程文件所在目录\n\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:31\n * Description: tool for file operation\n */\npublic class FileUtil {\n\n    /**\n     * determine the VirtualFile which selected in Project view\n     * @param project\n     * @return\n     */\n    public static VirtualFile getSelectedProjectFile(@NotNull Project project) {\n\n        AbstractProjectViewPane currentProjectViewPane = ProjectView.getInstance(project).getCurrentProjectViewPane();\n        if (currentProjectViewPane == null) {\n            return null;\n        }\n        DefaultMutableTreeNode node = currentProjectViewPane.getSelectedNode();\n        if (node == null) {\n            return null;\n        }\n        Object selected = null;\n        Object userObject = node.getUserObject();\n        if (userObject instanceof AbstractTreeNode) {\n            selected =  ((AbstractTreeNode)userObject).getValue();\n        }\n        else  if (userObject instanceof NodeDescriptor) {\n            selected =  ((NodeDescriptor)userObject).getElement();\n        }\n\n        if (selected == null) {\n            return null;\n        }\n\n        VirtualFile vf = null;\n        if (selected instanceof PsiDirectory) {\n            vf = ((PsiDirectory)selected).getVirtualFile();\n        }\n        else if (selected instanceof PsiElement) {\n            vf = ((PsiElement) selected).getContainingFile().getVirtualFile().getParent();\n        }\n        else {\n            // ignored\n        }\n\n        return vf;\n    }\n}\n\n```\n\n\n\n## 封装成Command对象\n\n1. Command对象\n\n```java\npublic class Command {\n\n    private String[] cmdArray;\n\n    private String[] envp;\n\n    private File dir;\n\n    public Command(String[] cmdArray) {\n        this.cmdArray = cmdArray;\n    }\n\n    public Command(String[] cmdArray, String[] envp, File dir) {\n        this.cmdArray = cmdArray;\n        this.envp = envp;\n        this.dir = dir;\n    }\n\n    ... 省略setters & getters\n}\n```\n\n2. Win平台命令执行器\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:43\n * Description: command executor for Windows Platform\n */\npublic class WinExecutor extends CommandExecutor {\n\nprivate static final String WIN_CMD = \"C:\\\\Windows\\\\System32\\\\cmd.exe\";\n\n    public WinExecutor(String targetPath) {\n        super.targetPath = targetPath;\n    }\n\n    @Override\n    public String getTerminalPath() {\n        return WIN_CMD;\n    }\n\n    @Override\n    public Command buildCommand() {\n\n        String terminalPath = this.getTerminalPath();\n        String[] cmdArr = {terminalPath, \"/k\", \"start\", \"cd\", getTargetPath()};\n\n        return new Command(cmdArr, null, new File(getTargetPath()));\n    }\n}\n```\n\n3. Mac平台命令执行器\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:42\n * Description: command executor for Mac Platform\n */\npublic class MacExecutor extends CommandExecutor {\n\n    private static final String MAC_TERMINAL = \"/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal\";\n    private static final String ITERM        = \"/Applications/iTerm.app/Contents/MacOS/iTerm\";\n    private static final String ITERM2       = \"/Applications/iTerm.app/Contents/MacOS/iTerm2\";\n\n    public MacExecutor(String targetPath) {\n        setTargetPath(targetPath);\n    }\n\n    @Override\n    public String getTerminalPath() {\n\n        if (isTerminalInstalled(ITERM)) {\n            return ITERM;\n        }\n        else if (isTerminalInstalled(ITERM2)) {\n            return ITERM2;\n        }\n\n        return MAC_TERMINAL;\n    }\n\n    @Override\n    Command buildCommand() {\n        String terminalPath = this.getTerminalPath();\n        String[] cmdArr = {terminalPath, getTargetPath()};\n\n        return new Command(cmdArr);\n    }\n}\n```\n\n\n## 调用系统命令行并切换至目标目录\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:41\n * Description: command execution template\n */\npublic abstract class CommandExecutor {\n\n    /**\n     * determine which terminal to be used\n     * @return\n     */\n    abstract String getTerminalPath();\n\n    /**\n     * build the Command object\n     * @return\n     */\n    abstract Command buildCommand();\n\n    /** path to open */\n    protected String targetPath;\n\n    /**\n     * determine if the specified terminal has been installed\n     * @param terminalPath\n     * @return\n     */\n    protected boolean isTerminalInstalled(String terminalPath) {\n        File terminal = new File(terminalPath);\n        return terminal.exists() && terminal.canExecute();\n    }\n\n    /**\n     * open the target path in terminal\n     */\n    public void openTerminal() {\n\n        Command cmd = this.buildCommand();\n\n        try {\n            Runtime.getRuntime().exec(cmd.getCmdArray(), cmd.getEnvp(), cmd.getDir());\n        } catch (IOException e) {\n            // ignored\n        }\n    };\n\n    public String getTargetPath() {\n        return targetPath;\n    }\n\n    public void setTargetPath(String targetPath) {\n        this.targetPath = targetPath;\n    }\n}\n```\n\n\n## 开放插件入口\n\n```java\n/**\n * Author: Hunter Zhao\n * Date:   12/2/15 18:31\n * Description: An IntelliJ plugin for opening current directory in terminal\n */\npublic class OpenTerminalHereAction extends AnAction {\n\n    public static final String PLUGIN_NAME = \"OpenTerminalHere\";\n\n    @Override\n    public void actionPerformed(AnActionEvent event) {\n\n        Project project = event.getProject();\n        if (project == null) {\n            return;\n        }\n\n        perform(project);\n\n    }\n\n    /**\n     * perform the action\n     * @param project\n     */\n    private void perform(@NotNull Project project) {\n\n        VirtualFile selectedFile = FileUtil.getSelectedProjectFile(project);\n        if (selectedFile == null) {\n            return;\n        }\n\n        String targetPath = selectedFile.getPath();\n        CommandExecutor executor = null;\n        if (SystemInfo.isMac) {\n            executor = new MacExecutor(targetPath);\n        }\n        else if (SystemInfo.isWindows) {\n            executor = new WinExecutor(targetPath);\n        }\n\n        if (executor == null) {\n            NotificationTool.notify(project, PLUGIN_NAME,\n                    \"Your operating system is not supported temporarily.\", NotificationType.ERROR);\n            return;\n        }\n\n        executor.openTerminal();\n    }\n}\n```\n\n## 编辑plugin.xml配置\n\n```xml\n<actions>\n    <!-- 插件基本信息 -->\n    <action id=\"com.bobz.action.OpenTerminalHereAction\" class=\"com.bobz.action.OpenTerminalHereAction\"\n            text=\"Open Terminal Here\" description=\"Open Terminal Here\">\n        <!-- 添加至目标分组 -->\n        <add-to-group group-id=\"ProjectViewPopupMenu\" anchor=\"after\" relative-to-action=\"RevealIn\"/>\n        <!-- 快捷键设置 -->\n        <keyboard-shortcut keymap=\"$default\" first-keystroke=\"ctrl alt T\"/>\n    </action>\n</actions>\n```\n\n\n# 参考引用\n- [IntelliJ Platform SDK](http://www.jetbrains.org/intellij/sdk/docs/welcome.html)\n\n","slug":"design-of-intellij-plugin-open-terminal-here","published":1,"updated":"2018-03-29T19:08:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1u000g2zs6zvwp1z36","content":"<p><img src=\"/images/post/2015/12/03/intellij-plugin-banner.jpg\" alt=\"IntelliJ Plugin Repo\"></p>\n<p>Open Terminal Here是一款用于在终端中直接打开文件所在目录的IntelliJ插件，于2015年12月3日发布至<a href=\"https://plugins.jetbrains.com/plugin/8081-open-terminal-here\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA官方插件库</a>，目前有3K+次下载，源代码托管于<a href=\"https://github.com/MrHunterZhao/OpenTerminalHere\" target=\"_blank\" rel=\"noopener\">GitHub</a>。</p>\n<a id=\"more\"></a>\n<h1 id=\"痛点场景\"><a href=\"#痛点场景\" class=\"headerlink\" title=\"痛点场景\"></a>痛点场景</h1><p>一直使用IntelliJ IDEA作为IDE，深爱它的智能，正如其名。然而，再完美的东西也有不完美的地方。</p>\n<p>作为命令行重度用户自然免不了在命令行进行操作，这种情况下就不得不逐级cd到某个工程文件所在目录，如果目录层级特别深，那酸爽不可思议。</p>\n<p>那么，问题来了，如何从命令行中一步切换到文件所在目录？答案就是：给IntelliJ写插件。</p>\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><p>IntelliJ IDEA开放了一套完整的OpenAPI，通过该OpenAPI几乎可以完成对IDEA各个组件的操作及扩展，非常方便。</p>\n<p>思路大致为：</p>\n<ol>\n<li>首先通过OpenAPI获取工程文件的<code>VirtualFile</code>对象，VirtualFile是对文件系统的封装，包含了工程文件几乎所有信息，包括所在系统目录。</li>\n<li>将文件系统目录封装成对应OS的自定义Command对象</li>\n<li>通过<code>Runtime.getRuntime().exec(command)</code>调用系统命令行并切换至目标目录</li>\n</ol>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><h2 id=\"通过OpenAPI获取工程文件所在目录\"><a href=\"#通过OpenAPI获取工程文件所在目录\" class=\"headerlink\" title=\"通过OpenAPI获取工程文件所在目录\"></a>通过OpenAPI获取工程文件所在目录</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:31</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: tool for file operation</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * determine the VirtualFile which selected in Project view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> project</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> VirtualFile <span class=\"title\">getSelectedProjectFile</span><span class=\"params\">(@NotNull Project project)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AbstractProjectViewPane currentProjectViewPane = ProjectView.getInstance(project).getCurrentProjectViewPane();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentProjectViewPane == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        DefaultMutableTreeNode node = currentProjectViewPane.getSelectedNode();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object selected = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Object userObject = node.getUserObject();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userObject <span class=\"keyword\">instanceof</span> AbstractTreeNode) &#123;</span><br><span class=\"line\">            selected =  ((AbstractTreeNode)userObject).getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (userObject <span class=\"keyword\">instanceof</span> NodeDescriptor) &#123;</span><br><span class=\"line\">            selected =  ((NodeDescriptor)userObject).getElement();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selected == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        VirtualFile vf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selected <span class=\"keyword\">instanceof</span> PsiDirectory) &#123;</span><br><span class=\"line\">            vf = ((PsiDirectory)selected).getVirtualFile();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selected <span class=\"keyword\">instanceof</span> PsiElement) &#123;</span><br><span class=\"line\">            vf = ((PsiElement) selected).getContainingFile().getVirtualFile().getParent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ignored</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> vf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"封装成Command对象\"><a href=\"#封装成Command对象\" class=\"headerlink\" title=\"封装成Command对象\"></a>封装成Command对象</h2><ol>\n<li>Command对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] cmdArray;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] envp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> File dir;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Command</span><span class=\"params\">(String[] cmdArray)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cmdArray = cmdArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Command</span><span class=\"params\">(String[] cmdArray, String[] envp, File dir)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cmdArray = cmdArray;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.envp = envp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dir = dir;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ... 省略setters &amp; getters</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Win平台命令执行器</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:43</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: command executor for Windows Platform</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WinExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">CommandExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String WIN_CMD = <span class=\"string\">\"C:\\\\Windows\\\\System32\\\\cmd.exe\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WinExecutor</span><span class=\"params\">(String targetPath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.targetPath = targetPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTerminalPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> WIN_CMD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Command <span class=\"title\">buildCommand</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String terminalPath = <span class=\"keyword\">this</span>.getTerminalPath();</span><br><span class=\"line\">        String[] cmdArr = &#123;terminalPath, <span class=\"string\">\"/k\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"cd\"</span>, getTargetPath()&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Command(cmdArr, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> File(getTargetPath()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Mac平台命令执行器</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:42</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: command executor for Mac Platform</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">CommandExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MAC_TERMINAL = <span class=\"string\">\"/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ITERM        = <span class=\"string\">\"/Applications/iTerm.app/Contents/MacOS/iTerm\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ITERM2       = <span class=\"string\">\"/Applications/iTerm.app/Contents/MacOS/iTerm2\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MacExecutor</span><span class=\"params\">(String targetPath)</span> </span>&#123;</span><br><span class=\"line\">        setTargetPath(targetPath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTerminalPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isTerminalInstalled(ITERM)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ITERM;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isTerminalInstalled(ITERM2)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ITERM2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> MAC_TERMINAL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Command <span class=\"title\">buildCommand</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String terminalPath = <span class=\"keyword\">this</span>.getTerminalPath();</span><br><span class=\"line\">        String[] cmdArr = &#123;terminalPath, getTargetPath()&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Command(cmdArr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"调用系统命令行并切换至目标目录\"><a href=\"#调用系统命令行并切换至目标目录\" class=\"headerlink\" title=\"调用系统命令行并切换至目标目录\"></a>调用系统命令行并切换至目标目录</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:41</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: command execution template</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * determine which terminal to be used</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> String <span class=\"title\">getTerminalPath</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * build the Command object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Command <span class=\"title\">buildCommand</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** path to open */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String targetPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * determine if the specified terminal has been installed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> terminalPath</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTerminalInstalled</span><span class=\"params\">(String terminalPath)</span> </span>&#123;</span><br><span class=\"line\">        File terminal = <span class=\"keyword\">new</span> File(terminalPath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> terminal.exists() &amp;&amp; terminal.canExecute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * open the target path in terminal</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openTerminal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Command cmd = <span class=\"keyword\">this</span>.buildCommand();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(cmd.getCmdArray(), cmd.getEnvp(), cmd.getDir());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ignored</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTargetPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> targetPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTargetPath</span><span class=\"params\">(String targetPath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.targetPath = targetPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开放插件入口\"><a href=\"#开放插件入口\" class=\"headerlink\" title=\"开放插件入口\"></a>开放插件入口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:31</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: An IntelliJ plugin for opening current directory in terminal</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenTerminalHereAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnAction</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PLUGIN_NAME = <span class=\"string\">\"OpenTerminalHere\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(AnActionEvent event)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Project project = event.getProject();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (project == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        perform(project);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * perform the action</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> project</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">perform</span><span class=\"params\">(@NotNull Project project)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        VirtualFile selectedFile = FileUtil.getSelectedProjectFile(project);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selectedFile == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String targetPath = selectedFile.getPath();</span><br><span class=\"line\">        CommandExecutor executor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SystemInfo.isMac) &#123;</span><br><span class=\"line\">            executor = <span class=\"keyword\">new</span> MacExecutor(targetPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (SystemInfo.isWindows) &#123;</span><br><span class=\"line\">            executor = <span class=\"keyword\">new</span> WinExecutor(targetPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            NotificationTool.notify(project, PLUGIN_NAME,</span><br><span class=\"line\">                    <span class=\"string\">\"Your operating system is not supported temporarily.\"</span>, NotificationType.ERROR);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        executor.openTerminal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑plugin-xml配置\"><a href=\"#编辑plugin-xml配置\" class=\"headerlink\" title=\"编辑plugin.xml配置\"></a>编辑plugin.xml配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">actions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 插件基本信息 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">id</span>=<span class=\"string\">\"com.bobz.action.OpenTerminalHereAction\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.bobz.action.OpenTerminalHereAction\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">text</span>=<span class=\"string\">\"Open Terminal Here\"</span> <span class=\"attr\">description</span>=<span class=\"string\">\"Open Terminal Here\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 添加至目标分组 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">add-to-group</span> <span class=\"attr\">group-id</span>=<span class=\"string\">\"ProjectViewPopupMenu\"</span> <span class=\"attr\">anchor</span>=<span class=\"string\">\"after\"</span> <span class=\"attr\">relative-to-action</span>=<span class=\"string\">\"RevealIn\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 快捷键设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">keyboard-shortcut</span> <span class=\"attr\">keymap</span>=<span class=\"string\">\"$default\"</span> <span class=\"attr\">first-keystroke</span>=<span class=\"string\">\"ctrl alt T\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">actions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考引用\"><a href=\"#参考引用\" class=\"headerlink\" title=\"参考引用\"></a>参考引用</h1><ul>\n<li><a href=\"http://www.jetbrains.org/intellij/sdk/docs/welcome.html\" target=\"_blank\" rel=\"noopener\">IntelliJ Platform SDK</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2015/12/03/intellij-plugin-banner.jpg\" alt=\"IntelliJ Plugin Repo\"></p>\n<p>Open Terminal Here是一款用于在终端中直接打开文件所在目录的IntelliJ插件，于2015年12月3日发布至<a href=\"https://plugins.jetbrains.com/plugin/8081-open-terminal-here\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA官方插件库</a>，目前有3K+次下载，源代码托管于<a href=\"https://github.com/MrHunterZhao/OpenTerminalHere\" target=\"_blank\" rel=\"noopener\">GitHub</a>。</p>","more":"<h1 id=\"痛点场景\"><a href=\"#痛点场景\" class=\"headerlink\" title=\"痛点场景\"></a>痛点场景</h1><p>一直使用IntelliJ IDEA作为IDE，深爱它的智能，正如其名。然而，再完美的东西也有不完美的地方。</p>\n<p>作为命令行重度用户自然免不了在命令行进行操作，这种情况下就不得不逐级cd到某个工程文件所在目录，如果目录层级特别深，那酸爽不可思议。</p>\n<p>那么，问题来了，如何从命令行中一步切换到文件所在目录？答案就是：给IntelliJ写插件。</p>\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><p>IntelliJ IDEA开放了一套完整的OpenAPI，通过该OpenAPI几乎可以完成对IDEA各个组件的操作及扩展，非常方便。</p>\n<p>思路大致为：</p>\n<ol>\n<li>首先通过OpenAPI获取工程文件的<code>VirtualFile</code>对象，VirtualFile是对文件系统的封装，包含了工程文件几乎所有信息，包括所在系统目录。</li>\n<li>将文件系统目录封装成对应OS的自定义Command对象</li>\n<li>通过<code>Runtime.getRuntime().exec(command)</code>调用系统命令行并切换至目标目录</li>\n</ol>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><h2 id=\"通过OpenAPI获取工程文件所在目录\"><a href=\"#通过OpenAPI获取工程文件所在目录\" class=\"headerlink\" title=\"通过OpenAPI获取工程文件所在目录\"></a>通过OpenAPI获取工程文件所在目录</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:31</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: tool for file operation</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * determine the VirtualFile which selected in Project view</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> project</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> VirtualFile <span class=\"title\">getSelectedProjectFile</span><span class=\"params\">(@NotNull Project project)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        AbstractProjectViewPane currentProjectViewPane = ProjectView.getInstance(project).getCurrentProjectViewPane();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentProjectViewPane == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        DefaultMutableTreeNode node = currentProjectViewPane.getSelectedNode();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object selected = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Object userObject = node.getUserObject();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userObject <span class=\"keyword\">instanceof</span> AbstractTreeNode) &#123;</span><br><span class=\"line\">            selected =  ((AbstractTreeNode)userObject).getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (userObject <span class=\"keyword\">instanceof</span> NodeDescriptor) &#123;</span><br><span class=\"line\">            selected =  ((NodeDescriptor)userObject).getElement();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selected == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        VirtualFile vf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selected <span class=\"keyword\">instanceof</span> PsiDirectory) &#123;</span><br><span class=\"line\">            vf = ((PsiDirectory)selected).getVirtualFile();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (selected <span class=\"keyword\">instanceof</span> PsiElement) &#123;</span><br><span class=\"line\">            vf = ((PsiElement) selected).getContainingFile().getVirtualFile().getParent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ignored</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> vf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"封装成Command对象\"><a href=\"#封装成Command对象\" class=\"headerlink\" title=\"封装成Command对象\"></a>封装成Command对象</h2><ol>\n<li>Command对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] cmdArray;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] envp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> File dir;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Command</span><span class=\"params\">(String[] cmdArray)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cmdArray = cmdArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Command</span><span class=\"params\">(String[] cmdArray, String[] envp, File dir)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cmdArray = cmdArray;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.envp = envp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dir = dir;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ... 省略setters &amp; getters</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Win平台命令执行器</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:43</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: command executor for Windows Platform</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WinExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">CommandExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String WIN_CMD = <span class=\"string\">\"C:\\\\Windows\\\\System32\\\\cmd.exe\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WinExecutor</span><span class=\"params\">(String targetPath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.targetPath = targetPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTerminalPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> WIN_CMD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Command <span class=\"title\">buildCommand</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String terminalPath = <span class=\"keyword\">this</span>.getTerminalPath();</span><br><span class=\"line\">        String[] cmdArr = &#123;terminalPath, <span class=\"string\">\"/k\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"cd\"</span>, getTargetPath()&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Command(cmdArr, <span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> File(getTargetPath()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Mac平台命令执行器</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:42</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: command executor for Mac Platform</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">CommandExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MAC_TERMINAL = <span class=\"string\">\"/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ITERM        = <span class=\"string\">\"/Applications/iTerm.app/Contents/MacOS/iTerm\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ITERM2       = <span class=\"string\">\"/Applications/iTerm.app/Contents/MacOS/iTerm2\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MacExecutor</span><span class=\"params\">(String targetPath)</span> </span>&#123;</span><br><span class=\"line\">        setTargetPath(targetPath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTerminalPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isTerminalInstalled(ITERM)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ITERM;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isTerminalInstalled(ITERM2)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ITERM2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> MAC_TERMINAL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Command <span class=\"title\">buildCommand</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String terminalPath = <span class=\"keyword\">this</span>.getTerminalPath();</span><br><span class=\"line\">        String[] cmdArr = &#123;terminalPath, getTargetPath()&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Command(cmdArr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"调用系统命令行并切换至目标目录\"><a href=\"#调用系统命令行并切换至目标目录\" class=\"headerlink\" title=\"调用系统命令行并切换至目标目录\"></a>调用系统命令行并切换至目标目录</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:41</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: command execution template</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandExecutor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * determine which terminal to be used</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> String <span class=\"title\">getTerminalPath</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * build the Command object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Command <span class=\"title\">buildCommand</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** path to open */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String targetPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * determine if the specified terminal has been installed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> terminalPath</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTerminalInstalled</span><span class=\"params\">(String terminalPath)</span> </span>&#123;</span><br><span class=\"line\">        File terminal = <span class=\"keyword\">new</span> File(terminalPath);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> terminal.exists() &amp;&amp; terminal.canExecute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * open the target path in terminal</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openTerminal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Command cmd = <span class=\"keyword\">this</span>.buildCommand();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(cmd.getCmdArray(), cmd.getEnvp(), cmd.getDir());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ignored</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTargetPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> targetPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTargetPath</span><span class=\"params\">(String targetPath)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.targetPath = targetPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开放插件入口\"><a href=\"#开放插件入口\" class=\"headerlink\" title=\"开放插件入口\"></a>开放插件入口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date:   12/2/15 18:31</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: An IntelliJ plugin for opening current directory in terminal</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenTerminalHereAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnAction</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PLUGIN_NAME = <span class=\"string\">\"OpenTerminalHere\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(AnActionEvent event)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Project project = event.getProject();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (project == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        perform(project);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * perform the action</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> project</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">perform</span><span class=\"params\">(@NotNull Project project)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        VirtualFile selectedFile = FileUtil.getSelectedProjectFile(project);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (selectedFile == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String targetPath = selectedFile.getPath();</span><br><span class=\"line\">        CommandExecutor executor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SystemInfo.isMac) &#123;</span><br><span class=\"line\">            executor = <span class=\"keyword\">new</span> MacExecutor(targetPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (SystemInfo.isWindows) &#123;</span><br><span class=\"line\">            executor = <span class=\"keyword\">new</span> WinExecutor(targetPath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            NotificationTool.notify(project, PLUGIN_NAME,</span><br><span class=\"line\">                    <span class=\"string\">\"Your operating system is not supported temporarily.\"</span>, NotificationType.ERROR);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        executor.openTerminal();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑plugin-xml配置\"><a href=\"#编辑plugin-xml配置\" class=\"headerlink\" title=\"编辑plugin.xml配置\"></a>编辑plugin.xml配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">actions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 插件基本信息 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">id</span>=<span class=\"string\">\"com.bobz.action.OpenTerminalHereAction\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.bobz.action.OpenTerminalHereAction\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">text</span>=<span class=\"string\">\"Open Terminal Here\"</span> <span class=\"attr\">description</span>=<span class=\"string\">\"Open Terminal Here\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 添加至目标分组 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">add-to-group</span> <span class=\"attr\">group-id</span>=<span class=\"string\">\"ProjectViewPopupMenu\"</span> <span class=\"attr\">anchor</span>=<span class=\"string\">\"after\"</span> <span class=\"attr\">relative-to-action</span>=<span class=\"string\">\"RevealIn\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 快捷键设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">keyboard-shortcut</span> <span class=\"attr\">keymap</span>=<span class=\"string\">\"$default\"</span> <span class=\"attr\">first-keystroke</span>=<span class=\"string\">\"ctrl alt T\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">actions</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考引用\"><a href=\"#参考引用\" class=\"headerlink\" title=\"参考引用\"></a>参考引用</h1><ul>\n<li><a href=\"http://www.jetbrains.org/intellij/sdk/docs/welcome.html\" target=\"_blank\" rel=\"noopener\">IntelliJ Platform SDK</a></li>\n</ul>"},{"title":"关于MyBatis通用代码生成器CoffeeMaker的设计思路","date":"2017-07-21T07:30:02.000Z","_content":"\nCoffeeMaker是一款经过良好设计的代码生成器，可快速生成通用CRUD代码模板，使用方便且易于扩展。于2017年7月开发完成，源代码托管于[GitHub](https://github.com/MrHunterZhao/CoffeeMaker)仓库。\n\n<!-- more -->\n# 引言\n在整个软件开发过程中有一大部分内容是相当有共性的，比如模型对象、配置文件、基本CRUD操作方法等等，\n\n**程序员是用来思考问题的，不是用来执行重复任务的**，所以那些重复性的工作交给机器或工具去做就好了。\n\n而开源社区里不乏一些代码生成器，但生成代码的格式、风格往往并不符合团队开发规范，去修改的话还得先去去读懂别人代码，为何不写一个出来沉淀为自己团队的产物呢。\n\n# 设计\n1. 通过JDBC读取DB元数据封装成数据对象。\n2. 使用`DefinitionConverter`转换成模型文件定义对象。\n3. 将模型文件对象封装成所需文件封装器`FileWrapper`。\n4. 使用`FileParser`将`FileWrapper`渲染至对应的模板文件。\n5. 输出最终目标文件。\n\n# 流程\n```\n                              < Workflow diagram of CoffeeMaker >\n                                       \n+----------+  JDBC     +---------------------+    TableMetadata      +------------------------+\n|          | ------>   |                     |   ---------------->   |  DefinitionConverter   |\n| Database |           |  MetadataProvider   |                       +------------------------+\n|          |           |                     |                         |\n|          |           |                     |                         | FileDefinition\n+----------+           +---------------------+                         v\n                                                                   +- - - - - - - - - - - - - - +\n                                                                   ' Various of file wrappers   '\n                                                                   '                            '\n                                                                   ' +------------------------+ '\n                                                                   ' |      FileWrapper       | '\n                                                                   ' +------------------------+ '\n                                                                   '                            '\n                                                                   +- - - - - - - - - - - - - - +\n                                                                       |\n                                                                       |\n                                                                       |\n                     +- - - - - - - - - - - - -+                       |\n                     ' OUTPUT:                 '                       |\n                     '                         '                       |\n                     ' XxxEntity.java          '                       |\n                     ' XxxMapper.xml           '                       |\n                     ' XxxDao.java             '                       |\n                     ' XxxService.java         '                       |\n                     ' XxxServiceImpl.java     '                       |\n                     ' XxxController.java      '                       |\n                     ' XxxVo.java              '                       |\n                     '                         '                       v\n                     ' +---------------------+ '  Parse & export     +------------------------+\n                     ' | Ultimate Code Files | ' <----------------   |                        |\n                     ' +---------------------+ '                     |       FileParser       |\n                     '                         '                     |                        |\n                     +- - - - - - - - - - - - -+                     +------------------------+\n                     \n```\n\n\n# 配置\n1. 配置数据源文件`src/main/resource/config.properties`\n2. 配置代码生成规则\n\n```java\nConfiguration configuration = new Configuration();\n        configuration.setTableName(\"t_user\")\n            .setTablePrefix(\"\")\n            .setPackageName(\"com.workholiday\")\n            .setPagerPackageName(\"com.workholiday.base.core.page\")\n            .setWithPager(true)\n            .setOutputPath(\"/Users/hunterzhao/tmp/output\");\n```\n\n# 执行\n通过`CoffeeMakerLauncher`类的main方法执行代码生成器\n\n\n# 输出\n生成的代码模板如下：\n- Entity文件\n- DAO文件\n- MyBatis mapper文件\n- Service文件\n- Service实现类\n- VO文件\n- Controller文件\n\n\n# 扩展\n如果需要定制化CoffeeMaker，可以通过修改（新增）`FileWrapper`和`FileTemplate`来轻松实现。\n","source":"_posts/2017/07/21/design-of-universal-code-generator-coffee-maker.md","raw":"---\ntitle: 关于MyBatis通用代码生成器CoffeeMaker的设计思路\ndate: 2017-07-21 15:30:02\ncategories: MyBatis\ntags:\n    - MyBatis\n---\n\nCoffeeMaker是一款经过良好设计的代码生成器，可快速生成通用CRUD代码模板，使用方便且易于扩展。于2017年7月开发完成，源代码托管于[GitHub](https://github.com/MrHunterZhao/CoffeeMaker)仓库。\n\n<!-- more -->\n# 引言\n在整个软件开发过程中有一大部分内容是相当有共性的，比如模型对象、配置文件、基本CRUD操作方法等等，\n\n**程序员是用来思考问题的，不是用来执行重复任务的**，所以那些重复性的工作交给机器或工具去做就好了。\n\n而开源社区里不乏一些代码生成器，但生成代码的格式、风格往往并不符合团队开发规范，去修改的话还得先去去读懂别人代码，为何不写一个出来沉淀为自己团队的产物呢。\n\n# 设计\n1. 通过JDBC读取DB元数据封装成数据对象。\n2. 使用`DefinitionConverter`转换成模型文件定义对象。\n3. 将模型文件对象封装成所需文件封装器`FileWrapper`。\n4. 使用`FileParser`将`FileWrapper`渲染至对应的模板文件。\n5. 输出最终目标文件。\n\n# 流程\n```\n                              < Workflow diagram of CoffeeMaker >\n                                       \n+----------+  JDBC     +---------------------+    TableMetadata      +------------------------+\n|          | ------>   |                     |   ---------------->   |  DefinitionConverter   |\n| Database |           |  MetadataProvider   |                       +------------------------+\n|          |           |                     |                         |\n|          |           |                     |                         | FileDefinition\n+----------+           +---------------------+                         v\n                                                                   +- - - - - - - - - - - - - - +\n                                                                   ' Various of file wrappers   '\n                                                                   '                            '\n                                                                   ' +------------------------+ '\n                                                                   ' |      FileWrapper       | '\n                                                                   ' +------------------------+ '\n                                                                   '                            '\n                                                                   +- - - - - - - - - - - - - - +\n                                                                       |\n                                                                       |\n                                                                       |\n                     +- - - - - - - - - - - - -+                       |\n                     ' OUTPUT:                 '                       |\n                     '                         '                       |\n                     ' XxxEntity.java          '                       |\n                     ' XxxMapper.xml           '                       |\n                     ' XxxDao.java             '                       |\n                     ' XxxService.java         '                       |\n                     ' XxxServiceImpl.java     '                       |\n                     ' XxxController.java      '                       |\n                     ' XxxVo.java              '                       |\n                     '                         '                       v\n                     ' +---------------------+ '  Parse & export     +------------------------+\n                     ' | Ultimate Code Files | ' <----------------   |                        |\n                     ' +---------------------+ '                     |       FileParser       |\n                     '                         '                     |                        |\n                     +- - - - - - - - - - - - -+                     +------------------------+\n                     \n```\n\n\n# 配置\n1. 配置数据源文件`src/main/resource/config.properties`\n2. 配置代码生成规则\n\n```java\nConfiguration configuration = new Configuration();\n        configuration.setTableName(\"t_user\")\n            .setTablePrefix(\"\")\n            .setPackageName(\"com.workholiday\")\n            .setPagerPackageName(\"com.workholiday.base.core.page\")\n            .setWithPager(true)\n            .setOutputPath(\"/Users/hunterzhao/tmp/output\");\n```\n\n# 执行\n通过`CoffeeMakerLauncher`类的main方法执行代码生成器\n\n\n# 输出\n生成的代码模板如下：\n- Entity文件\n- DAO文件\n- MyBatis mapper文件\n- Service文件\n- Service实现类\n- VO文件\n- Controller文件\n\n\n# 扩展\n如果需要定制化CoffeeMaker，可以通过修改（新增）`FileWrapper`和`FileTemplate`来轻松实现。\n","slug":"design-of-universal-code-generator-coffee-maker","published":1,"updated":"2018-04-29T19:47:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1v000j2zs6asxh222f","content":"<p>CoffeeMaker是一款经过良好设计的代码生成器，可快速生成通用CRUD代码模板，使用方便且易于扩展。于2017年7月开发完成，源代码托管于<a href=\"https://github.com/MrHunterZhao/CoffeeMaker\" target=\"_blank\" rel=\"noopener\">GitHub</a>仓库。</p>\n<a id=\"more\"></a>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在整个软件开发过程中有一大部分内容是相当有共性的，比如模型对象、配置文件、基本CRUD操作方法等等，</p>\n<p><strong>程序员是用来思考问题的，不是用来执行重复任务的</strong>，所以那些重复性的工作交给机器或工具去做就好了。</p>\n<p>而开源社区里不乏一些代码生成器，但生成代码的格式、风格往往并不符合团队开发规范，去修改的话还得先去去读懂别人代码，为何不写一个出来沉淀为自己团队的产物呢。</p>\n<h1 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h1><ol>\n<li>通过JDBC读取DB元数据封装成数据对象。</li>\n<li>使用<code>DefinitionConverter</code>转换成模型文件定义对象。</li>\n<li>将模型文件对象封装成所需文件封装器<code>FileWrapper</code>。</li>\n<li>使用<code>FileParser</code>将<code>FileWrapper</code>渲染至对应的模板文件。</li>\n<li>输出最终目标文件。</li>\n</ol>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                              &lt; Workflow diagram of CoffeeMaker &gt;</span><br><span class=\"line\">                                       </span><br><span class=\"line\">+----------+  JDBC     +---------------------+    TableMetadata      +------------------------+</span><br><span class=\"line\">|          | ------&gt;   |                     |   ----------------&gt;   |  DefinitionConverter   |</span><br><span class=\"line\">| Database |           |  MetadataProvider   |                       +------------------------+</span><br><span class=\"line\">|          |           |                     |                         |</span><br><span class=\"line\">|          |           |                     |                         | FileDefinition</span><br><span class=\"line\">+----------+           +---------------------+                         v</span><br><span class=\"line\">                                                                   +- - - - - - - - - - - - - - +</span><br><span class=\"line\">                                                                   &apos; Various of file wrappers   &apos;</span><br><span class=\"line\">                                                                   &apos;                            &apos;</span><br><span class=\"line\">                                                                   &apos; +------------------------+ &apos;</span><br><span class=\"line\">                                                                   &apos; |      FileWrapper       | &apos;</span><br><span class=\"line\">                                                                   &apos; +------------------------+ &apos;</span><br><span class=\"line\">                                                                   &apos;                            &apos;</span><br><span class=\"line\">                                                                   +- - - - - - - - - - - - - - +</span><br><span class=\"line\">                                                                       |</span><br><span class=\"line\">                                                                       |</span><br><span class=\"line\">                                                                       |</span><br><span class=\"line\">                     +- - - - - - - - - - - - -+                       |</span><br><span class=\"line\">                     &apos; OUTPUT:                 &apos;                       |</span><br><span class=\"line\">                     &apos;                         &apos;                       |</span><br><span class=\"line\">                     &apos; XxxEntity.java          &apos;                       |</span><br><span class=\"line\">                     &apos; XxxMapper.xml           &apos;                       |</span><br><span class=\"line\">                     &apos; XxxDao.java             &apos;                       |</span><br><span class=\"line\">                     &apos; XxxService.java         &apos;                       |</span><br><span class=\"line\">                     &apos; XxxServiceImpl.java     &apos;                       |</span><br><span class=\"line\">                     &apos; XxxController.java      &apos;                       |</span><br><span class=\"line\">                     &apos; XxxVo.java              &apos;                       |</span><br><span class=\"line\">                     &apos;                         &apos;                       v</span><br><span class=\"line\">                     &apos; +---------------------+ &apos;  Parse &amp; export     +------------------------+</span><br><span class=\"line\">                     &apos; | Ultimate Code Files | &apos; &lt;----------------   |                        |</span><br><span class=\"line\">                     &apos; +---------------------+ &apos;                     |       FileParser       |</span><br><span class=\"line\">                     &apos;                         &apos;                     |                        |</span><br><span class=\"line\">                     +- - - - - - - - - - - - -+                     +------------------------+</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li>配置数据源文件<code>src/main/resource/config.properties</code></li>\n<li>配置代码生成规则</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration configuration = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">        configuration.setTableName(<span class=\"string\">\"t_user\"</span>)</span><br><span class=\"line\">            .setTablePrefix(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">            .setPackageName(<span class=\"string\">\"com.workholiday\"</span>)</span><br><span class=\"line\">            .setPagerPackageName(<span class=\"string\">\"com.workholiday.base.core.page\"</span>)</span><br><span class=\"line\">            .setWithPager(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .setOutputPath(<span class=\"string\">\"/Users/hunterzhao/tmp/output\"</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h1><p>通过<code>CoffeeMakerLauncher</code>类的main方法执行代码生成器</p>\n<h1 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h1><p>生成的代码模板如下：</p>\n<ul>\n<li>Entity文件</li>\n<li>DAO文件</li>\n<li>MyBatis mapper文件</li>\n<li>Service文件</li>\n<li>Service实现类</li>\n<li>VO文件</li>\n<li>Controller文件</li>\n</ul>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>如果需要定制化CoffeeMaker，可以通过修改（新增）<code>FileWrapper</code>和<code>FileTemplate</code>来轻松实现。</p>\n","site":{"data":{}},"excerpt":"<p>CoffeeMaker是一款经过良好设计的代码生成器，可快速生成通用CRUD代码模板，使用方便且易于扩展。于2017年7月开发完成，源代码托管于<a href=\"https://github.com/MrHunterZhao/CoffeeMaker\" target=\"_blank\" rel=\"noopener\">GitHub</a>仓库。</p>","more":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在整个软件开发过程中有一大部分内容是相当有共性的，比如模型对象、配置文件、基本CRUD操作方法等等，</p>\n<p><strong>程序员是用来思考问题的，不是用来执行重复任务的</strong>，所以那些重复性的工作交给机器或工具去做就好了。</p>\n<p>而开源社区里不乏一些代码生成器，但生成代码的格式、风格往往并不符合团队开发规范，去修改的话还得先去去读懂别人代码，为何不写一个出来沉淀为自己团队的产物呢。</p>\n<h1 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h1><ol>\n<li>通过JDBC读取DB元数据封装成数据对象。</li>\n<li>使用<code>DefinitionConverter</code>转换成模型文件定义对象。</li>\n<li>将模型文件对象封装成所需文件封装器<code>FileWrapper</code>。</li>\n<li>使用<code>FileParser</code>将<code>FileWrapper</code>渲染至对应的模板文件。</li>\n<li>输出最终目标文件。</li>\n</ol>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                              &lt; Workflow diagram of CoffeeMaker &gt;</span><br><span class=\"line\">                                       </span><br><span class=\"line\">+----------+  JDBC     +---------------------+    TableMetadata      +------------------------+</span><br><span class=\"line\">|          | ------&gt;   |                     |   ----------------&gt;   |  DefinitionConverter   |</span><br><span class=\"line\">| Database |           |  MetadataProvider   |                       +------------------------+</span><br><span class=\"line\">|          |           |                     |                         |</span><br><span class=\"line\">|          |           |                     |                         | FileDefinition</span><br><span class=\"line\">+----------+           +---------------------+                         v</span><br><span class=\"line\">                                                                   +- - - - - - - - - - - - - - +</span><br><span class=\"line\">                                                                   &apos; Various of file wrappers   &apos;</span><br><span class=\"line\">                                                                   &apos;                            &apos;</span><br><span class=\"line\">                                                                   &apos; +------------------------+ &apos;</span><br><span class=\"line\">                                                                   &apos; |      FileWrapper       | &apos;</span><br><span class=\"line\">                                                                   &apos; +------------------------+ &apos;</span><br><span class=\"line\">                                                                   &apos;                            &apos;</span><br><span class=\"line\">                                                                   +- - - - - - - - - - - - - - +</span><br><span class=\"line\">                                                                       |</span><br><span class=\"line\">                                                                       |</span><br><span class=\"line\">                                                                       |</span><br><span class=\"line\">                     +- - - - - - - - - - - - -+                       |</span><br><span class=\"line\">                     &apos; OUTPUT:                 &apos;                       |</span><br><span class=\"line\">                     &apos;                         &apos;                       |</span><br><span class=\"line\">                     &apos; XxxEntity.java          &apos;                       |</span><br><span class=\"line\">                     &apos; XxxMapper.xml           &apos;                       |</span><br><span class=\"line\">                     &apos; XxxDao.java             &apos;                       |</span><br><span class=\"line\">                     &apos; XxxService.java         &apos;                       |</span><br><span class=\"line\">                     &apos; XxxServiceImpl.java     &apos;                       |</span><br><span class=\"line\">                     &apos; XxxController.java      &apos;                       |</span><br><span class=\"line\">                     &apos; XxxVo.java              &apos;                       |</span><br><span class=\"line\">                     &apos;                         &apos;                       v</span><br><span class=\"line\">                     &apos; +---------------------+ &apos;  Parse &amp; export     +------------------------+</span><br><span class=\"line\">                     &apos; | Ultimate Code Files | &apos; &lt;----------------   |                        |</span><br><span class=\"line\">                     &apos; +---------------------+ &apos;                     |       FileParser       |</span><br><span class=\"line\">                     &apos;                         &apos;                     |                        |</span><br><span class=\"line\">                     +- - - - - - - - - - - - -+                     +------------------------+</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li>配置数据源文件<code>src/main/resource/config.properties</code></li>\n<li>配置代码生成规则</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Configuration configuration = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">        configuration.setTableName(<span class=\"string\">\"t_user\"</span>)</span><br><span class=\"line\">            .setTablePrefix(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">            .setPackageName(<span class=\"string\">\"com.workholiday\"</span>)</span><br><span class=\"line\">            .setPagerPackageName(<span class=\"string\">\"com.workholiday.base.core.page\"</span>)</span><br><span class=\"line\">            .setWithPager(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .setOutputPath(<span class=\"string\">\"/Users/hunterzhao/tmp/output\"</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h1><p>通过<code>CoffeeMakerLauncher</code>类的main方法执行代码生成器</p>\n<h1 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h1><p>生成的代码模板如下：</p>\n<ul>\n<li>Entity文件</li>\n<li>DAO文件</li>\n<li>MyBatis mapper文件</li>\n<li>Service文件</li>\n<li>Service实现类</li>\n<li>VO文件</li>\n<li>Controller文件</li>\n</ul>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>如果需要定制化CoffeeMaker，可以通过修改（新增）<code>FileWrapper</code>和<code>FileTemplate</code>来轻松实现。</p>"},{"title":"【Hotspot源码分析】从HotSpot源码角度深入分析Java程序启动过程-初始化","date":"2014-11-30T20:20:08.000Z","_content":"\n接上篇文章从Hotpost源码角度深入分析Java程序启动过程-创建 ，本文将继续介绍JVM启动过程的初始化部分。\n\n在上篇文章中在执行LoadJavaVM方法的时候将libjvm.so内的方法`JNI_CreateJavaVM`和`JNI_GetDefaultJavaVMInitArgs`符号引用挂载到了结构体`InvocationFunctions`上，并且在执行InitializeJVM方法的时候进行了调用。\n\n这里执行了JNI调用`JNI_CreateJavaVM`，文件位于`hotspot/src/share/vm/prims/jni.cpp`。方法内容如下：\n\n```c\n_JNI_IMPORT_OR_EXPORT_ jint JNICALL JNI_CreateJavaVM(JavaVM **vm, void **penv, void *args) {\n\n   // 略去部分非重要内容\n\n  /**\n   * Certain errors during initialization are recoverable and do not\n   * prevent this method from being called again at a later time\n   * (perhaps with different arguments).  However, at a certain\n   * point during initialization if an error occurs we cannot allow\n   * this function to be called again (or it will crash).  In those\n   * situations, the 'canTryAgain' flag is set to false, which atomically\n   * sets safe_to_recreate_vm to 1, such that any new call to\n   * JNI_CreateJavaVM will immediately fail using the above logic.\n   */\n  bool can_try_again = true;\n  //========================================\n  // 通过Threads模块初始化VM并创建VM线程\n  //========================================\n  result = Threads::create_vm((JavaVMInitArgs*) args, &can_try_again);\n  if (result == JNI_OK) {\n    JavaThread *thread = JavaThread::current();\n    /* thread is thread_in_vm here */\n    *vm = (JavaVM *)(&main_vm);\n    *(JNIEnv**)penv = thread->jni_environment();\n\n    // Tracks the time application was running before GC\n    RuntimeService::record_application_start();\n\n    // Notify JVMTI\n    if (JvmtiExport::should_post_thread_life()) {\n       JvmtiExport::post_thread_start(thread);\n    }\n\n    EventThreadStart event;\n    if (event.should_commit()) {\n      event.set_javalangthread(java_lang_Thread::thread_id(thread->threadObj()));\n      event.commit();\n    }\n\n    // 略去部分内容\n\n  return result;\n}\n```\n\n<!-- more -->\n\n这里调用了`hotspot/src/share/vm/runtime/thread.cpp`的`create_vm`方法：\n\n```c\njint Threads::create_vm(JavaVMInitArgs* args, bool* canTryAgain) {\n\n  extern void JDK_Version_init();\n\n  // Check version\n  if (!is_supported_jni_version(args->version)) return JNI_EVERSION;\n\n  // Initialize the output stream module\n  // 初始化输出流\n  ostream_init();\n\n  // Process java launcher properties.\n  // 处理Java启动参数，如-Dsun.java.launcher*\n  Arguments::process_sun_java_launcher_properties(args);\n\n  // Initialize the os module before using TLS\n  // 初始化操作系统模块，如页大小，处理器数量，系统时钟等\n  os::init();\n\n  // Initialize system properties.\n  // 初始化系统属性，其中分为【可读属性】和【可读写属性】\n  // 可读属性：\n  // java.vm.specification.name\n  // java.vm.version\n  // java.vm.name\n  // java.vm.info\n  // 可读写属性：\n  // java.ext.dirs\n  // java.endorsed.dirs\n  // sun.boot.library.path\n  // java.library.path\n  // java.home\n  // sun.boot.class.path\n  // java.class.path\n  Arguments::init_system_properties();\n\n  // So that JDK version can be used as a discrimintor when parsing arguments\n  JDK_Version_init();\n\n  // Update/Initialize System properties after JDK version number is known\n  // 设置java.vm.specification.vendor属性（1.6之前是Sun Microsystems Inc. 1.7之后是Oracle Corporation）\n  // 设置java.vm.specification.version和java.vm.vendor属性\n  Arguments::init_version_specific_system_properties();\n\n  // Parse arguments\n  // 解析启动参数，如-XX:Flags=、-XX:+PrintVMOptions、-XX:+PrintFlagsInitial etc.\n  jint parse_result = Arguments::parse(args);\n  if (parse_result != JNI_OK) return parse_result;\n\n  if (PauseAtStartup) {\n    os::pause();\n  }\n\n#ifndef USDT2\n  HS_DTRACE_PROBE(hotspot, vm__init__begin);\n#else /* USDT2 */\n  HOTSPOT_VM_INIT_BEGIN();\n#endif /* USDT2 */\n\n  // Record VM creation timing statistics\n  TraceVmCreationTime create_vm_timer;\n  create_vm_timer.start();\n\n  // Timing (must come after argument parsing)\n  TraceTime timer(\"Create VM\", TraceStartupTime);\n\n  // Initialize the os module after parsing the args\n  jint os_init_2_result = os::init_2();\n  if (os_init_2_result != JNI_OK) return os_init_2_result;\n\n  // intialize TLS\n  ThreadLocalStorage::init();\n\n  // Bootstrap native memory tracking, so it can start recording memory\n  // activities before worker thread is started. This is the first phase\n  // of bootstrapping, VM is currently running in single-thread mode.\n  MemTracker::bootstrap_single_thread();\n\n  // Initialize output stream logging\n  // 初始化GC日志输出流，用来处理-Xloggc参数\n  ostream_init_log();\n\n  // Convert -Xrun to -agentlib: if there is no JVM_OnLoad\n  // Must be before create_vm_init_agents()\n  if (Arguments::init_libraries_at_startup()) {\n    convert_vm_init_libraries_to_agents();\n  }\n\n  // Launch -agentlib/-agentpath and converted -Xrun agents\n  // 加载agent库\n  if (Arguments::init_agents_at_startup()) {\n    create_vm_init_agents();\n  }\n\n  // Initialize Threads state\n  _thread_list = NULL;\n  _number_of_threads = 0;\n  _number_of_non_daemon_threads = 0;\n\n  // Initialize global data structures and create system classes in heap\n  // 初始化全局数据数据结构及系统类，包括：\n  // 初始化Java基础类型\n  // 初始化时间队列\n  // 初始化锁\n  // 初始化chunkpool\n  // 初始化性能数据统计模块\n  vm_init_globals();\n\n  // Attach the main thread to this os thread\n  JavaThread* main_thread = new JavaThread();\n  main_thread->set_thread_state(_thread_in_vm);\n  main_thread->record_stack_base_and_size();\n  main_thread->initialize_thread_local_storage();\n\n  main_thread->set_active_handles(JNIHandleBlock::allocate_block());\n\n  if (!main_thread->set_as_starting_thread()) {\n    vm_shutdown_during_initialization(\n      \"Failed necessary internal allocation. Out of swap space\");\n    delete main_thread;\n    *canTryAgain = false; // don't let caller call JNI_CreateJavaVM again\n    return JNI_ENOMEM;\n  }\n\n  // Enable guard page *after* os::create_main_thread(), otherwise it would\n  // crash Linux VM, see notes in os_linux.cpp.\n  main_thread->create_stack_guard_pages();\n\n  // Initialize Java-Level synchronization subsystem\n  ObjectMonitor::Initialize() ;\n\n  // Second phase of bootstrapping, VM is about entering multi-thread mode\n  MemTracker::bootstrap_multi_thread();\n\n  // Initialize global modules\n  // ========================================\n  // IMPORTANT!!! 初始化全局模块\n  // ========================================\n  jint status = init_globals();\n  if (status != JNI_OK) {\n    delete main_thread;\n    *canTryAgain = false; // don't let caller call JNI_CreateJavaVM again\n    return status;\n  }\n\n  // Should be done after the heap is fully created\n  main_thread->cache_global_variables();\n\n  HandleMark hm;\n\n  { MutexLocker mu(Threads_lock);\n    Threads::add(main_thread);\n  }\n\n  // Any JVMTI raw monitors entered in onload will transition into\n  // real raw monitor. VM is setup enough here for raw monitor enter.\n  JvmtiExport::transition_pending_onload_raw_monitors();\n\n  // Fully start NMT\n  MemTracker::start();\n\n  // Create the VMThread\n  { TraceTime timer(\"Start VMThread\", TraceStartupTime);\n    VMThread::create();\n    Thread* vmthread = VMThread::vm_thread();\n\n    if (!os::create_thread(vmthread, os::vm_thread))\n      vm_exit_during_initialization(\"Cannot create VM thread. Out of system resources.\");\n\n    // Wait for the VM thread to become ready, and VMThread::run to initialize\n    // Monitors can have spurious returns, must always check another state flag\n    {\n      MutexLocker ml(Notify_lock);\n      os::start_thread(vmthread);\n      while (vmthread->active_handles() == NULL) {\n        Notify_lock->wait();\n      }\n    }\n  }\n\n  assert (Universe::is_fully_initialized(), \"not initialized\");\n  if (VerifyBeforeGC && VerifyGCStartAt == 0) {\n    Universe::heap()->prepare_for_verify();\n    Universe::verify();   // make sure we're starting with a clean slate\n  }\n\n  EXCEPTION_MARK;\n\n  // At this point, the Universe is initialized, but we have not executed\n  // any byte code.  Now is a good time (the only time) to dump out the\n  // internal state of the JVM for sharing.\n\n  if (DumpSharedSpaces) {\n    Universe::heap()->preload_and_dump(CHECK_0);\n    ShouldNotReachHere();\n  }\n\n  // Always call even when there are not JVMTI environments yet, since environments\n  // may be attached late and JVMTI must track phases of VM execution\n  JvmtiExport::enter_start_phase();\n\n  // Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.\n  JvmtiExport::post_vm_start();\n\n  {\n    TraceTime timer(\"Initialize java.lang classes\", TraceStartupTime);\n\n    if (EagerXrunInit && Arguments::init_libraries_at_startup()) {\n      create_vm_init_libraries();\n    }\n\n    if (InitializeJavaLangString) {\n      initialize_class(vmSymbols::java_lang_String(), CHECK_0);\n    } else {\n      warning(\"java.lang.String not initialized\");\n    }\n\n    // Initialize java_lang.System (needed before creating the thread)\n    if (InitializeJavaLangSystem) {\n      initialize_class(vmSymbols::java_lang_System(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ThreadGroup(), CHECK_0);\n      Handle thread_group = create_initial_thread_group(CHECK_0);\n      Universe::set_main_thread_group(thread_group());\n      initialize_class(vmSymbols::java_lang_Thread(), CHECK_0);\n      oop thread_object = create_initial_thread(thread_group, main_thread, CHECK_0);\n      main_thread->set_threadObj(thread_object);\n      // Set thread status to running since main thread has\n      // been started and running.\n      java_lang_Thread::set_thread_status(thread_object,\n                                          java_lang_Thread::RUNNABLE);\n\n      // The VM preresolve methods to these classes. Make sure that get initialized\n      initialize_class(vmSymbols::java_lang_reflect_Method(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ref_Finalizer(),  CHECK_0);\n      // The VM creates & returns objects of this class. Make sure it's initialized.\n      initialize_class(vmSymbols::java_lang_Class(), CHECK_0);\n      call_initializeSystemClass(CHECK_0);\n\n      // get the Java runtime name after java.lang.System is initialized\n      JDK_Version::set_runtime_name(get_java_runtime_name(THREAD));\n      JDK_Version::set_runtime_version(get_java_runtime_version(THREAD));\n    } else {\n      warning(\"java.lang.System not initialized\");\n    }\n\n    // an instance of OutOfMemory exception has been allocated earlier\n    if (InitializeJavaLangExceptionsErrors) {\n      initialize_class(vmSymbols::java_lang_OutOfMemoryError(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_NullPointerException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ClassCastException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ArrayStoreException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ArithmeticException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_StackOverflowError(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_IllegalMonitorStateException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_IllegalArgumentException(), CHECK_0);\n    } else {\n      warning(\"java.lang.OutOfMemoryError has not been initialized\");\n      warning(\"java.lang.NullPointerException has not been initialized\");\n      warning(\"java.lang.ClassCastException has not been initialized\");\n      warning(\"java.lang.ArrayStoreException has not been initialized\");\n      warning(\"java.lang.ArithmeticException has not been initialized\");\n      warning(\"java.lang.StackOverflowError has not been initialized\");\n      warning(\"java.lang.IllegalArgumentException has not been initialized\");\n    }\n  }\n\n\n  initialize_class(vmSymbols::java_lang_Compiler(), CHECK_0);\n\n  reset_vm_info_property(CHECK_0);\n\n  quicken_jni_functions();\n\n  // Must be run after init_ft which initializes ft_enabled\n  if (TRACE_INITIALIZE() != JNI_OK) {\n    vm_exit_during_initialization(\"Failed to initialize tracing backend\");\n  }\n\n  // Set flag that basic initialization has completed. Used by exceptions and various\n  // debug stuff, that does not work until all basic classes have been initialized.\n  set_init_completed();\n\n#ifndef USDT2\n  HS_DTRACE_PROBE(hotspot, vm__init__end);\n#else /* USDT2 */\n  HOTSPOT_VM_INIT_END();\n#endif /* USDT2 */\n\n  // record VM initialization completion time\n  // 向VM管理模块发送初始化完成信号\n  Management::record_vm_init_completed();\n\n  // Compute system loader. Note that this has to occur after set_init_completed, since\n  // valid exceptions may be thrown in the process.\n  // Note that we do not use CHECK_0 here since we are inside an EXCEPTION_MARK and\n  // set_init_completed has just been called, causing exceptions not to be shortcut\n  // anymore. We call vm_exit_during_initialization directly instead.\n  // 载入classloader\n  SystemDictionary::compute_java_system_loader(THREAD);\n  if (HAS_PENDING_EXCEPTION) {\n    vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));\n  }\n\n#ifndef SERIALGC\n  // Support for ConcurrentMarkSweep. This should be cleaned up\n  // and better encapsulated. The ugly nested if test would go away\n  // once things are properly refactored. XXX YSR\n  if (UseConcMarkSweepGC || UseG1GC) {\n    if (UseConcMarkSweepGC) {\n      ConcurrentMarkSweepThread::makeSurrogateLockerThread(THREAD);\n    } else {\n      ConcurrentMarkThread::makeSurrogateLockerThread(THREAD);\n    }\n    if (HAS_PENDING_EXCEPTION) {\n      vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));\n    }\n  }\n#endif // SERIALGC\n\n  // Always call even when there are not JVMTI environments yet, since environments\n  // may be attached late and JVMTI must track phases of VM execution\n  JvmtiExport::enter_live_phase();\n\n  // Signal Dispatcher needs to be started before VMInit event is posted\n  // 启动一个叫做“信号分发器”的线程用来处理进程间的信号\n  // 比如通过jstack获取一个jvm实例的栈信息\n  os::signal_init();\n\n  // Start Attach Listener if +StartAttachListener or it can't be started lazily\n  if (!DisableAttachMechanism) {\n    AttachListener::vm_start();\n    if (StartAttachListener || AttachListener::init_at_startup()) {\n      AttachListener::init();\n    }\n  }\n\n  // Launch -Xrun agents\n  // Must be done in the JVMTI live phase so that for backward compatibility the JDWP\n  // back-end can launch with -Xdebug -Xrunjdwp.\n  if (!EagerXrunInit && Arguments::init_libraries_at_startup()) {\n    create_vm_init_libraries();\n  }\n\n  // Notify JVMTI agents that VM initialization is complete - nop if no agents.\n  JvmtiExport::post_vm_initialized();\n\n  if (TRACE_START() != JNI_OK) {\n    vm_exit_during_initialization(\"Failed to start tracing backend.\");\n  }\n\n  if (CleanChunkPoolAsync) {\n    Chunk::start_chunk_pool_cleaner_task();\n  }\n\n  // initialize compiler(s)\n  CompileBroker::compilation_init();\n  // 加载sun.management.Agent类并调用startAgent方法开启管理服务\n  Management::initialize(THREAD);\n  if (HAS_PENDING_EXCEPTION) {\n    // management agent fails to start possibly due to\n    // configuration problem and is responsible for printing\n    // stack trace if appropriate. Simply exit VM.\n    vm_exit(1);\n  }\n\n  if (Arguments::has_profile())       FlatProfiler::engage(main_thread, true);\n  if (Arguments::has_alloc_profile()) AllocationProfiler::engage();\n  if (MemProfiling)                   MemProfiler::engage();\n  StatSampler::engage();\n  if (CheckJNICalls)                  JniPeriodicChecker::engage();\n\n  BiasedLocking::init();\n\n  if (JDK_Version::current().post_vm_init_hook_enabled()) {\n    call_postVMInitHook(THREAD);\n    // The Java side of PostVMInitHook.run must deal with all\n    // exceptions and provide means of diagnosis.\n    if (HAS_PENDING_EXCEPTION) {\n      CLEAR_PENDING_EXCEPTION;\n    }\n  }\n\n  {\n      MutexLockerEx ml(PeriodicTask_lock, Mutex::_no_safepoint_check_flag);\n      // Make sure the watcher thread can be started by WatcherThread::start()\n      // or by dynamic enrollment.\n      WatcherThread::make_startable();\n      // Start up the WatcherThread if there are any periodic tasks\n      // NOTE:  All PeriodicTasks should be registered by now. If they\n      //   aren't, late joiners might appear to start slowly (we might\n      //   take a while to process their first tick).\n      if (PeriodicTask::num_tasks() > 0) {\n          WatcherThread::start();\n      }\n  }\n\n  // Give os specific code one last chance to start\n  os::init_3();\n\n  create_vm_timer.end();\n  return JNI_OK;\n}\n```\n\n\n其中`init_globals()`方法位于`hotspot/src/share/vm/runtime/init.cpp`用来初始化全局模块:\n```c\njint init_globals() {\n\n  HandleMark hm;\n  // 初始化各子系统的监控及管理服务\n  // JMX、线程和同步子系统、类加载子系统的监控和管理\n  management_init();\n  // 初始化字节码表，如istore、iload、iadd\n  bytecodes_init();\n  // 类加载器初始化\n  classLoader_init();\n  // 代码缓存池初始化\n  codeCache_init();\n  // VM版本初始化\n  VM_Version_init();\n  // 系统初始化\n  os_init_globals();\n  stubRoutines_init1();\n  // ============================\n  // 初始化堆以及决定所使用GC策略\n  // ============================\n  jint status = universe_init();  // dependent on codeCache_init and\n                                  // stubRoutines_init1\n  if (status != JNI_OK)\n    return status;\n  // 初始化解析器\n  interpreter_init();  // before any methods loaded\n  invocationCounter_init();  // before any methods loaded\n  // 初始化MarkSweep\n  marksweep_init();\n  accessFlags_init();\n  // 初始化操作码模板表\n  templateTable_init();\n  InterfaceSupport_init();\n  SharedRuntime::generate_stubs();\n  // 初始化语法表及系统字典等\n  universe2_init();  // dependent on codeCache_init and stubRoutines_init1\n  // 初始化软引用时间戳表并设定软引用清除策略\n  referenceProcessor_init();\n  jni_handles_init();\n  // 代码数据结构的必要性检查（仅限debug版本）\n  vmStructs_init();\n  vtableStubs_init();\n  InlineCacheBuffer_init();\n  // oracle编译器初始化（oracle编译器是一个编译器开关接口）\n  compilerOracle_init();\n  // 初始化编译策略（根据启动参数决定编译策略）\n  compilationPolicy_init();\n  compileBroker_init();\n  VMRegImpl::set_regName();\n\n  if (!universe_post_init()) {\n    return JNI_ERR;\n  }\n  javaClasses_init();   // must happen after vtable initialization\n  stubRoutines_init2(); // note: StubRoutines need 2-phase init\n\n  // All the flags that get adjusted by VM_Version_init and os::init_2\n  // have been set so dump the flags now.\n  if (PrintFlagsFinal) {\n    CommandLineFlags::printFlags(tty, false);\n  }\n\n  return JNI_OK;\n}\n```\n\n其中`universe_init()`方法位于`hotspot/src/share/vm/memory/universe.cpp`\n\n```c\njint universe_init() {\n  assert(!Universe::_fully_initialized, \"called after initialize_vtables\");\n  guarantee(1 << LogHeapWordSize == sizeof(HeapWord),\n         \"LogHeapWordSize is incorrect.\");\n  guarantee(sizeof(oop) >= sizeof(HeapWord), \"HeapWord larger than oop?\");\n  guarantee(sizeof(oop) % sizeof(HeapWord) == 0,\n            \"oop size is not not a multiple of HeapWord size\");\n  TraceTime timer(\"Genesis\", TraceStartupTime);\n  GC_locker::lock();  // do not allow gc during bootstrapping\n  JavaClasses::compute_hard_coded_offsets();\n\n  // Get map info from shared archive file.\n  if (DumpSharedSpaces)\n    UseSharedSpaces = false;\n\n  FileMapInfo* mapinfo = NULL;\n  if (UseSharedSpaces) {\n    mapinfo = NEW_C_HEAP_OBJ(FileMapInfo, mtInternal);\n    memset(mapinfo, 0, sizeof(FileMapInfo));\n\n    // Open the shared archive file, read and validate the header. If\n    // initialization files, shared spaces [UseSharedSpaces] are\n    // disabled and the file is closed.\n\n    if (mapinfo->initialize()) {\n      FileMapInfo::set_current_info(mapinfo);\n    } else {\n      assert(!mapinfo->is_open() && !UseSharedSpaces,\n             \"archive file not closed or shared spaces not disabled.\");\n    }\n  }\n\n  //===================================\n  // 初始化堆\n  // 包括创建及初始化各分区代，设定空间比例大小，回收策略等\n  // 流程：根据启动参数决定使用的回收策略，初始化回收策略时会指定所使用的代规范，\n  //       最后根据规范创建对应类型的回收堆。i.e.\n  //      arguments -> policy -> spec -> heap\n  //===================================\n  jint status = Universe::initialize_heap();\n  if (status != JNI_OK) {\n    return status;\n  }\n\n  // We have a heap so create the methodOop caches before\n  // CompactingPermGenGen::initialize_oops() tries to populate them.\n  Universe::_finalizer_register_cache = new LatestMethodOopCache();\n  Universe::_loader_addClass_cache    = new LatestMethodOopCache();\n  Universe::_pd_implies_cache         = new LatestMethodOopCache();\n  Universe::_reflect_invoke_cache     = new ActiveMethodOopsCache();\n\n  if (UseSharedSpaces) {\n\n    // Read the data structures supporting the shared spaces (shared\n    // system dictionary, symbol table, etc.).  After that, access to\n    // the file (other than the mapped regions) is no longer needed, and\n    // the file is closed. Closing the file does not affect the\n    // currently mapped regions.\n\n    CompactingPermGenGen::initialize_oops();\n    mapinfo->close();\n\n  } else {\n    SymbolTable::create_table();\n    StringTable::create_table();\n    ClassLoader::create_package_info_table();\n  }\n\n  return JNI_OK;\n}\n```\n\n\ninitialize_heap()方法如下：\n```c\njint Universe::initialize_heap() {\n  // 如果使用并行GC\n  if (UseParallelGC) {\n#ifndef SERIALGC\n    // 回收堆类型使用并行回收堆\n    Universe::_collectedHeap = new ParallelScavengeHeap();\n#else  // SERIALGC\n    fatal(\"UseParallelGC not supported in java kernel vm.\");\n#endif // SERIALGC\n\n  } else if (UseG1GC) {\n#ifndef SERIALGC\n    // 如果使用G1回收，设定回收器策略和回收堆类型为G1CollectorPolicy和G1CollectedHeap\n    G1CollectorPolicy* g1p = new G1CollectorPolicy();\n    G1CollectedHeap* g1h = new G1CollectedHeap(g1p);\n    Universe::_collectedHeap = g1h;\n#else  // SERIALGC\n    fatal(\"UseG1GC not supported in java kernel vm.\");\n#endif // SERIALGC\n\n  } else {\n    GenCollectorPolicy *gc_policy;\n    // 使用串行回收\n    if (UseSerialGC) {\n      gc_policy = new MarkSweepPolicy();\n    // 使用并发回收\n    } else if (UseConcMarkSweepGC) {\n#ifndef SERIALGC\n      // 是否使用自适应策略\n      // ASConcurrentMarkSweepPolicy继承自ConcurrentMarkSweepPolicy，\n      if (UseAdaptiveSizePolicy) {\n        gc_policy = new ASConcurrentMarkSweepPolicy();\n      } else {\n        gc_policy = new ConcurrentMarkSweepPolicy();\n      }\n#else   // SERIALGC\n    fatal(\"UseConcMarkSweepGC not supported in java kernel vm.\");\n#endif // SERIALGC\n    // 默认使用标记清除算法\n    } else { // default old generation\n      gc_policy = new MarkSweepPolicy();\n    }\n    // 回收策略类型体系图\n    // AllocatedObj\n    //    └── CHeapObj\n    //        └── CollectorPolicy\n    //            └── GenCollectorPolicy\n    //                └── TwoGenerationCollectorPolicy\n    //                    └── ConcurrentMarkSweepPolicy\n    //                        └── ASConcurrentMarkSweepPolicy\n    Universe::_collectedHeap = new GenCollectedHeap(gc_policy);\n  }\n  //===================================\n  // 初始化堆空间\n  // 这里调用GenCollectedHeap::initialize()方法， 真正向操作系统申请内存\n  //===================================\n  jint status = Universe::heap()->initialize();\n  if (status != JNI_OK) {\n    return status;\n  }\n\n#ifdef _LP64\n  // 在LP64数据模型下是否开启对象指针压缩\n  if (UseCompressedOops) {\n    // Subtract a page because something can get allocated at heap base.\n    // This also makes implicit null checking work, because the\n    // memory+1 page below heap_base needs to cause a signal.\n    // See needs_explicit_null_check.\n    // Only set the heap base for compressed oops because it indicates\n    // compressed oops for pstack code.\n    bool verbose = PrintCompressedOopsMode || (PrintMiscellaneous && Verbose);\n    if (verbose) {\n      tty->cr();\n      tty->print(\"heap address: \" PTR_FORMAT \", size: \" SIZE_FORMAT \" MB\",\n                 Universe::heap()->base(), Universe::heap()->reserved_region().byte_size()/M);\n    }\n    if ((uint64_t)Universe::heap()->reserved_region().end() > OopEncodingHeapMax) {\n      // Can't reserve heap below 32Gb.\n      Universe::set_narrow_oop_base(Universe::heap()->base() - os::vm_page_size());\n      Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);\n      if (verbose) {\n        tty->print(\", %s: \"PTR_FORMAT,\n            narrow_oop_mode_to_string(HeapBasedNarrowOop),\n            Universe::narrow_oop_base());\n      }\n    } else {\n      Universe::set_narrow_oop_base(0);\n      if (verbose) {\n        tty->print(\", %s\", narrow_oop_mode_to_string(ZeroBasedNarrowOop));\n      }\n#ifdef _WIN64\n      if (!Universe::narrow_oop_use_implicit_null_checks()) {\n        // Don't need guard page for implicit checks in indexed addressing\n        // mode with zero based Compressed Oops.\n        Universe::set_narrow_oop_use_implicit_null_checks(true);\n      }\n#endif //  _WIN64\n      if((uint64_t)Universe::heap()->reserved_region().end() > NarrowOopHeapMax) {\n        // Can't reserve heap below 4Gb.\n        Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);\n      } else {\n        Universe::set_narrow_oop_shift(0);\n        if (verbose) {\n          tty->print(\", %s\", narrow_oop_mode_to_string(UnscaledNarrowOop));\n        }\n      }\n    }\n    if (verbose) {\n      tty->cr();\n      tty->cr();\n    }\n  }\n  assert(Universe::narrow_oop_base() == (Universe::heap()->base() - os::vm_page_size()) ||\n         Universe::narrow_oop_base() == NULL, \"invalid value\");\n  assert(Universe::narrow_oop_shift() == LogMinObjAlignmentInBytes ||\n         Universe::narrow_oop_shift() == 0, \"invalid value\");\n#endif\n\n  // We will never reach the CATCH below since Exceptions::_throw will cause\n  // the VM to exit if an exception is thrown during initialization\n  // 如果使用TLAB则对其进行初始化\n  if (UseTLAB) {\n    assert(Universe::heap()->supports_tlab_allocation(),\n           \"Should support thread-local allocation buffers\");\n    ThreadLocalAllocBuffer::startup_initialization();\n  }\n  return JNI_OK;\n}\n```\n\n在上面的代码中`Universe::heap()->initialize()`会调用GenCollectedHeap的`initialize()`方法：\n```c\njint GenCollectedHeap::initialize() {\n  CollectedHeap::pre_initialize();\n\n  int i;\n  _n_gens = gen_policy()->number_of_generations();\n\n  // While there are no constraints in the GC code that HeapWordSize\n  // be any particular value, there are multiple other areas in the\n  // system which believe this to be true (e.g. oop->object_size in some\n  // cases incorrectly returns the size in wordSize units rather than\n  // HeapWordSize).\n  guarantee(HeapWordSize == wordSize, \"HeapWordSize must equal wordSize\");\n\n  // The heap must be at least as aligned as generations.\n  size_t alignment = Generation::GenGrain;\n\n  _gen_specs = gen_policy()->generations();\n  PermanentGenerationSpec *perm_gen_spec =\n                                collector_policy()->permanent_generation();\n\n  // Make sure the sizes are all aligned.\n  for (i = 0; i < _n_gens; i++) {\n    _gen_specs[i]->align(alignment);\n  }\n  perm_gen_spec->align(alignment);\n\n  // If we are dumping the heap, then allocate a wasted block of address\n  // space in order to push the heap to a lower address.  This extra\n  // address range allows for other (or larger) libraries to be loaded\n  // without them occupying the space required for the shared spaces.\n\n  if (DumpSharedSpaces) {\n    uintx reserved = 0;\n    uintx block_size = 64*1024*1024;\n    while (reserved < SharedDummyBlockSize) {\n      char* dummy = os::reserve_memory(block_size);\n      reserved += block_size;\n    }\n  }\n\n  // Allocate space for the heap.\n\n  char* heap_address;\n  size_t total_reserved = 0;\n  int n_covered_regions = 0;\n  ReservedSpace heap_rs(0);\n  //分配区域，三个区域:YoungGen,OldGen,PermGen\n  heap_address = allocate(alignment, perm_gen_spec, &total_reserved,\n                          &n_covered_regions, &heap_rs);\n\n  if (UseSharedSpaces) {\n    if (!heap_rs.is_reserved() || heap_address != heap_rs.base()) {\n      if (heap_rs.is_reserved()) {\n        heap_rs.release();\n      }\n      FileMapInfo* mapinfo = FileMapInfo::current_info();\n      mapinfo->fail_continue(\"Unable to reserve shared region.\");\n      allocate(alignment, perm_gen_spec, &total_reserved, &n_covered_regions,\n               &heap_rs);\n    }\n  }\n\n  if (!heap_rs.is_reserved()) {\n    vm_shutdown_during_initialization(\n      \"Could not reserve enough space for object heap\");\n    return JNI_ENOMEM;\n  }\n  //_reserved区域包括Y,O,P三个区域\n  _reserved = MemRegion((HeapWord*)heap_rs.base(),\n                        (HeapWord*)(heap_rs.base() + heap_rs.size()));\n\n  // It is important to do this in a way such that concurrent readers can't\n  // temporarily think somethings in the heap.  (Seen this happen in asserts.)\n  _reserved.set_word_size(0);\n  _reserved.set_start((HeapWord*)heap_rs.base());\n  size_t actual_heap_size = heap_rs.size() - perm_gen_spec->misc_data_size()\n                                           - perm_gen_spec->misc_code_size();\n  _reserved.set_end((HeapWord*)(heap_rs.base() + actual_heap_size));\n\n  _rem_set = collector_policy()->create_rem_set(_reserved, n_covered_regions);\n  set_barrier_set(rem_set()->bs());\n\n  _gch = this;\n\n  for (i = 0; i < _n_gens; i++) {\n    ReservedSpace this_rs = heap_rs.first_part(_gen_specs[i]->max_size(),\n                                              UseSharedSpaces, UseSharedSpaces);\n    _gens[i] = _gen_specs[i]->init(this_rs, i, rem_set());\n    // tag generations in JavaHeap\n    MemTracker::record_virtual_memory_type((address)this_rs.base(), mtJavaHeap);\n    heap_rs = heap_rs.last_part(_gen_specs[i]->max_size());\n  }\n  _perm_gen = perm_gen_spec->init(heap_rs, PermSize, rem_set());\n  // tag PermGen\n  MemTracker::record_virtual_memory_type((address)heap_rs.base(), mtJavaHeap);\n\n  clear_incremental_collection_failed();\n\n#ifndef SERIALGC\n  // If we are running CMS, create the collector responsible\n  // for collecting the CMS generations.\n  if (collector_policy()->is_concurrent_mark_sweep_policy()) {\n    bool success = create_cms_collector();\n    if (!success) return JNI_ENOMEM;\n  }\n#endif // SERIALGC\n\n  return JNI_OK;\n}\n```\n\n\n至此JVM的初始化全部完成，至于内存策略的计算部分详细内容请阅读Hotspot源码，这里只作抛砖引玉。","source":"_posts/2014/12/01/analyse-jvm-startup-flow-through-source-code-initialize.md","raw":"---\ntitle: 【Hotspot源码分析】从HotSpot源码角度深入分析Java程序启动过程-初始化  \ndate: 2014-12-01 04:20:08\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n---\n\n接上篇文章从Hotpost源码角度深入分析Java程序启动过程-创建 ，本文将继续介绍JVM启动过程的初始化部分。\n\n在上篇文章中在执行LoadJavaVM方法的时候将libjvm.so内的方法`JNI_CreateJavaVM`和`JNI_GetDefaultJavaVMInitArgs`符号引用挂载到了结构体`InvocationFunctions`上，并且在执行InitializeJVM方法的时候进行了调用。\n\n这里执行了JNI调用`JNI_CreateJavaVM`，文件位于`hotspot/src/share/vm/prims/jni.cpp`。方法内容如下：\n\n```c\n_JNI_IMPORT_OR_EXPORT_ jint JNICALL JNI_CreateJavaVM(JavaVM **vm, void **penv, void *args) {\n\n   // 略去部分非重要内容\n\n  /**\n   * Certain errors during initialization are recoverable and do not\n   * prevent this method from being called again at a later time\n   * (perhaps with different arguments).  However, at a certain\n   * point during initialization if an error occurs we cannot allow\n   * this function to be called again (or it will crash).  In those\n   * situations, the 'canTryAgain' flag is set to false, which atomically\n   * sets safe_to_recreate_vm to 1, such that any new call to\n   * JNI_CreateJavaVM will immediately fail using the above logic.\n   */\n  bool can_try_again = true;\n  //========================================\n  // 通过Threads模块初始化VM并创建VM线程\n  //========================================\n  result = Threads::create_vm((JavaVMInitArgs*) args, &can_try_again);\n  if (result == JNI_OK) {\n    JavaThread *thread = JavaThread::current();\n    /* thread is thread_in_vm here */\n    *vm = (JavaVM *)(&main_vm);\n    *(JNIEnv**)penv = thread->jni_environment();\n\n    // Tracks the time application was running before GC\n    RuntimeService::record_application_start();\n\n    // Notify JVMTI\n    if (JvmtiExport::should_post_thread_life()) {\n       JvmtiExport::post_thread_start(thread);\n    }\n\n    EventThreadStart event;\n    if (event.should_commit()) {\n      event.set_javalangthread(java_lang_Thread::thread_id(thread->threadObj()));\n      event.commit();\n    }\n\n    // 略去部分内容\n\n  return result;\n}\n```\n\n<!-- more -->\n\n这里调用了`hotspot/src/share/vm/runtime/thread.cpp`的`create_vm`方法：\n\n```c\njint Threads::create_vm(JavaVMInitArgs* args, bool* canTryAgain) {\n\n  extern void JDK_Version_init();\n\n  // Check version\n  if (!is_supported_jni_version(args->version)) return JNI_EVERSION;\n\n  // Initialize the output stream module\n  // 初始化输出流\n  ostream_init();\n\n  // Process java launcher properties.\n  // 处理Java启动参数，如-Dsun.java.launcher*\n  Arguments::process_sun_java_launcher_properties(args);\n\n  // Initialize the os module before using TLS\n  // 初始化操作系统模块，如页大小，处理器数量，系统时钟等\n  os::init();\n\n  // Initialize system properties.\n  // 初始化系统属性，其中分为【可读属性】和【可读写属性】\n  // 可读属性：\n  // java.vm.specification.name\n  // java.vm.version\n  // java.vm.name\n  // java.vm.info\n  // 可读写属性：\n  // java.ext.dirs\n  // java.endorsed.dirs\n  // sun.boot.library.path\n  // java.library.path\n  // java.home\n  // sun.boot.class.path\n  // java.class.path\n  Arguments::init_system_properties();\n\n  // So that JDK version can be used as a discrimintor when parsing arguments\n  JDK_Version_init();\n\n  // Update/Initialize System properties after JDK version number is known\n  // 设置java.vm.specification.vendor属性（1.6之前是Sun Microsystems Inc. 1.7之后是Oracle Corporation）\n  // 设置java.vm.specification.version和java.vm.vendor属性\n  Arguments::init_version_specific_system_properties();\n\n  // Parse arguments\n  // 解析启动参数，如-XX:Flags=、-XX:+PrintVMOptions、-XX:+PrintFlagsInitial etc.\n  jint parse_result = Arguments::parse(args);\n  if (parse_result != JNI_OK) return parse_result;\n\n  if (PauseAtStartup) {\n    os::pause();\n  }\n\n#ifndef USDT2\n  HS_DTRACE_PROBE(hotspot, vm__init__begin);\n#else /* USDT2 */\n  HOTSPOT_VM_INIT_BEGIN();\n#endif /* USDT2 */\n\n  // Record VM creation timing statistics\n  TraceVmCreationTime create_vm_timer;\n  create_vm_timer.start();\n\n  // Timing (must come after argument parsing)\n  TraceTime timer(\"Create VM\", TraceStartupTime);\n\n  // Initialize the os module after parsing the args\n  jint os_init_2_result = os::init_2();\n  if (os_init_2_result != JNI_OK) return os_init_2_result;\n\n  // intialize TLS\n  ThreadLocalStorage::init();\n\n  // Bootstrap native memory tracking, so it can start recording memory\n  // activities before worker thread is started. This is the first phase\n  // of bootstrapping, VM is currently running in single-thread mode.\n  MemTracker::bootstrap_single_thread();\n\n  // Initialize output stream logging\n  // 初始化GC日志输出流，用来处理-Xloggc参数\n  ostream_init_log();\n\n  // Convert -Xrun to -agentlib: if there is no JVM_OnLoad\n  // Must be before create_vm_init_agents()\n  if (Arguments::init_libraries_at_startup()) {\n    convert_vm_init_libraries_to_agents();\n  }\n\n  // Launch -agentlib/-agentpath and converted -Xrun agents\n  // 加载agent库\n  if (Arguments::init_agents_at_startup()) {\n    create_vm_init_agents();\n  }\n\n  // Initialize Threads state\n  _thread_list = NULL;\n  _number_of_threads = 0;\n  _number_of_non_daemon_threads = 0;\n\n  // Initialize global data structures and create system classes in heap\n  // 初始化全局数据数据结构及系统类，包括：\n  // 初始化Java基础类型\n  // 初始化时间队列\n  // 初始化锁\n  // 初始化chunkpool\n  // 初始化性能数据统计模块\n  vm_init_globals();\n\n  // Attach the main thread to this os thread\n  JavaThread* main_thread = new JavaThread();\n  main_thread->set_thread_state(_thread_in_vm);\n  main_thread->record_stack_base_and_size();\n  main_thread->initialize_thread_local_storage();\n\n  main_thread->set_active_handles(JNIHandleBlock::allocate_block());\n\n  if (!main_thread->set_as_starting_thread()) {\n    vm_shutdown_during_initialization(\n      \"Failed necessary internal allocation. Out of swap space\");\n    delete main_thread;\n    *canTryAgain = false; // don't let caller call JNI_CreateJavaVM again\n    return JNI_ENOMEM;\n  }\n\n  // Enable guard page *after* os::create_main_thread(), otherwise it would\n  // crash Linux VM, see notes in os_linux.cpp.\n  main_thread->create_stack_guard_pages();\n\n  // Initialize Java-Level synchronization subsystem\n  ObjectMonitor::Initialize() ;\n\n  // Second phase of bootstrapping, VM is about entering multi-thread mode\n  MemTracker::bootstrap_multi_thread();\n\n  // Initialize global modules\n  // ========================================\n  // IMPORTANT!!! 初始化全局模块\n  // ========================================\n  jint status = init_globals();\n  if (status != JNI_OK) {\n    delete main_thread;\n    *canTryAgain = false; // don't let caller call JNI_CreateJavaVM again\n    return status;\n  }\n\n  // Should be done after the heap is fully created\n  main_thread->cache_global_variables();\n\n  HandleMark hm;\n\n  { MutexLocker mu(Threads_lock);\n    Threads::add(main_thread);\n  }\n\n  // Any JVMTI raw monitors entered in onload will transition into\n  // real raw monitor. VM is setup enough here for raw monitor enter.\n  JvmtiExport::transition_pending_onload_raw_monitors();\n\n  // Fully start NMT\n  MemTracker::start();\n\n  // Create the VMThread\n  { TraceTime timer(\"Start VMThread\", TraceStartupTime);\n    VMThread::create();\n    Thread* vmthread = VMThread::vm_thread();\n\n    if (!os::create_thread(vmthread, os::vm_thread))\n      vm_exit_during_initialization(\"Cannot create VM thread. Out of system resources.\");\n\n    // Wait for the VM thread to become ready, and VMThread::run to initialize\n    // Monitors can have spurious returns, must always check another state flag\n    {\n      MutexLocker ml(Notify_lock);\n      os::start_thread(vmthread);\n      while (vmthread->active_handles() == NULL) {\n        Notify_lock->wait();\n      }\n    }\n  }\n\n  assert (Universe::is_fully_initialized(), \"not initialized\");\n  if (VerifyBeforeGC && VerifyGCStartAt == 0) {\n    Universe::heap()->prepare_for_verify();\n    Universe::verify();   // make sure we're starting with a clean slate\n  }\n\n  EXCEPTION_MARK;\n\n  // At this point, the Universe is initialized, but we have not executed\n  // any byte code.  Now is a good time (the only time) to dump out the\n  // internal state of the JVM for sharing.\n\n  if (DumpSharedSpaces) {\n    Universe::heap()->preload_and_dump(CHECK_0);\n    ShouldNotReachHere();\n  }\n\n  // Always call even when there are not JVMTI environments yet, since environments\n  // may be attached late and JVMTI must track phases of VM execution\n  JvmtiExport::enter_start_phase();\n\n  // Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.\n  JvmtiExport::post_vm_start();\n\n  {\n    TraceTime timer(\"Initialize java.lang classes\", TraceStartupTime);\n\n    if (EagerXrunInit && Arguments::init_libraries_at_startup()) {\n      create_vm_init_libraries();\n    }\n\n    if (InitializeJavaLangString) {\n      initialize_class(vmSymbols::java_lang_String(), CHECK_0);\n    } else {\n      warning(\"java.lang.String not initialized\");\n    }\n\n    // Initialize java_lang.System (needed before creating the thread)\n    if (InitializeJavaLangSystem) {\n      initialize_class(vmSymbols::java_lang_System(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ThreadGroup(), CHECK_0);\n      Handle thread_group = create_initial_thread_group(CHECK_0);\n      Universe::set_main_thread_group(thread_group());\n      initialize_class(vmSymbols::java_lang_Thread(), CHECK_0);\n      oop thread_object = create_initial_thread(thread_group, main_thread, CHECK_0);\n      main_thread->set_threadObj(thread_object);\n      // Set thread status to running since main thread has\n      // been started and running.\n      java_lang_Thread::set_thread_status(thread_object,\n                                          java_lang_Thread::RUNNABLE);\n\n      // The VM preresolve methods to these classes. Make sure that get initialized\n      initialize_class(vmSymbols::java_lang_reflect_Method(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ref_Finalizer(),  CHECK_0);\n      // The VM creates & returns objects of this class. Make sure it's initialized.\n      initialize_class(vmSymbols::java_lang_Class(), CHECK_0);\n      call_initializeSystemClass(CHECK_0);\n\n      // get the Java runtime name after java.lang.System is initialized\n      JDK_Version::set_runtime_name(get_java_runtime_name(THREAD));\n      JDK_Version::set_runtime_version(get_java_runtime_version(THREAD));\n    } else {\n      warning(\"java.lang.System not initialized\");\n    }\n\n    // an instance of OutOfMemory exception has been allocated earlier\n    if (InitializeJavaLangExceptionsErrors) {\n      initialize_class(vmSymbols::java_lang_OutOfMemoryError(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_NullPointerException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ClassCastException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ArrayStoreException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_ArithmeticException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_StackOverflowError(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_IllegalMonitorStateException(), CHECK_0);\n      initialize_class(vmSymbols::java_lang_IllegalArgumentException(), CHECK_0);\n    } else {\n      warning(\"java.lang.OutOfMemoryError has not been initialized\");\n      warning(\"java.lang.NullPointerException has not been initialized\");\n      warning(\"java.lang.ClassCastException has not been initialized\");\n      warning(\"java.lang.ArrayStoreException has not been initialized\");\n      warning(\"java.lang.ArithmeticException has not been initialized\");\n      warning(\"java.lang.StackOverflowError has not been initialized\");\n      warning(\"java.lang.IllegalArgumentException has not been initialized\");\n    }\n  }\n\n\n  initialize_class(vmSymbols::java_lang_Compiler(), CHECK_0);\n\n  reset_vm_info_property(CHECK_0);\n\n  quicken_jni_functions();\n\n  // Must be run after init_ft which initializes ft_enabled\n  if (TRACE_INITIALIZE() != JNI_OK) {\n    vm_exit_during_initialization(\"Failed to initialize tracing backend\");\n  }\n\n  // Set flag that basic initialization has completed. Used by exceptions and various\n  // debug stuff, that does not work until all basic classes have been initialized.\n  set_init_completed();\n\n#ifndef USDT2\n  HS_DTRACE_PROBE(hotspot, vm__init__end);\n#else /* USDT2 */\n  HOTSPOT_VM_INIT_END();\n#endif /* USDT2 */\n\n  // record VM initialization completion time\n  // 向VM管理模块发送初始化完成信号\n  Management::record_vm_init_completed();\n\n  // Compute system loader. Note that this has to occur after set_init_completed, since\n  // valid exceptions may be thrown in the process.\n  // Note that we do not use CHECK_0 here since we are inside an EXCEPTION_MARK and\n  // set_init_completed has just been called, causing exceptions not to be shortcut\n  // anymore. We call vm_exit_during_initialization directly instead.\n  // 载入classloader\n  SystemDictionary::compute_java_system_loader(THREAD);\n  if (HAS_PENDING_EXCEPTION) {\n    vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));\n  }\n\n#ifndef SERIALGC\n  // Support for ConcurrentMarkSweep. This should be cleaned up\n  // and better encapsulated. The ugly nested if test would go away\n  // once things are properly refactored. XXX YSR\n  if (UseConcMarkSweepGC || UseG1GC) {\n    if (UseConcMarkSweepGC) {\n      ConcurrentMarkSweepThread::makeSurrogateLockerThread(THREAD);\n    } else {\n      ConcurrentMarkThread::makeSurrogateLockerThread(THREAD);\n    }\n    if (HAS_PENDING_EXCEPTION) {\n      vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));\n    }\n  }\n#endif // SERIALGC\n\n  // Always call even when there are not JVMTI environments yet, since environments\n  // may be attached late and JVMTI must track phases of VM execution\n  JvmtiExport::enter_live_phase();\n\n  // Signal Dispatcher needs to be started before VMInit event is posted\n  // 启动一个叫做“信号分发器”的线程用来处理进程间的信号\n  // 比如通过jstack获取一个jvm实例的栈信息\n  os::signal_init();\n\n  // Start Attach Listener if +StartAttachListener or it can't be started lazily\n  if (!DisableAttachMechanism) {\n    AttachListener::vm_start();\n    if (StartAttachListener || AttachListener::init_at_startup()) {\n      AttachListener::init();\n    }\n  }\n\n  // Launch -Xrun agents\n  // Must be done in the JVMTI live phase so that for backward compatibility the JDWP\n  // back-end can launch with -Xdebug -Xrunjdwp.\n  if (!EagerXrunInit && Arguments::init_libraries_at_startup()) {\n    create_vm_init_libraries();\n  }\n\n  // Notify JVMTI agents that VM initialization is complete - nop if no agents.\n  JvmtiExport::post_vm_initialized();\n\n  if (TRACE_START() != JNI_OK) {\n    vm_exit_during_initialization(\"Failed to start tracing backend.\");\n  }\n\n  if (CleanChunkPoolAsync) {\n    Chunk::start_chunk_pool_cleaner_task();\n  }\n\n  // initialize compiler(s)\n  CompileBroker::compilation_init();\n  // 加载sun.management.Agent类并调用startAgent方法开启管理服务\n  Management::initialize(THREAD);\n  if (HAS_PENDING_EXCEPTION) {\n    // management agent fails to start possibly due to\n    // configuration problem and is responsible for printing\n    // stack trace if appropriate. Simply exit VM.\n    vm_exit(1);\n  }\n\n  if (Arguments::has_profile())       FlatProfiler::engage(main_thread, true);\n  if (Arguments::has_alloc_profile()) AllocationProfiler::engage();\n  if (MemProfiling)                   MemProfiler::engage();\n  StatSampler::engage();\n  if (CheckJNICalls)                  JniPeriodicChecker::engage();\n\n  BiasedLocking::init();\n\n  if (JDK_Version::current().post_vm_init_hook_enabled()) {\n    call_postVMInitHook(THREAD);\n    // The Java side of PostVMInitHook.run must deal with all\n    // exceptions and provide means of diagnosis.\n    if (HAS_PENDING_EXCEPTION) {\n      CLEAR_PENDING_EXCEPTION;\n    }\n  }\n\n  {\n      MutexLockerEx ml(PeriodicTask_lock, Mutex::_no_safepoint_check_flag);\n      // Make sure the watcher thread can be started by WatcherThread::start()\n      // or by dynamic enrollment.\n      WatcherThread::make_startable();\n      // Start up the WatcherThread if there are any periodic tasks\n      // NOTE:  All PeriodicTasks should be registered by now. If they\n      //   aren't, late joiners might appear to start slowly (we might\n      //   take a while to process their first tick).\n      if (PeriodicTask::num_tasks() > 0) {\n          WatcherThread::start();\n      }\n  }\n\n  // Give os specific code one last chance to start\n  os::init_3();\n\n  create_vm_timer.end();\n  return JNI_OK;\n}\n```\n\n\n其中`init_globals()`方法位于`hotspot/src/share/vm/runtime/init.cpp`用来初始化全局模块:\n```c\njint init_globals() {\n\n  HandleMark hm;\n  // 初始化各子系统的监控及管理服务\n  // JMX、线程和同步子系统、类加载子系统的监控和管理\n  management_init();\n  // 初始化字节码表，如istore、iload、iadd\n  bytecodes_init();\n  // 类加载器初始化\n  classLoader_init();\n  // 代码缓存池初始化\n  codeCache_init();\n  // VM版本初始化\n  VM_Version_init();\n  // 系统初始化\n  os_init_globals();\n  stubRoutines_init1();\n  // ============================\n  // 初始化堆以及决定所使用GC策略\n  // ============================\n  jint status = universe_init();  // dependent on codeCache_init and\n                                  // stubRoutines_init1\n  if (status != JNI_OK)\n    return status;\n  // 初始化解析器\n  interpreter_init();  // before any methods loaded\n  invocationCounter_init();  // before any methods loaded\n  // 初始化MarkSweep\n  marksweep_init();\n  accessFlags_init();\n  // 初始化操作码模板表\n  templateTable_init();\n  InterfaceSupport_init();\n  SharedRuntime::generate_stubs();\n  // 初始化语法表及系统字典等\n  universe2_init();  // dependent on codeCache_init and stubRoutines_init1\n  // 初始化软引用时间戳表并设定软引用清除策略\n  referenceProcessor_init();\n  jni_handles_init();\n  // 代码数据结构的必要性检查（仅限debug版本）\n  vmStructs_init();\n  vtableStubs_init();\n  InlineCacheBuffer_init();\n  // oracle编译器初始化（oracle编译器是一个编译器开关接口）\n  compilerOracle_init();\n  // 初始化编译策略（根据启动参数决定编译策略）\n  compilationPolicy_init();\n  compileBroker_init();\n  VMRegImpl::set_regName();\n\n  if (!universe_post_init()) {\n    return JNI_ERR;\n  }\n  javaClasses_init();   // must happen after vtable initialization\n  stubRoutines_init2(); // note: StubRoutines need 2-phase init\n\n  // All the flags that get adjusted by VM_Version_init and os::init_2\n  // have been set so dump the flags now.\n  if (PrintFlagsFinal) {\n    CommandLineFlags::printFlags(tty, false);\n  }\n\n  return JNI_OK;\n}\n```\n\n其中`universe_init()`方法位于`hotspot/src/share/vm/memory/universe.cpp`\n\n```c\njint universe_init() {\n  assert(!Universe::_fully_initialized, \"called after initialize_vtables\");\n  guarantee(1 << LogHeapWordSize == sizeof(HeapWord),\n         \"LogHeapWordSize is incorrect.\");\n  guarantee(sizeof(oop) >= sizeof(HeapWord), \"HeapWord larger than oop?\");\n  guarantee(sizeof(oop) % sizeof(HeapWord) == 0,\n            \"oop size is not not a multiple of HeapWord size\");\n  TraceTime timer(\"Genesis\", TraceStartupTime);\n  GC_locker::lock();  // do not allow gc during bootstrapping\n  JavaClasses::compute_hard_coded_offsets();\n\n  // Get map info from shared archive file.\n  if (DumpSharedSpaces)\n    UseSharedSpaces = false;\n\n  FileMapInfo* mapinfo = NULL;\n  if (UseSharedSpaces) {\n    mapinfo = NEW_C_HEAP_OBJ(FileMapInfo, mtInternal);\n    memset(mapinfo, 0, sizeof(FileMapInfo));\n\n    // Open the shared archive file, read and validate the header. If\n    // initialization files, shared spaces [UseSharedSpaces] are\n    // disabled and the file is closed.\n\n    if (mapinfo->initialize()) {\n      FileMapInfo::set_current_info(mapinfo);\n    } else {\n      assert(!mapinfo->is_open() && !UseSharedSpaces,\n             \"archive file not closed or shared spaces not disabled.\");\n    }\n  }\n\n  //===================================\n  // 初始化堆\n  // 包括创建及初始化各分区代，设定空间比例大小，回收策略等\n  // 流程：根据启动参数决定使用的回收策略，初始化回收策略时会指定所使用的代规范，\n  //       最后根据规范创建对应类型的回收堆。i.e.\n  //      arguments -> policy -> spec -> heap\n  //===================================\n  jint status = Universe::initialize_heap();\n  if (status != JNI_OK) {\n    return status;\n  }\n\n  // We have a heap so create the methodOop caches before\n  // CompactingPermGenGen::initialize_oops() tries to populate them.\n  Universe::_finalizer_register_cache = new LatestMethodOopCache();\n  Universe::_loader_addClass_cache    = new LatestMethodOopCache();\n  Universe::_pd_implies_cache         = new LatestMethodOopCache();\n  Universe::_reflect_invoke_cache     = new ActiveMethodOopsCache();\n\n  if (UseSharedSpaces) {\n\n    // Read the data structures supporting the shared spaces (shared\n    // system dictionary, symbol table, etc.).  After that, access to\n    // the file (other than the mapped regions) is no longer needed, and\n    // the file is closed. Closing the file does not affect the\n    // currently mapped regions.\n\n    CompactingPermGenGen::initialize_oops();\n    mapinfo->close();\n\n  } else {\n    SymbolTable::create_table();\n    StringTable::create_table();\n    ClassLoader::create_package_info_table();\n  }\n\n  return JNI_OK;\n}\n```\n\n\ninitialize_heap()方法如下：\n```c\njint Universe::initialize_heap() {\n  // 如果使用并行GC\n  if (UseParallelGC) {\n#ifndef SERIALGC\n    // 回收堆类型使用并行回收堆\n    Universe::_collectedHeap = new ParallelScavengeHeap();\n#else  // SERIALGC\n    fatal(\"UseParallelGC not supported in java kernel vm.\");\n#endif // SERIALGC\n\n  } else if (UseG1GC) {\n#ifndef SERIALGC\n    // 如果使用G1回收，设定回收器策略和回收堆类型为G1CollectorPolicy和G1CollectedHeap\n    G1CollectorPolicy* g1p = new G1CollectorPolicy();\n    G1CollectedHeap* g1h = new G1CollectedHeap(g1p);\n    Universe::_collectedHeap = g1h;\n#else  // SERIALGC\n    fatal(\"UseG1GC not supported in java kernel vm.\");\n#endif // SERIALGC\n\n  } else {\n    GenCollectorPolicy *gc_policy;\n    // 使用串行回收\n    if (UseSerialGC) {\n      gc_policy = new MarkSweepPolicy();\n    // 使用并发回收\n    } else if (UseConcMarkSweepGC) {\n#ifndef SERIALGC\n      // 是否使用自适应策略\n      // ASConcurrentMarkSweepPolicy继承自ConcurrentMarkSweepPolicy，\n      if (UseAdaptiveSizePolicy) {\n        gc_policy = new ASConcurrentMarkSweepPolicy();\n      } else {\n        gc_policy = new ConcurrentMarkSweepPolicy();\n      }\n#else   // SERIALGC\n    fatal(\"UseConcMarkSweepGC not supported in java kernel vm.\");\n#endif // SERIALGC\n    // 默认使用标记清除算法\n    } else { // default old generation\n      gc_policy = new MarkSweepPolicy();\n    }\n    // 回收策略类型体系图\n    // AllocatedObj\n    //    └── CHeapObj\n    //        └── CollectorPolicy\n    //            └── GenCollectorPolicy\n    //                └── TwoGenerationCollectorPolicy\n    //                    └── ConcurrentMarkSweepPolicy\n    //                        └── ASConcurrentMarkSweepPolicy\n    Universe::_collectedHeap = new GenCollectedHeap(gc_policy);\n  }\n  //===================================\n  // 初始化堆空间\n  // 这里调用GenCollectedHeap::initialize()方法， 真正向操作系统申请内存\n  //===================================\n  jint status = Universe::heap()->initialize();\n  if (status != JNI_OK) {\n    return status;\n  }\n\n#ifdef _LP64\n  // 在LP64数据模型下是否开启对象指针压缩\n  if (UseCompressedOops) {\n    // Subtract a page because something can get allocated at heap base.\n    // This also makes implicit null checking work, because the\n    // memory+1 page below heap_base needs to cause a signal.\n    // See needs_explicit_null_check.\n    // Only set the heap base for compressed oops because it indicates\n    // compressed oops for pstack code.\n    bool verbose = PrintCompressedOopsMode || (PrintMiscellaneous && Verbose);\n    if (verbose) {\n      tty->cr();\n      tty->print(\"heap address: \" PTR_FORMAT \", size: \" SIZE_FORMAT \" MB\",\n                 Universe::heap()->base(), Universe::heap()->reserved_region().byte_size()/M);\n    }\n    if ((uint64_t)Universe::heap()->reserved_region().end() > OopEncodingHeapMax) {\n      // Can't reserve heap below 32Gb.\n      Universe::set_narrow_oop_base(Universe::heap()->base() - os::vm_page_size());\n      Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);\n      if (verbose) {\n        tty->print(\", %s: \"PTR_FORMAT,\n            narrow_oop_mode_to_string(HeapBasedNarrowOop),\n            Universe::narrow_oop_base());\n      }\n    } else {\n      Universe::set_narrow_oop_base(0);\n      if (verbose) {\n        tty->print(\", %s\", narrow_oop_mode_to_string(ZeroBasedNarrowOop));\n      }\n#ifdef _WIN64\n      if (!Universe::narrow_oop_use_implicit_null_checks()) {\n        // Don't need guard page for implicit checks in indexed addressing\n        // mode with zero based Compressed Oops.\n        Universe::set_narrow_oop_use_implicit_null_checks(true);\n      }\n#endif //  _WIN64\n      if((uint64_t)Universe::heap()->reserved_region().end() > NarrowOopHeapMax) {\n        // Can't reserve heap below 4Gb.\n        Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);\n      } else {\n        Universe::set_narrow_oop_shift(0);\n        if (verbose) {\n          tty->print(\", %s\", narrow_oop_mode_to_string(UnscaledNarrowOop));\n        }\n      }\n    }\n    if (verbose) {\n      tty->cr();\n      tty->cr();\n    }\n  }\n  assert(Universe::narrow_oop_base() == (Universe::heap()->base() - os::vm_page_size()) ||\n         Universe::narrow_oop_base() == NULL, \"invalid value\");\n  assert(Universe::narrow_oop_shift() == LogMinObjAlignmentInBytes ||\n         Universe::narrow_oop_shift() == 0, \"invalid value\");\n#endif\n\n  // We will never reach the CATCH below since Exceptions::_throw will cause\n  // the VM to exit if an exception is thrown during initialization\n  // 如果使用TLAB则对其进行初始化\n  if (UseTLAB) {\n    assert(Universe::heap()->supports_tlab_allocation(),\n           \"Should support thread-local allocation buffers\");\n    ThreadLocalAllocBuffer::startup_initialization();\n  }\n  return JNI_OK;\n}\n```\n\n在上面的代码中`Universe::heap()->initialize()`会调用GenCollectedHeap的`initialize()`方法：\n```c\njint GenCollectedHeap::initialize() {\n  CollectedHeap::pre_initialize();\n\n  int i;\n  _n_gens = gen_policy()->number_of_generations();\n\n  // While there are no constraints in the GC code that HeapWordSize\n  // be any particular value, there are multiple other areas in the\n  // system which believe this to be true (e.g. oop->object_size in some\n  // cases incorrectly returns the size in wordSize units rather than\n  // HeapWordSize).\n  guarantee(HeapWordSize == wordSize, \"HeapWordSize must equal wordSize\");\n\n  // The heap must be at least as aligned as generations.\n  size_t alignment = Generation::GenGrain;\n\n  _gen_specs = gen_policy()->generations();\n  PermanentGenerationSpec *perm_gen_spec =\n                                collector_policy()->permanent_generation();\n\n  // Make sure the sizes are all aligned.\n  for (i = 0; i < _n_gens; i++) {\n    _gen_specs[i]->align(alignment);\n  }\n  perm_gen_spec->align(alignment);\n\n  // If we are dumping the heap, then allocate a wasted block of address\n  // space in order to push the heap to a lower address.  This extra\n  // address range allows for other (or larger) libraries to be loaded\n  // without them occupying the space required for the shared spaces.\n\n  if (DumpSharedSpaces) {\n    uintx reserved = 0;\n    uintx block_size = 64*1024*1024;\n    while (reserved < SharedDummyBlockSize) {\n      char* dummy = os::reserve_memory(block_size);\n      reserved += block_size;\n    }\n  }\n\n  // Allocate space for the heap.\n\n  char* heap_address;\n  size_t total_reserved = 0;\n  int n_covered_regions = 0;\n  ReservedSpace heap_rs(0);\n  //分配区域，三个区域:YoungGen,OldGen,PermGen\n  heap_address = allocate(alignment, perm_gen_spec, &total_reserved,\n                          &n_covered_regions, &heap_rs);\n\n  if (UseSharedSpaces) {\n    if (!heap_rs.is_reserved() || heap_address != heap_rs.base()) {\n      if (heap_rs.is_reserved()) {\n        heap_rs.release();\n      }\n      FileMapInfo* mapinfo = FileMapInfo::current_info();\n      mapinfo->fail_continue(\"Unable to reserve shared region.\");\n      allocate(alignment, perm_gen_spec, &total_reserved, &n_covered_regions,\n               &heap_rs);\n    }\n  }\n\n  if (!heap_rs.is_reserved()) {\n    vm_shutdown_during_initialization(\n      \"Could not reserve enough space for object heap\");\n    return JNI_ENOMEM;\n  }\n  //_reserved区域包括Y,O,P三个区域\n  _reserved = MemRegion((HeapWord*)heap_rs.base(),\n                        (HeapWord*)(heap_rs.base() + heap_rs.size()));\n\n  // It is important to do this in a way such that concurrent readers can't\n  // temporarily think somethings in the heap.  (Seen this happen in asserts.)\n  _reserved.set_word_size(0);\n  _reserved.set_start((HeapWord*)heap_rs.base());\n  size_t actual_heap_size = heap_rs.size() - perm_gen_spec->misc_data_size()\n                                           - perm_gen_spec->misc_code_size();\n  _reserved.set_end((HeapWord*)(heap_rs.base() + actual_heap_size));\n\n  _rem_set = collector_policy()->create_rem_set(_reserved, n_covered_regions);\n  set_barrier_set(rem_set()->bs());\n\n  _gch = this;\n\n  for (i = 0; i < _n_gens; i++) {\n    ReservedSpace this_rs = heap_rs.first_part(_gen_specs[i]->max_size(),\n                                              UseSharedSpaces, UseSharedSpaces);\n    _gens[i] = _gen_specs[i]->init(this_rs, i, rem_set());\n    // tag generations in JavaHeap\n    MemTracker::record_virtual_memory_type((address)this_rs.base(), mtJavaHeap);\n    heap_rs = heap_rs.last_part(_gen_specs[i]->max_size());\n  }\n  _perm_gen = perm_gen_spec->init(heap_rs, PermSize, rem_set());\n  // tag PermGen\n  MemTracker::record_virtual_memory_type((address)heap_rs.base(), mtJavaHeap);\n\n  clear_incremental_collection_failed();\n\n#ifndef SERIALGC\n  // If we are running CMS, create the collector responsible\n  // for collecting the CMS generations.\n  if (collector_policy()->is_concurrent_mark_sweep_policy()) {\n    bool success = create_cms_collector();\n    if (!success) return JNI_ENOMEM;\n  }\n#endif // SERIALGC\n\n  return JNI_OK;\n}\n```\n\n\n至此JVM的初始化全部完成，至于内存策略的计算部分详细内容请阅读Hotspot源码，这里只作抛砖引玉。","slug":"analyse-jvm-startup-flow-through-source-code-initialize","published":1,"updated":"2018-04-29T20:31:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1x000l2zs6bhgaj43e","content":"<p>接上篇文章从Hotpost源码角度深入分析Java程序启动过程-创建 ，本文将继续介绍JVM启动过程的初始化部分。</p>\n<p>在上篇文章中在执行LoadJavaVM方法的时候将libjvm.so内的方法<code>JNI_CreateJavaVM</code>和<code>JNI_GetDefaultJavaVMInitArgs</code>符号引用挂载到了结构体<code>InvocationFunctions</code>上，并且在执行InitializeJVM方法的时候进行了调用。</p>\n<p>这里执行了JNI调用<code>JNI_CreateJavaVM</code>，文件位于<code>hotspot/src/share/vm/prims/jni.cpp</code>。方法内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"function\">JNI_IMPORT_OR_EXPORT_ jint JNICALL <span class=\"title\">JNI_CreateJavaVM</span><span class=\"params\">(JavaVM **vm, <span class=\"keyword\">void</span> **penv, <span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 略去部分非重要内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Certain errors during initialization are recoverable and do not</span></span><br><span class=\"line\"><span class=\"comment\">   * prevent this method from being called again at a later time</span></span><br><span class=\"line\"><span class=\"comment\">   * (perhaps with different arguments).  However, at a certain</span></span><br><span class=\"line\"><span class=\"comment\">   * point during initialization if an error occurs we cannot allow</span></span><br><span class=\"line\"><span class=\"comment\">   * this function to be called again (or it will crash).  In those</span></span><br><span class=\"line\"><span class=\"comment\">   * situations, the 'canTryAgain' flag is set to false, which atomically</span></span><br><span class=\"line\"><span class=\"comment\">   * sets safe_to_recreate_vm to 1, such that any new call to</span></span><br><span class=\"line\"><span class=\"comment\">   * JNI_CreateJavaVM will immediately fail using the above logic.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> can_try_again = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">//========================================</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过Threads模块初始化VM并创建VM线程</span></span><br><span class=\"line\">  <span class=\"comment\">//========================================</span></span><br><span class=\"line\">  result = Threads::create_vm((JavaVMInitArgs*) args, &amp;can_try_again);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result == JNI_OK) &#123;</span><br><span class=\"line\">    JavaThread *thread = JavaThread::current();</span><br><span class=\"line\">    <span class=\"comment\">/* thread is thread_in_vm here */</span></span><br><span class=\"line\">    *vm = (JavaVM *)(&amp;main_vm);</span><br><span class=\"line\">    *(JNIEnv**)penv = thread-&gt;jni_environment();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Tracks the time application was running before GC</span></span><br><span class=\"line\">    RuntimeService::record_application_start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Notify JVMTI</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JvmtiExport::should_post_thread_life()) &#123;</span><br><span class=\"line\">       JvmtiExport::post_thread_start(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    EventThreadStart event;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.should_commit()) &#123;</span><br><span class=\"line\">      event.set_javalangthread(java_lang_Thread::thread_id(thread-&gt;threadObj()));</span><br><span class=\"line\">      event.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 略去部分内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>这里调用了<code>hotspot/src/share/vm/runtime/thread.cpp</code>的<code>create_vm</code>方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint Threads::create_vm(JavaVMInitArgs* args, <span class=\"keyword\">bool</span>* canTryAgain) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">JDK_Version_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Check version</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!is_supported_jni_version(args-&gt;version)) <span class=\"keyword\">return</span> JNI_EVERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the output stream module</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化输出流</span></span><br><span class=\"line\">  ostream_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Process java launcher properties.</span></span><br><span class=\"line\">  <span class=\"comment\">// 处理Java启动参数，如-Dsun.java.launcher*</span></span><br><span class=\"line\">  Arguments::process_sun_java_launcher_properties(args);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the os module before using TLS</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化操作系统模块，如页大小，处理器数量，系统时钟等</span></span><br><span class=\"line\">  os::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize system properties.</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化系统属性，其中分为【可读属性】和【可读写属性】</span></span><br><span class=\"line\">  <span class=\"comment\">// 可读属性：</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.specification.name</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.version</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.name</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.info</span></span><br><span class=\"line\">  <span class=\"comment\">// 可读写属性：</span></span><br><span class=\"line\">  <span class=\"comment\">// java.ext.dirs</span></span><br><span class=\"line\">  <span class=\"comment\">// java.endorsed.dirs</span></span><br><span class=\"line\">  <span class=\"comment\">// sun.boot.library.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.library.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.home</span></span><br><span class=\"line\">  <span class=\"comment\">// sun.boot.class.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.class.path</span></span><br><span class=\"line\">  Arguments::init_system_properties();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// So that JDK version can be used as a discrimintor when parsing arguments</span></span><br><span class=\"line\">  JDK_Version_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Update/Initialize System properties after JDK version number is known</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置java.vm.specification.vendor属性（1.6之前是Sun Microsystems Inc. 1.7之后是Oracle Corporation）</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置java.vm.specification.version和java.vm.vendor属性</span></span><br><span class=\"line\">  Arguments::init_version_specific_system_properties();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Parse arguments</span></span><br><span class=\"line\">  <span class=\"comment\">// 解析启动参数，如-XX:Flags=、-XX:+PrintVMOptions、-XX:+PrintFlagsInitial etc.</span></span><br><span class=\"line\">  jint parse_result = Arguments::parse(args);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parse_result != JNI_OK) <span class=\"keyword\">return</span> parse_result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (PauseAtStartup) &#123;</span><br><span class=\"line\">    os::pause();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> USDT2</span></span><br><span class=\"line\">  HS_DTRACE_PROBE(hotspot, vm__init__begin);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span> <span class=\"comment\">/* USDT2 */</span></span></span><br><span class=\"line\">  HOTSPOT_VM_INIT_BEGIN();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* USDT2 */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Record VM creation timing statistics</span></span><br><span class=\"line\">  TraceVmCreationTime create_vm_timer;</span><br><span class=\"line\">  create_vm_timer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Timing (must come after argument parsing)</span></span><br><span class=\"line\">  <span class=\"function\">TraceTime <span class=\"title\">timer</span><span class=\"params\">(<span class=\"string\">\"Create VM\"</span>, TraceStartupTime)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the os module after parsing the args</span></span><br><span class=\"line\">  jint os_init_2_result = os::init_2();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (os_init_2_result != JNI_OK) <span class=\"keyword\">return</span> os_init_2_result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// intialize TLS</span></span><br><span class=\"line\">  ThreadLocalStorage::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Bootstrap native memory tracking, so it can start recording memory</span></span><br><span class=\"line\">  <span class=\"comment\">// activities before worker thread is started. This is the first phase</span></span><br><span class=\"line\">  <span class=\"comment\">// of bootstrapping, VM is currently running in single-thread mode.</span></span><br><span class=\"line\">  MemTracker::bootstrap_single_thread();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize output stream logging</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化GC日志输出流，用来处理-Xloggc参数</span></span><br><span class=\"line\">  ostream_init_log();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Convert -Xrun to -agentlib: if there is no JVM_OnLoad</span></span><br><span class=\"line\">  <span class=\"comment\">// Must be before create_vm_init_agents()</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">    convert_vm_init_libraries_to_agents();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Launch -agentlib/-agentpath and converted -Xrun agents</span></span><br><span class=\"line\">  <span class=\"comment\">// 加载agent库</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::init_agents_at_startup()) &#123;</span><br><span class=\"line\">    create_vm_init_agents();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize Threads state</span></span><br><span class=\"line\">  _thread_list = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  _number_of_threads = <span class=\"number\">0</span>;</span><br><span class=\"line\">  _number_of_non_daemon_threads = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize global data structures and create system classes in heap</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化全局数据数据结构及系统类，包括：</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化Java基础类型</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化时间队列</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化锁</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化chunkpool</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化性能数据统计模块</span></span><br><span class=\"line\">  vm_init_globals();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Attach the main thread to this os thread</span></span><br><span class=\"line\">  JavaThread* main_thread = <span class=\"keyword\">new</span> JavaThread();</span><br><span class=\"line\">  main_thread-&gt;set_thread_state(_thread_in_vm);</span><br><span class=\"line\">  main_thread-&gt;record_stack_base_and_size();</span><br><span class=\"line\">  main_thread-&gt;initialize_thread_local_storage();</span><br><span class=\"line\"></span><br><span class=\"line\">  main_thread-&gt;set_active_handles(JNIHandleBlock::allocate_block());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!main_thread-&gt;set_as_starting_thread()) &#123;</span><br><span class=\"line\">    vm_shutdown_during_initialization(</span><br><span class=\"line\">      <span class=\"string\">\"Failed necessary internal allocation. Out of swap space\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> main_thread;</span><br><span class=\"line\">    *canTryAgain = <span class=\"literal\">false</span>; <span class=\"comment\">// don't let caller call JNI_CreateJavaVM again</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Enable guard page *after* os::create_main_thread(), otherwise it would</span></span><br><span class=\"line\">  <span class=\"comment\">// crash Linux VM, see notes in os_linux.cpp.</span></span><br><span class=\"line\">  main_thread-&gt;create_stack_guard_pages();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize Java-Level synchronization subsystem</span></span><br><span class=\"line\">  ObjectMonitor::Initialize() ;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Second phase of bootstrapping, VM is about entering multi-thread mode</span></span><br><span class=\"line\">  MemTracker::bootstrap_multi_thread();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize global modules</span></span><br><span class=\"line\">  <span class=\"comment\">// ========================================</span></span><br><span class=\"line\">  <span class=\"comment\">// IMPORTANT!!! 初始化全局模块</span></span><br><span class=\"line\">  <span class=\"comment\">// ========================================</span></span><br><span class=\"line\">  jint status = init_globals();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> main_thread;</span><br><span class=\"line\">    *canTryAgain = <span class=\"literal\">false</span>; <span class=\"comment\">// don't let caller call JNI_CreateJavaVM again</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Should be done after the heap is fully created</span></span><br><span class=\"line\">  main_thread-&gt;cache_global_variables();</span><br><span class=\"line\"></span><br><span class=\"line\">  HandleMark hm;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123; <span class=\"function\">MutexLocker <span class=\"title\">mu</span><span class=\"params\">(Threads_lock)</span></span>;</span><br><span class=\"line\">    Threads::add(main_thread);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Any JVMTI raw monitors entered in onload will transition into</span></span><br><span class=\"line\">  <span class=\"comment\">// real raw monitor. VM is setup enough here for raw monitor enter.</span></span><br><span class=\"line\">  JvmtiExport::transition_pending_onload_raw_monitors();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Fully start NMT</span></span><br><span class=\"line\">  MemTracker::start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create the VMThread</span></span><br><span class=\"line\">  &#123; <span class=\"function\">TraceTime <span class=\"title\">timer</span><span class=\"params\">(<span class=\"string\">\"Start VMThread\"</span>, TraceStartupTime)</span></span>;</span><br><span class=\"line\">    VMThread::create();</span><br><span class=\"line\">    Thread* vmthread = VMThread::vm_thread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!os::create_thread(vmthread, os::vm_thread))</span><br><span class=\"line\">      vm_exit_during_initialization(<span class=\"string\">\"Cannot create VM thread. Out of system resources.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Wait for the VM thread to become ready, and VMThread::run to initialize</span></span><br><span class=\"line\">    <span class=\"comment\">// Monitors can have spurious returns, must always check another state flag</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"function\">MutexLocker <span class=\"title\">ml</span><span class=\"params\">(Notify_lock)</span></span>;</span><br><span class=\"line\">      os::start_thread(vmthread);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (vmthread-&gt;active_handles() == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        Notify_lock-&gt;wait();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  assert (Universe::is_fully_initialized(), <span class=\"string\">\"not initialized\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (VerifyBeforeGC &amp;&amp; VerifyGCStartAt == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    Universe::heap()-&gt;prepare_for_verify();</span><br><span class=\"line\">    Universe::verify();   <span class=\"comment\">// make sure we're starting with a clean slate</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  EXCEPTION_MARK;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// At this point, the Universe is initialized, but we have not executed</span></span><br><span class=\"line\">  <span class=\"comment\">// any byte code.  Now is a good time (the only time) to dump out the</span></span><br><span class=\"line\">  <span class=\"comment\">// internal state of the JVM for sharing.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (DumpSharedSpaces) &#123;</span><br><span class=\"line\">    Universe::heap()-&gt;preload_and_dump(CHECK_0);</span><br><span class=\"line\">    ShouldNotReachHere();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Always call even when there are not JVMTI environments yet, since environments</span></span><br><span class=\"line\">  <span class=\"comment\">// may be attached late and JVMTI must track phases of VM execution</span></span><br><span class=\"line\">  JvmtiExport::enter_start_phase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.</span></span><br><span class=\"line\">  JvmtiExport::post_vm_start();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">TraceTime <span class=\"title\">timer</span><span class=\"params\">(<span class=\"string\">\"Initialize java.lang classes\"</span>, TraceStartupTime)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (EagerXrunInit &amp;&amp; Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">      create_vm_init_libraries();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (InitializeJavaLangString) &#123;</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_String(), CHECK_0);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.String not initialized\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initialize java_lang.System (needed before creating the thread)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (InitializeJavaLangSystem) &#123;</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_System(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ThreadGroup(), CHECK_0);</span><br><span class=\"line\">      Handle thread_group = create_initial_thread_group(CHECK_0);</span><br><span class=\"line\">      Universe::set_main_thread_group(thread_group());</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_Thread(), CHECK_0);</span><br><span class=\"line\">      oop thread_object = create_initial_thread(thread_group, main_thread, CHECK_0);</span><br><span class=\"line\">      main_thread-&gt;set_threadObj(thread_object);</span><br><span class=\"line\">      <span class=\"comment\">// Set thread status to running since main thread has</span></span><br><span class=\"line\">      <span class=\"comment\">// been started and running.</span></span><br><span class=\"line\">      java_lang_Thread::set_thread_status(thread_object,</span><br><span class=\"line\">                                          java_lang_Thread::RUNNABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// The VM preresolve methods to these classes. Make sure that get initialized</span></span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_reflect_Method(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ref_Finalizer(),  CHECK_0);</span><br><span class=\"line\">      <span class=\"comment\">// The VM creates &amp; returns objects of this class. Make sure it's initialized.</span></span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_Class(), CHECK_0);</span><br><span class=\"line\">      call_initializeSystemClass(CHECK_0);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// get the Java runtime name after java.lang.System is initialized</span></span><br><span class=\"line\">      JDK_Version::set_runtime_name(get_java_runtime_name(THREAD));</span><br><span class=\"line\">      JDK_Version::set_runtime_version(get_java_runtime_version(THREAD));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.System not initialized\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// an instance of OutOfMemory exception has been allocated earlier</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (InitializeJavaLangExceptionsErrors) &#123;</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_OutOfMemoryError(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_NullPointerException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ClassCastException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ArrayStoreException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ArithmeticException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_StackOverflowError(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_IllegalMonitorStateException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_IllegalArgumentException(), CHECK_0);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.OutOfMemoryError has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.NullPointerException has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.ClassCastException has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.ArrayStoreException has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.ArithmeticException has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.StackOverflowError has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.IllegalArgumentException has not been initialized\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  initialize_class(vmSymbols::java_lang_Compiler(), CHECK_0);</span><br><span class=\"line\"></span><br><span class=\"line\">  reset_vm_info_property(CHECK_0);</span><br><span class=\"line\"></span><br><span class=\"line\">  quicken_jni_functions();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Must be run after init_ft which initializes ft_enabled</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (TRACE_INITIALIZE() != JNI_OK) &#123;</span><br><span class=\"line\">    vm_exit_during_initialization(<span class=\"string\">\"Failed to initialize tracing backend\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Set flag that basic initialization has completed. Used by exceptions and various</span></span><br><span class=\"line\">  <span class=\"comment\">// debug stuff, that does not work until all basic classes have been initialized.</span></span><br><span class=\"line\">  set_init_completed();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> USDT2</span></span><br><span class=\"line\">  HS_DTRACE_PROBE(hotspot, vm__init__end);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span> <span class=\"comment\">/* USDT2 */</span></span></span><br><span class=\"line\">  HOTSPOT_VM_INIT_END();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* USDT2 */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// record VM initialization completion time</span></span><br><span class=\"line\">  <span class=\"comment\">// 向VM管理模块发送初始化完成信号</span></span><br><span class=\"line\">  Management::record_vm_init_completed();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Compute system loader. Note that this has to occur after set_init_completed, since</span></span><br><span class=\"line\">  <span class=\"comment\">// valid exceptions may be thrown in the process.</span></span><br><span class=\"line\">  <span class=\"comment\">// Note that we do not use CHECK_0 here since we are inside an EXCEPTION_MARK and</span></span><br><span class=\"line\">  <span class=\"comment\">// set_init_completed has just been called, causing exceptions not to be shortcut</span></span><br><span class=\"line\">  <span class=\"comment\">// anymore. We call vm_exit_during_initialization directly instead.</span></span><br><span class=\"line\">  <span class=\"comment\">// 载入classloader</span></span><br><span class=\"line\">  SystemDictionary::compute_java_system_loader(THREAD);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">    vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SERIALGC</span></span><br><span class=\"line\">  <span class=\"comment\">// Support for ConcurrentMarkSweep. This should be cleaned up</span></span><br><span class=\"line\">  <span class=\"comment\">// and better encapsulated. The ugly nested if test would go away</span></span><br><span class=\"line\">  <span class=\"comment\">// once things are properly refactored. XXX YSR</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseConcMarkSweepGC || UseG1GC) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class=\"line\">      ConcurrentMarkSweepThread::makeSurrogateLockerThread(THREAD);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ConcurrentMarkThread::makeSurrogateLockerThread(THREAD);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">      vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Always call even when there are not JVMTI environments yet, since environments</span></span><br><span class=\"line\">  <span class=\"comment\">// may be attached late and JVMTI must track phases of VM execution</span></span><br><span class=\"line\">  JvmtiExport::enter_live_phase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Signal Dispatcher needs to be started before VMInit event is posted</span></span><br><span class=\"line\">  <span class=\"comment\">// 启动一个叫做“信号分发器”的线程用来处理进程间的信号</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如通过jstack获取一个jvm实例的栈信息</span></span><br><span class=\"line\">  os::signal_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Start Attach Listener if +StartAttachListener or it can't be started lazily</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!DisableAttachMechanism) &#123;</span><br><span class=\"line\">    AttachListener::vm_start();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StartAttachListener || AttachListener::init_at_startup()) &#123;</span><br><span class=\"line\">      AttachListener::init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Launch -Xrun agents</span></span><br><span class=\"line\">  <span class=\"comment\">// Must be done in the JVMTI live phase so that for backward compatibility the JDWP</span></span><br><span class=\"line\">  <span class=\"comment\">// back-end can launch with -Xdebug -Xrunjdwp.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!EagerXrunInit &amp;&amp; Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">    create_vm_init_libraries();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Notify JVMTI agents that VM initialization is complete - nop if no agents.</span></span><br><span class=\"line\">  JvmtiExport::post_vm_initialized();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (TRACE_START() != JNI_OK) &#123;</span><br><span class=\"line\">    vm_exit_during_initialization(<span class=\"string\">\"Failed to start tracing backend.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (CleanChunkPoolAsync) &#123;</span><br><span class=\"line\">    Chunk::start_chunk_pool_cleaner_task();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// initialize compiler(s)</span></span><br><span class=\"line\">  CompileBroker::compilation_init();</span><br><span class=\"line\">  <span class=\"comment\">// 加载sun.management.Agent类并调用startAgent方法开启管理服务</span></span><br><span class=\"line\">  Management::initialize(THREAD);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// management agent fails to start possibly due to</span></span><br><span class=\"line\">    <span class=\"comment\">// configuration problem and is responsible for printing</span></span><br><span class=\"line\">    <span class=\"comment\">// stack trace if appropriate. Simply exit VM.</span></span><br><span class=\"line\">    vm_exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::has_profile())       FlatProfiler::engage(main_thread, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::has_alloc_profile()) AllocationProfiler::engage();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (MemProfiling)                   MemProfiler::engage();</span><br><span class=\"line\">  StatSampler::engage();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (CheckJNICalls)                  JniPeriodicChecker::engage();</span><br><span class=\"line\"></span><br><span class=\"line\">  BiasedLocking::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (JDK_Version::current().post_vm_init_hook_enabled()) &#123;</span><br><span class=\"line\">    call_postVMInitHook(THREAD);</span><br><span class=\"line\">    <span class=\"comment\">// The Java side of PostVMInitHook.run must deal with all</span></span><br><span class=\"line\">    <span class=\"comment\">// exceptions and provide means of diagnosis.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">      CLEAR_PENDING_EXCEPTION;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"function\">MutexLockerEx <span class=\"title\">ml</span><span class=\"params\">(PeriodicTask_lock, Mutex::_no_safepoint_check_flag)</span></span>;</span><br><span class=\"line\">      <span class=\"comment\">// Make sure the watcher thread can be started by WatcherThread::start()</span></span><br><span class=\"line\">      <span class=\"comment\">// or by dynamic enrollment.</span></span><br><span class=\"line\">      WatcherThread::make_startable();</span><br><span class=\"line\">      <span class=\"comment\">// Start up the WatcherThread if there are any periodic tasks</span></span><br><span class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">NOTE:</span>  All PeriodicTasks should be registered by now. If they</span></span><br><span class=\"line\">      <span class=\"comment\">//   aren't, late joiners might appear to start slowly (we might</span></span><br><span class=\"line\">      <span class=\"comment\">//   take a while to process their first tick).</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (PeriodicTask::num_tasks() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          WatcherThread::start();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Give os specific code one last chance to start</span></span><br><span class=\"line\">  os::init_3();</span><br><span class=\"line\"></span><br><span class=\"line\">  create_vm_timer.end();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>init_globals()</code>方法位于<code>hotspot/src/share/vm/runtime/init.cpp</code>用来初始化全局模块:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jint <span class=\"title\">init_globals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  HandleMark hm;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化各子系统的监控及管理服务</span></span><br><span class=\"line\">  <span class=\"comment\">// JMX、线程和同步子系统、类加载子系统的监控和管理</span></span><br><span class=\"line\">  management_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化字节码表，如istore、iload、iadd</span></span><br><span class=\"line\">  bytecodes_init();</span><br><span class=\"line\">  <span class=\"comment\">// 类加载器初始化</span></span><br><span class=\"line\">  classLoader_init();</span><br><span class=\"line\">  <span class=\"comment\">// 代码缓存池初始化</span></span><br><span class=\"line\">  codeCache_init();</span><br><span class=\"line\">  <span class=\"comment\">// VM版本初始化</span></span><br><span class=\"line\">  VM_Version_init();</span><br><span class=\"line\">  <span class=\"comment\">// 系统初始化</span></span><br><span class=\"line\">  os_init_globals();</span><br><span class=\"line\">  stubRoutines_init1();</span><br><span class=\"line\">  <span class=\"comment\">// ============================</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化堆以及决定所使用GC策略</span></span><br><span class=\"line\">  <span class=\"comment\">// ============================</span></span><br><span class=\"line\">  jint status = universe_init();  <span class=\"comment\">// dependent on codeCache_init and</span></span><br><span class=\"line\">                                  <span class=\"comment\">// stubRoutines_init1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化解析器</span></span><br><span class=\"line\">  interpreter_init();  <span class=\"comment\">// before any methods loaded</span></span><br><span class=\"line\">  invocationCounter_init();  <span class=\"comment\">// before any methods loaded</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化MarkSweep</span></span><br><span class=\"line\">  marksweep_init();</span><br><span class=\"line\">  accessFlags_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化操作码模板表</span></span><br><span class=\"line\">  templateTable_init();</span><br><span class=\"line\">  InterfaceSupport_init();</span><br><span class=\"line\">  SharedRuntime::generate_stubs();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化语法表及系统字典等</span></span><br><span class=\"line\">  universe2_init();  <span class=\"comment\">// dependent on codeCache_init and stubRoutines_init1</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化软引用时间戳表并设定软引用清除策略</span></span><br><span class=\"line\">  referenceProcessor_init();</span><br><span class=\"line\">  jni_handles_init();</span><br><span class=\"line\">  <span class=\"comment\">// 代码数据结构的必要性检查（仅限debug版本）</span></span><br><span class=\"line\">  vmStructs_init();</span><br><span class=\"line\">  vtableStubs_init();</span><br><span class=\"line\">  InlineCacheBuffer_init();</span><br><span class=\"line\">  <span class=\"comment\">// oracle编译器初始化（oracle编译器是一个编译器开关接口）</span></span><br><span class=\"line\">  compilerOracle_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化编译策略（根据启动参数决定编译策略）</span></span><br><span class=\"line\">  compilationPolicy_init();</span><br><span class=\"line\">  compileBroker_init();</span><br><span class=\"line\">  VMRegImpl::set_regName();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!universe_post_init()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ERR;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  javaClasses_init();   <span class=\"comment\">// must happen after vtable initialization</span></span><br><span class=\"line\">  stubRoutines_init2(); <span class=\"comment\">// note: StubRoutines need 2-phase init</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All the flags that get adjusted by VM_Version_init and os::init_2</span></span><br><span class=\"line\">  <span class=\"comment\">// have been set so dump the flags now.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (PrintFlagsFinal) &#123;</span><br><span class=\"line\">    CommandLineFlags::printFlags(tty, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>universe_init()</code>方法位于<code>hotspot/src/share/vm/memory/universe.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jint <span class=\"title\">universe_init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  assert(!Universe::_fully_initialized, <span class=\"string\">\"called after initialize_vtables\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"number\">1</span> &lt;&lt; LogHeapWordSize == <span class=\"keyword\">sizeof</span>(HeapWord),</span><br><span class=\"line\">         <span class=\"string\">\"LogHeapWordSize is incorrect.\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"keyword\">sizeof</span>(oop) &gt;= <span class=\"keyword\">sizeof</span>(HeapWord), <span class=\"string\">\"HeapWord larger than oop?\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"keyword\">sizeof</span>(oop) % <span class=\"keyword\">sizeof</span>(HeapWord) == <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"oop size is not not a multiple of HeapWord size\"</span>);</span><br><span class=\"line\">  <span class=\"function\">TraceTime <span class=\"title\">timer</span><span class=\"params\">(<span class=\"string\">\"Genesis\"</span>, TraceStartupTime)</span></span>;</span><br><span class=\"line\">  GC_locker::lock();  <span class=\"comment\">// do not allow gc during bootstrapping</span></span><br><span class=\"line\">  JavaClasses::compute_hard_coded_offsets();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Get map info from shared archive file.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (DumpSharedSpaces)</span><br><span class=\"line\">    UseSharedSpaces = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  FileMapInfo* mapinfo = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseSharedSpaces) &#123;</span><br><span class=\"line\">    mapinfo = NEW_C_HEAP_OBJ(FileMapInfo, mtInternal);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mapinfo, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(FileMapInfo));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Open the shared archive file, read and validate the header. If</span></span><br><span class=\"line\">    <span class=\"comment\">// initialization files, shared spaces [UseSharedSpaces] are</span></span><br><span class=\"line\">    <span class=\"comment\">// disabled and the file is closed.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mapinfo-&gt;initialize()) &#123;</span><br><span class=\"line\">      FileMapInfo::set_current_info(mapinfo);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      assert(!mapinfo-&gt;is_open() &amp;&amp; !UseSharedSpaces,</span><br><span class=\"line\">             <span class=\"string\">\"archive file not closed or shared spaces not disabled.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//===================================</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化堆</span></span><br><span class=\"line\">  <span class=\"comment\">// 包括创建及初始化各分区代，设定空间比例大小，回收策略等</span></span><br><span class=\"line\">  <span class=\"comment\">// 流程：根据启动参数决定使用的回收策略，初始化回收策略时会指定所使用的代规范，</span></span><br><span class=\"line\">  <span class=\"comment\">//       最后根据规范创建对应类型的回收堆。i.e.</span></span><br><span class=\"line\">  <span class=\"comment\">//      arguments -&gt; policy -&gt; spec -&gt; heap</span></span><br><span class=\"line\">  <span class=\"comment\">//===================================</span></span><br><span class=\"line\">  jint status = Universe::initialize_heap();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We have a heap so create the methodOop caches before</span></span><br><span class=\"line\">  <span class=\"comment\">// CompactingPermGenGen::initialize_oops() tries to populate them.</span></span><br><span class=\"line\">  Universe::_finalizer_register_cache = <span class=\"keyword\">new</span> LatestMethodOopCache();</span><br><span class=\"line\">  Universe::_loader_addClass_cache    = <span class=\"keyword\">new</span> LatestMethodOopCache();</span><br><span class=\"line\">  Universe::_pd_implies_cache         = <span class=\"keyword\">new</span> LatestMethodOopCache();</span><br><span class=\"line\">  Universe::_reflect_invoke_cache     = <span class=\"keyword\">new</span> ActiveMethodOopsCache();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseSharedSpaces) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Read the data structures supporting the shared spaces (shared</span></span><br><span class=\"line\">    <span class=\"comment\">// system dictionary, symbol table, etc.).  After that, access to</span></span><br><span class=\"line\">    <span class=\"comment\">// the file (other than the mapped regions) is no longer needed, and</span></span><br><span class=\"line\">    <span class=\"comment\">// the file is closed. Closing the file does not affect the</span></span><br><span class=\"line\">    <span class=\"comment\">// currently mapped regions.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    CompactingPermGenGen::initialize_oops();</span><br><span class=\"line\">    mapinfo-&gt;close();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    SymbolTable::create_table();</span><br><span class=\"line\">    StringTable::create_table();</span><br><span class=\"line\">    ClassLoader::create_package_info_table();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>initialize_heap()方法如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint Universe::initialize_heap() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果使用并行GC</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseParallelGC) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SERIALGC</span></span><br><span class=\"line\">    <span class=\"comment\">// 回收堆类型使用并行回收堆</span></span><br><span class=\"line\">    Universe::_collectedHeap = <span class=\"keyword\">new</span> ParallelScavengeHeap();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseParallelGC not supported in java kernel vm.\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseG1GC) &#123;</span><br><span class=\"line\">#ifndef SERIALGC</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用G1回收，设定回收器策略和回收堆类型为G1CollectorPolicy和G1CollectedHeap</span></span><br><span class=\"line\">    G1CollectorPolicy* g1p = <span class=\"keyword\">new</span> G1CollectorPolicy();</span><br><span class=\"line\">    G1CollectedHeap* g1h = <span class=\"keyword\">new</span> G1CollectedHeap(g1p);</span><br><span class=\"line\">    Universe::_collectedHeap = g1h;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseG1GC not supported in java kernel vm.\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    GenCollectorPolicy *gc_policy;</span><br><span class=\"line\">    <span class=\"comment\">// 使用串行回收</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UseSerialGC) &#123;</span><br><span class=\"line\">      gc_policy = <span class=\"keyword\">new</span> MarkSweepPolicy();</span><br><span class=\"line\">    <span class=\"comment\">// 使用并发回收</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class=\"line\">#ifndef SERIALGC</span><br><span class=\"line\">      <span class=\"comment\">// 是否使用自适应策略</span></span><br><span class=\"line\">      <span class=\"comment\">// ASConcurrentMarkSweepPolicy继承自ConcurrentMarkSweepPolicy，</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (UseAdaptiveSizePolicy) &#123;</span><br><span class=\"line\">        gc_policy = <span class=\"keyword\">new</span> ASConcurrentMarkSweepPolicy();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        gc_policy = <span class=\"keyword\">new</span> ConcurrentMarkSweepPolicy();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>   <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseConcMarkSweepGC not supported in java kernel vm.\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\">    <span class=\"comment\">// 默认使用标记清除算法</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// default old generation</span></span><br><span class=\"line\">      gc_policy = <span class=\"keyword\">new</span> MarkSweepPolicy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 回收策略类型体系图</span></span><br><span class=\"line\">    <span class=\"comment\">// AllocatedObj</span></span><br><span class=\"line\">    <span class=\"comment\">//    └── CHeapObj</span></span><br><span class=\"line\">    <span class=\"comment\">//        └── CollectorPolicy</span></span><br><span class=\"line\">    <span class=\"comment\">//            └── GenCollectorPolicy</span></span><br><span class=\"line\">    <span class=\"comment\">//                └── TwoGenerationCollectorPolicy</span></span><br><span class=\"line\">    <span class=\"comment\">//                    └── ConcurrentMarkSweepPolicy</span></span><br><span class=\"line\">    <span class=\"comment\">//                        └── ASConcurrentMarkSweepPolicy</span></span><br><span class=\"line\">    Universe::_collectedHeap = <span class=\"keyword\">new</span> GenCollectedHeap(gc_policy);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//===================================</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化堆空间</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里调用GenCollectedHeap::initialize()方法， 真正向操作系统申请内存</span></span><br><span class=\"line\">  <span class=\"comment\">//===================================</span></span><br><span class=\"line\">  jint status = Universe::heap()-&gt;initialize();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _LP64</span></span><br><span class=\"line\">  <span class=\"comment\">// 在LP64数据模型下是否开启对象指针压缩</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseCompressedOops) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Subtract a page because something can get allocated at heap base.</span></span><br><span class=\"line\">    <span class=\"comment\">// This also makes implicit null checking work, because the</span></span><br><span class=\"line\">    <span class=\"comment\">// memory+1 page below heap_base needs to cause a signal.</span></span><br><span class=\"line\">    <span class=\"comment\">// See needs_explicit_null_check.</span></span><br><span class=\"line\">    <span class=\"comment\">// Only set the heap base for compressed oops because it indicates</span></span><br><span class=\"line\">    <span class=\"comment\">// compressed oops for pstack code.</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> verbose = PrintCompressedOopsMode || (PrintMiscellaneous &amp;&amp; Verbose);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">      tty-&gt;cr();</span><br><span class=\"line\">      tty-&gt;print(<span class=\"string\">\"heap address: \"</span> PTR_FORMAT <span class=\"string\">\", size: \"</span> SIZE_FORMAT <span class=\"string\">\" MB\"</span>,</span><br><span class=\"line\">                 Universe::heap()-&gt;base(), Universe::heap()-&gt;reserved_region().byte_size()/M);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">uint64_t</span>)Universe::heap()-&gt;reserved_region().end() &gt; OopEncodingHeapMax) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Can't reserve heap below 32Gb.</span></span><br><span class=\"line\">      Universe::set_narrow_oop_base(Universe::heap()-&gt;base() - os::vm_page_size());</span><br><span class=\"line\">      Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">        tty-&gt;print(<span class=\"string\">\", %s: \"</span>PTR_FORMAT,</span><br><span class=\"line\">            narrow_oop_mode_to_string(HeapBasedNarrowOop),</span><br><span class=\"line\">            Universe::narrow_oop_base());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      Universe::set_narrow_oop_base(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">        tty-&gt;print(<span class=\"string\">\", %s\"</span>, narrow_oop_mode_to_string(ZeroBasedNarrowOop));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN64</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!Universe::narrow_oop_use_implicit_null_checks()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Don't need guard page for implicit checks in indexed addressing</span></span><br><span class=\"line\">        <span class=\"comment\">// mode with zero based Compressed Oops.</span></span><br><span class=\"line\">        Universe::set_narrow_oop_use_implicit_null_checks(<span class=\"literal\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//  _WIN64</span></span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>((<span class=\"keyword\">uint64_t</span>)Universe::heap()-&gt;reserved_region().end() &gt; NarrowOopHeapMax) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can't reserve heap below 4Gb.</span></span><br><span class=\"line\">        Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Universe::set_narrow_oop_shift(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">          tty-&gt;print(<span class=\"string\">\", %s\"</span>, narrow_oop_mode_to_string(UnscaledNarrowOop));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">      tty-&gt;cr();</span><br><span class=\"line\">      tty-&gt;cr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  assert(Universe::narrow_oop_base() == (Universe::heap()-&gt;base() - os::vm_page_size()) ||</span><br><span class=\"line\">         Universe::narrow_oop_base() == <span class=\"literal\">NULL</span>, <span class=\"string\">\"invalid value\"</span>);</span><br><span class=\"line\">  assert(Universe::narrow_oop_shift() == LogMinObjAlignmentInBytes ||</span><br><span class=\"line\">         Universe::narrow_oop_shift() == <span class=\"number\">0</span>, <span class=\"string\">\"invalid value\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We will never reach the CATCH below since Exceptions::_throw will cause</span></span><br><span class=\"line\">  <span class=\"comment\">// the VM to exit if an exception is thrown during initialization</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果使用TLAB则对其进行初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseTLAB) &#123;</span><br><span class=\"line\">    assert(Universe::heap()-&gt;supports_tlab_allocation(),</span><br><span class=\"line\">           <span class=\"string\">\"Should support thread-local allocation buffers\"</span>);</span><br><span class=\"line\">    ThreadLocalAllocBuffer::startup_initialization();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的代码中<code>Universe::heap()-&gt;initialize()</code>会调用GenCollectedHeap的<code>initialize()</code>方法：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint GenCollectedHeap::initialize() &#123;</span><br><span class=\"line\">  CollectedHeap::pre_initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  _n_gens = gen_policy()-&gt;number_of_generations();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// While there are no constraints in the GC code that HeapWordSize</span></span><br><span class=\"line\">  <span class=\"comment\">// be any particular value, there are multiple other areas in the</span></span><br><span class=\"line\">  <span class=\"comment\">// system which believe this to be true (e.g. oop-&gt;object_size in some</span></span><br><span class=\"line\">  <span class=\"comment\">// cases incorrectly returns the size in wordSize units rather than</span></span><br><span class=\"line\">  <span class=\"comment\">// HeapWordSize).</span></span><br><span class=\"line\">  guarantee(HeapWordSize == wordSize, <span class=\"string\">\"HeapWordSize must equal wordSize\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The heap must be at least as aligned as generations.</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> alignment = Generation::GenGrain;</span><br><span class=\"line\"></span><br><span class=\"line\">  _gen_specs = gen_policy()-&gt;generations();</span><br><span class=\"line\">  PermanentGenerationSpec *perm_gen_spec =</span><br><span class=\"line\">                                collector_policy()-&gt;permanent_generation();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Make sure the sizes are all aligned.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; _n_gens; i++) &#123;</span><br><span class=\"line\">    _gen_specs[i]-&gt;align(alignment);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  perm_gen_spec-&gt;align(alignment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If we are dumping the heap, then allocate a wasted block of address</span></span><br><span class=\"line\">  <span class=\"comment\">// space in order to push the heap to a lower address.  This extra</span></span><br><span class=\"line\">  <span class=\"comment\">// address range allows for other (or larger) libraries to be loaded</span></span><br><span class=\"line\">  <span class=\"comment\">// without them occupying the space required for the shared spaces.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (DumpSharedSpaces) &#123;</span><br><span class=\"line\">    uintx reserved = <span class=\"number\">0</span>;</span><br><span class=\"line\">    uintx block_size = <span class=\"number\">64</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (reserved &lt; SharedDummyBlockSize) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">char</span>* dummy = os::reserve_memory(block_size);</span><br><span class=\"line\">      reserved += block_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Allocate space for the heap.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* heap_address;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> total_reserved = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n_covered_regions = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\">ReservedSpace <span class=\"title\">heap_rs</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">//分配区域，三个区域:YoungGen,OldGen,PermGen</span></span><br><span class=\"line\">  heap_address = allocate(alignment, perm_gen_spec, &amp;total_reserved,</span><br><span class=\"line\">                          &amp;n_covered_regions, &amp;heap_rs);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseSharedSpaces) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!heap_rs.is_reserved() || heap_address != heap_rs.base()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (heap_rs.is_reserved()) &#123;</span><br><span class=\"line\">        heap_rs.release();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      FileMapInfo* mapinfo = FileMapInfo::current_info();</span><br><span class=\"line\">      mapinfo-&gt;fail_continue(<span class=\"string\">\"Unable to reserve shared region.\"</span>);</span><br><span class=\"line\">      allocate(alignment, perm_gen_spec, &amp;total_reserved, &amp;n_covered_regions,</span><br><span class=\"line\">               &amp;heap_rs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!heap_rs.is_reserved()) &#123;</span><br><span class=\"line\">    vm_shutdown_during_initialization(</span><br><span class=\"line\">      <span class=\"string\">\"Could not reserve enough space for object heap\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//_reserved区域包括Y,O,P三个区域</span></span><br><span class=\"line\">  _reserved = MemRegion((HeapWord*)heap_rs.base(),</span><br><span class=\"line\">                        (HeapWord*)(heap_rs.base() + heap_rs.size()));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// It is important to do this in a way such that concurrent readers can't</span></span><br><span class=\"line\">  <span class=\"comment\">// temporarily think somethings in the heap.  (Seen this happen in asserts.)</span></span><br><span class=\"line\">  _reserved.set_word_size(<span class=\"number\">0</span>);</span><br><span class=\"line\">  _reserved.set_start((HeapWord*)heap_rs.base());</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> actual_heap_size = heap_rs.size() - perm_gen_spec-&gt;misc_data_size()</span><br><span class=\"line\">                                           - perm_gen_spec-&gt;misc_code_size();</span><br><span class=\"line\">  _reserved.set_end((HeapWord*)(heap_rs.base() + actual_heap_size));</span><br><span class=\"line\"></span><br><span class=\"line\">  _rem_set = collector_policy()-&gt;create_rem_set(_reserved, n_covered_regions);</span><br><span class=\"line\">  set_barrier_set(rem_set()-&gt;bs());</span><br><span class=\"line\"></span><br><span class=\"line\">  _gch = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; _n_gens; i++) &#123;</span><br><span class=\"line\">    ReservedSpace this_rs = heap_rs.first_part(_gen_specs[i]-&gt;max_size(),</span><br><span class=\"line\">                                              UseSharedSpaces, UseSharedSpaces);</span><br><span class=\"line\">    _gens[i] = _gen_specs[i]-&gt;init(this_rs, i, rem_set());</span><br><span class=\"line\">    <span class=\"comment\">// tag generations in JavaHeap</span></span><br><span class=\"line\">    MemTracker::record_virtual_memory_type((address)this_rs.base(), mtJavaHeap);</span><br><span class=\"line\">    heap_rs = heap_rs.last_part(_gen_specs[i]-&gt;max_size());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _perm_gen = perm_gen_spec-&gt;init(heap_rs, PermSize, rem_set());</span><br><span class=\"line\">  <span class=\"comment\">// tag PermGen</span></span><br><span class=\"line\">  MemTracker::record_virtual_memory_type((address)heap_rs.base(), mtJavaHeap);</span><br><span class=\"line\"></span><br><span class=\"line\">  clear_incremental_collection_failed();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SERIALGC</span></span><br><span class=\"line\">  <span class=\"comment\">// If we are running CMS, create the collector responsible</span></span><br><span class=\"line\">  <span class=\"comment\">// for collecting the CMS generations.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (collector_policy()-&gt;is_concurrent_mark_sweep_policy()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> success = create_cms_collector();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此JVM的初始化全部完成，至于内存策略的计算部分详细内容请阅读Hotspot源码，这里只作抛砖引玉。</p>\n","site":{"data":{}},"excerpt":"<p>接上篇文章从Hotpost源码角度深入分析Java程序启动过程-创建 ，本文将继续介绍JVM启动过程的初始化部分。</p>\n<p>在上篇文章中在执行LoadJavaVM方法的时候将libjvm.so内的方法<code>JNI_CreateJavaVM</code>和<code>JNI_GetDefaultJavaVMInitArgs</code>符号引用挂载到了结构体<code>InvocationFunctions</code>上，并且在执行InitializeJVM方法的时候进行了调用。</p>\n<p>这里执行了JNI调用<code>JNI_CreateJavaVM</code>，文件位于<code>hotspot/src/share/vm/prims/jni.cpp</code>。方法内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"function\">JNI_IMPORT_OR_EXPORT_ jint JNICALL <span class=\"title\">JNI_CreateJavaVM</span><span class=\"params\">(JavaVM **vm, <span class=\"keyword\">void</span> **penv, <span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 略去部分非重要内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Certain errors during initialization are recoverable and do not</span></span><br><span class=\"line\"><span class=\"comment\">   * prevent this method from being called again at a later time</span></span><br><span class=\"line\"><span class=\"comment\">   * (perhaps with different arguments).  However, at a certain</span></span><br><span class=\"line\"><span class=\"comment\">   * point during initialization if an error occurs we cannot allow</span></span><br><span class=\"line\"><span class=\"comment\">   * this function to be called again (or it will crash).  In those</span></span><br><span class=\"line\"><span class=\"comment\">   * situations, the 'canTryAgain' flag is set to false, which atomically</span></span><br><span class=\"line\"><span class=\"comment\">   * sets safe_to_recreate_vm to 1, such that any new call to</span></span><br><span class=\"line\"><span class=\"comment\">   * JNI_CreateJavaVM will immediately fail using the above logic.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> can_try_again = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">//========================================</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过Threads模块初始化VM并创建VM线程</span></span><br><span class=\"line\">  <span class=\"comment\">//========================================</span></span><br><span class=\"line\">  result = Threads::create_vm((JavaVMInitArgs*) args, &amp;can_try_again);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result == JNI_OK) &#123;</span><br><span class=\"line\">    JavaThread *thread = JavaThread::current();</span><br><span class=\"line\">    <span class=\"comment\">/* thread is thread_in_vm here */</span></span><br><span class=\"line\">    *vm = (JavaVM *)(&amp;main_vm);</span><br><span class=\"line\">    *(JNIEnv**)penv = thread-&gt;jni_environment();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Tracks the time application was running before GC</span></span><br><span class=\"line\">    RuntimeService::record_application_start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Notify JVMTI</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JvmtiExport::should_post_thread_life()) &#123;</span><br><span class=\"line\">       JvmtiExport::post_thread_start(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    EventThreadStart event;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.should_commit()) &#123;</span><br><span class=\"line\">      event.set_javalangthread(java_lang_Thread::thread_id(thread-&gt;threadObj()));</span><br><span class=\"line\">      event.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 略去部分内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>这里调用了<code>hotspot/src/share/vm/runtime/thread.cpp</code>的<code>create_vm</code>方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint Threads::create_vm(JavaVMInitArgs* args, <span class=\"keyword\">bool</span>* canTryAgain) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">JDK_Version_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Check version</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!is_supported_jni_version(args-&gt;version)) <span class=\"keyword\">return</span> JNI_EVERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the output stream module</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化输出流</span></span><br><span class=\"line\">  ostream_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Process java launcher properties.</span></span><br><span class=\"line\">  <span class=\"comment\">// 处理Java启动参数，如-Dsun.java.launcher*</span></span><br><span class=\"line\">  Arguments::process_sun_java_launcher_properties(args);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the os module before using TLS</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化操作系统模块，如页大小，处理器数量，系统时钟等</span></span><br><span class=\"line\">  os::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize system properties.</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化系统属性，其中分为【可读属性】和【可读写属性】</span></span><br><span class=\"line\">  <span class=\"comment\">// 可读属性：</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.specification.name</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.version</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.name</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.info</span></span><br><span class=\"line\">  <span class=\"comment\">// 可读写属性：</span></span><br><span class=\"line\">  <span class=\"comment\">// java.ext.dirs</span></span><br><span class=\"line\">  <span class=\"comment\">// java.endorsed.dirs</span></span><br><span class=\"line\">  <span class=\"comment\">// sun.boot.library.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.library.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.home</span></span><br><span class=\"line\">  <span class=\"comment\">// sun.boot.class.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.class.path</span></span><br><span class=\"line\">  Arguments::init_system_properties();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// So that JDK version can be used as a discrimintor when parsing arguments</span></span><br><span class=\"line\">  JDK_Version_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Update/Initialize System properties after JDK version number is known</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置java.vm.specification.vendor属性（1.6之前是Sun Microsystems Inc. 1.7之后是Oracle Corporation）</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置java.vm.specification.version和java.vm.vendor属性</span></span><br><span class=\"line\">  Arguments::init_version_specific_system_properties();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Parse arguments</span></span><br><span class=\"line\">  <span class=\"comment\">// 解析启动参数，如-XX:Flags=、-XX:+PrintVMOptions、-XX:+PrintFlagsInitial etc.</span></span><br><span class=\"line\">  jint parse_result = Arguments::parse(args);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parse_result != JNI_OK) <span class=\"keyword\">return</span> parse_result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (PauseAtStartup) &#123;</span><br><span class=\"line\">    os::pause();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> USDT2</span></span><br><span class=\"line\">  HS_DTRACE_PROBE(hotspot, vm__init__begin);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span> <span class=\"comment\">/* USDT2 */</span></span></span><br><span class=\"line\">  HOTSPOT_VM_INIT_BEGIN();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* USDT2 */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Record VM creation timing statistics</span></span><br><span class=\"line\">  TraceVmCreationTime create_vm_timer;</span><br><span class=\"line\">  create_vm_timer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Timing (must come after argument parsing)</span></span><br><span class=\"line\">  <span class=\"function\">TraceTime <span class=\"title\">timer</span><span class=\"params\">(<span class=\"string\">\"Create VM\"</span>, TraceStartupTime)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the os module after parsing the args</span></span><br><span class=\"line\">  jint os_init_2_result = os::init_2();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (os_init_2_result != JNI_OK) <span class=\"keyword\">return</span> os_init_2_result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// intialize TLS</span></span><br><span class=\"line\">  ThreadLocalStorage::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Bootstrap native memory tracking, so it can start recording memory</span></span><br><span class=\"line\">  <span class=\"comment\">// activities before worker thread is started. This is the first phase</span></span><br><span class=\"line\">  <span class=\"comment\">// of bootstrapping, VM is currently running in single-thread mode.</span></span><br><span class=\"line\">  MemTracker::bootstrap_single_thread();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize output stream logging</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化GC日志输出流，用来处理-Xloggc参数</span></span><br><span class=\"line\">  ostream_init_log();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Convert -Xrun to -agentlib: if there is no JVM_OnLoad</span></span><br><span class=\"line\">  <span class=\"comment\">// Must be before create_vm_init_agents()</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">    convert_vm_init_libraries_to_agents();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Launch -agentlib/-agentpath and converted -Xrun agents</span></span><br><span class=\"line\">  <span class=\"comment\">// 加载agent库</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::init_agents_at_startup()) &#123;</span><br><span class=\"line\">    create_vm_init_agents();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize Threads state</span></span><br><span class=\"line\">  _thread_list = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  _number_of_threads = <span class=\"number\">0</span>;</span><br><span class=\"line\">  _number_of_non_daemon_threads = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize global data structures and create system classes in heap</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化全局数据数据结构及系统类，包括：</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化Java基础类型</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化时间队列</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化锁</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化chunkpool</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化性能数据统计模块</span></span><br><span class=\"line\">  vm_init_globals();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Attach the main thread to this os thread</span></span><br><span class=\"line\">  JavaThread* main_thread = <span class=\"keyword\">new</span> JavaThread();</span><br><span class=\"line\">  main_thread-&gt;set_thread_state(_thread_in_vm);</span><br><span class=\"line\">  main_thread-&gt;record_stack_base_and_size();</span><br><span class=\"line\">  main_thread-&gt;initialize_thread_local_storage();</span><br><span class=\"line\"></span><br><span class=\"line\">  main_thread-&gt;set_active_handles(JNIHandleBlock::allocate_block());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!main_thread-&gt;set_as_starting_thread()) &#123;</span><br><span class=\"line\">    vm_shutdown_during_initialization(</span><br><span class=\"line\">      <span class=\"string\">\"Failed necessary internal allocation. Out of swap space\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> main_thread;</span><br><span class=\"line\">    *canTryAgain = <span class=\"literal\">false</span>; <span class=\"comment\">// don't let caller call JNI_CreateJavaVM again</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Enable guard page *after* os::create_main_thread(), otherwise it would</span></span><br><span class=\"line\">  <span class=\"comment\">// crash Linux VM, see notes in os_linux.cpp.</span></span><br><span class=\"line\">  main_thread-&gt;create_stack_guard_pages();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize Java-Level synchronization subsystem</span></span><br><span class=\"line\">  ObjectMonitor::Initialize() ;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Second phase of bootstrapping, VM is about entering multi-thread mode</span></span><br><span class=\"line\">  MemTracker::bootstrap_multi_thread();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize global modules</span></span><br><span class=\"line\">  <span class=\"comment\">// ========================================</span></span><br><span class=\"line\">  <span class=\"comment\">// IMPORTANT!!! 初始化全局模块</span></span><br><span class=\"line\">  <span class=\"comment\">// ========================================</span></span><br><span class=\"line\">  jint status = init_globals();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> main_thread;</span><br><span class=\"line\">    *canTryAgain = <span class=\"literal\">false</span>; <span class=\"comment\">// don't let caller call JNI_CreateJavaVM again</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Should be done after the heap is fully created</span></span><br><span class=\"line\">  main_thread-&gt;cache_global_variables();</span><br><span class=\"line\"></span><br><span class=\"line\">  HandleMark hm;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123; <span class=\"function\">MutexLocker <span class=\"title\">mu</span><span class=\"params\">(Threads_lock)</span></span>;</span><br><span class=\"line\">    Threads::add(main_thread);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Any JVMTI raw monitors entered in onload will transition into</span></span><br><span class=\"line\">  <span class=\"comment\">// real raw monitor. VM is setup enough here for raw monitor enter.</span></span><br><span class=\"line\">  JvmtiExport::transition_pending_onload_raw_monitors();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Fully start NMT</span></span><br><span class=\"line\">  MemTracker::start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create the VMThread</span></span><br><span class=\"line\">  &#123; <span class=\"function\">TraceTime <span class=\"title\">timer</span><span class=\"params\">(<span class=\"string\">\"Start VMThread\"</span>, TraceStartupTime)</span></span>;</span><br><span class=\"line\">    VMThread::create();</span><br><span class=\"line\">    Thread* vmthread = VMThread::vm_thread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!os::create_thread(vmthread, os::vm_thread))</span><br><span class=\"line\">      vm_exit_during_initialization(<span class=\"string\">\"Cannot create VM thread. Out of system resources.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Wait for the VM thread to become ready, and VMThread::run to initialize</span></span><br><span class=\"line\">    <span class=\"comment\">// Monitors can have spurious returns, must always check another state flag</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"function\">MutexLocker <span class=\"title\">ml</span><span class=\"params\">(Notify_lock)</span></span>;</span><br><span class=\"line\">      os::start_thread(vmthread);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (vmthread-&gt;active_handles() == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        Notify_lock-&gt;wait();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  assert (Universe::is_fully_initialized(), <span class=\"string\">\"not initialized\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (VerifyBeforeGC &amp;&amp; VerifyGCStartAt == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    Universe::heap()-&gt;prepare_for_verify();</span><br><span class=\"line\">    Universe::verify();   <span class=\"comment\">// make sure we're starting with a clean slate</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  EXCEPTION_MARK;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// At this point, the Universe is initialized, but we have not executed</span></span><br><span class=\"line\">  <span class=\"comment\">// any byte code.  Now is a good time (the only time) to dump out the</span></span><br><span class=\"line\">  <span class=\"comment\">// internal state of the JVM for sharing.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (DumpSharedSpaces) &#123;</span><br><span class=\"line\">    Universe::heap()-&gt;preload_and_dump(CHECK_0);</span><br><span class=\"line\">    ShouldNotReachHere();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Always call even when there are not JVMTI environments yet, since environments</span></span><br><span class=\"line\">  <span class=\"comment\">// may be attached late and JVMTI must track phases of VM execution</span></span><br><span class=\"line\">  JvmtiExport::enter_start_phase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.</span></span><br><span class=\"line\">  JvmtiExport::post_vm_start();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">TraceTime <span class=\"title\">timer</span><span class=\"params\">(<span class=\"string\">\"Initialize java.lang classes\"</span>, TraceStartupTime)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (EagerXrunInit &amp;&amp; Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">      create_vm_init_libraries();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (InitializeJavaLangString) &#123;</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_String(), CHECK_0);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.String not initialized\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initialize java_lang.System (needed before creating the thread)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (InitializeJavaLangSystem) &#123;</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_System(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ThreadGroup(), CHECK_0);</span><br><span class=\"line\">      Handle thread_group = create_initial_thread_group(CHECK_0);</span><br><span class=\"line\">      Universe::set_main_thread_group(thread_group());</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_Thread(), CHECK_0);</span><br><span class=\"line\">      oop thread_object = create_initial_thread(thread_group, main_thread, CHECK_0);</span><br><span class=\"line\">      main_thread-&gt;set_threadObj(thread_object);</span><br><span class=\"line\">      <span class=\"comment\">// Set thread status to running since main thread has</span></span><br><span class=\"line\">      <span class=\"comment\">// been started and running.</span></span><br><span class=\"line\">      java_lang_Thread::set_thread_status(thread_object,</span><br><span class=\"line\">                                          java_lang_Thread::RUNNABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// The VM preresolve methods to these classes. Make sure that get initialized</span></span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_reflect_Method(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ref_Finalizer(),  CHECK_0);</span><br><span class=\"line\">      <span class=\"comment\">// The VM creates &amp; returns objects of this class. Make sure it's initialized.</span></span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_Class(), CHECK_0);</span><br><span class=\"line\">      call_initializeSystemClass(CHECK_0);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// get the Java runtime name after java.lang.System is initialized</span></span><br><span class=\"line\">      JDK_Version::set_runtime_name(get_java_runtime_name(THREAD));</span><br><span class=\"line\">      JDK_Version::set_runtime_version(get_java_runtime_version(THREAD));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.System not initialized\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// an instance of OutOfMemory exception has been allocated earlier</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (InitializeJavaLangExceptionsErrors) &#123;</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_OutOfMemoryError(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_NullPointerException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ClassCastException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ArrayStoreException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_ArithmeticException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_StackOverflowError(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_IllegalMonitorStateException(), CHECK_0);</span><br><span class=\"line\">      initialize_class(vmSymbols::java_lang_IllegalArgumentException(), CHECK_0);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.OutOfMemoryError has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.NullPointerException has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.ClassCastException has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.ArrayStoreException has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.ArithmeticException has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.StackOverflowError has not been initialized\"</span>);</span><br><span class=\"line\">      warning(<span class=\"string\">\"java.lang.IllegalArgumentException has not been initialized\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  initialize_class(vmSymbols::java_lang_Compiler(), CHECK_0);</span><br><span class=\"line\"></span><br><span class=\"line\">  reset_vm_info_property(CHECK_0);</span><br><span class=\"line\"></span><br><span class=\"line\">  quicken_jni_functions();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Must be run after init_ft which initializes ft_enabled</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (TRACE_INITIALIZE() != JNI_OK) &#123;</span><br><span class=\"line\">    vm_exit_during_initialization(<span class=\"string\">\"Failed to initialize tracing backend\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Set flag that basic initialization has completed. Used by exceptions and various</span></span><br><span class=\"line\">  <span class=\"comment\">// debug stuff, that does not work until all basic classes have been initialized.</span></span><br><span class=\"line\">  set_init_completed();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> USDT2</span></span><br><span class=\"line\">  HS_DTRACE_PROBE(hotspot, vm__init__end);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span> <span class=\"comment\">/* USDT2 */</span></span></span><br><span class=\"line\">  HOTSPOT_VM_INIT_END();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* USDT2 */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// record VM initialization completion time</span></span><br><span class=\"line\">  <span class=\"comment\">// 向VM管理模块发送初始化完成信号</span></span><br><span class=\"line\">  Management::record_vm_init_completed();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Compute system loader. Note that this has to occur after set_init_completed, since</span></span><br><span class=\"line\">  <span class=\"comment\">// valid exceptions may be thrown in the process.</span></span><br><span class=\"line\">  <span class=\"comment\">// Note that we do not use CHECK_0 here since we are inside an EXCEPTION_MARK and</span></span><br><span class=\"line\">  <span class=\"comment\">// set_init_completed has just been called, causing exceptions not to be shortcut</span></span><br><span class=\"line\">  <span class=\"comment\">// anymore. We call vm_exit_during_initialization directly instead.</span></span><br><span class=\"line\">  <span class=\"comment\">// 载入classloader</span></span><br><span class=\"line\">  SystemDictionary::compute_java_system_loader(THREAD);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">    vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SERIALGC</span></span><br><span class=\"line\">  <span class=\"comment\">// Support for ConcurrentMarkSweep. This should be cleaned up</span></span><br><span class=\"line\">  <span class=\"comment\">// and better encapsulated. The ugly nested if test would go away</span></span><br><span class=\"line\">  <span class=\"comment\">// once things are properly refactored. XXX YSR</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseConcMarkSweepGC || UseG1GC) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class=\"line\">      ConcurrentMarkSweepThread::makeSurrogateLockerThread(THREAD);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ConcurrentMarkThread::makeSurrogateLockerThread(THREAD);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">      vm_exit_during_initialization(Handle(THREAD, PENDING_EXCEPTION));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Always call even when there are not JVMTI environments yet, since environments</span></span><br><span class=\"line\">  <span class=\"comment\">// may be attached late and JVMTI must track phases of VM execution</span></span><br><span class=\"line\">  JvmtiExport::enter_live_phase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Signal Dispatcher needs to be started before VMInit event is posted</span></span><br><span class=\"line\">  <span class=\"comment\">// 启动一个叫做“信号分发器”的线程用来处理进程间的信号</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如通过jstack获取一个jvm实例的栈信息</span></span><br><span class=\"line\">  os::signal_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Start Attach Listener if +StartAttachListener or it can't be started lazily</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!DisableAttachMechanism) &#123;</span><br><span class=\"line\">    AttachListener::vm_start();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StartAttachListener || AttachListener::init_at_startup()) &#123;</span><br><span class=\"line\">      AttachListener::init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Launch -Xrun agents</span></span><br><span class=\"line\">  <span class=\"comment\">// Must be done in the JVMTI live phase so that for backward compatibility the JDWP</span></span><br><span class=\"line\">  <span class=\"comment\">// back-end can launch with -Xdebug -Xrunjdwp.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!EagerXrunInit &amp;&amp; Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">    create_vm_init_libraries();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Notify JVMTI agents that VM initialization is complete - nop if no agents.</span></span><br><span class=\"line\">  JvmtiExport::post_vm_initialized();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (TRACE_START() != JNI_OK) &#123;</span><br><span class=\"line\">    vm_exit_during_initialization(<span class=\"string\">\"Failed to start tracing backend.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (CleanChunkPoolAsync) &#123;</span><br><span class=\"line\">    Chunk::start_chunk_pool_cleaner_task();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// initialize compiler(s)</span></span><br><span class=\"line\">  CompileBroker::compilation_init();</span><br><span class=\"line\">  <span class=\"comment\">// 加载sun.management.Agent类并调用startAgent方法开启管理服务</span></span><br><span class=\"line\">  Management::initialize(THREAD);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// management agent fails to start possibly due to</span></span><br><span class=\"line\">    <span class=\"comment\">// configuration problem and is responsible for printing</span></span><br><span class=\"line\">    <span class=\"comment\">// stack trace if appropriate. Simply exit VM.</span></span><br><span class=\"line\">    vm_exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::has_profile())       FlatProfiler::engage(main_thread, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::has_alloc_profile()) AllocationProfiler::engage();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (MemProfiling)                   MemProfiler::engage();</span><br><span class=\"line\">  StatSampler::engage();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (CheckJNICalls)                  JniPeriodicChecker::engage();</span><br><span class=\"line\"></span><br><span class=\"line\">  BiasedLocking::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (JDK_Version::current().post_vm_init_hook_enabled()) &#123;</span><br><span class=\"line\">    call_postVMInitHook(THREAD);</span><br><span class=\"line\">    <span class=\"comment\">// The Java side of PostVMInitHook.run must deal with all</span></span><br><span class=\"line\">    <span class=\"comment\">// exceptions and provide means of diagnosis.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">      CLEAR_PENDING_EXCEPTION;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"function\">MutexLockerEx <span class=\"title\">ml</span><span class=\"params\">(PeriodicTask_lock, Mutex::_no_safepoint_check_flag)</span></span>;</span><br><span class=\"line\">      <span class=\"comment\">// Make sure the watcher thread can be started by WatcherThread::start()</span></span><br><span class=\"line\">      <span class=\"comment\">// or by dynamic enrollment.</span></span><br><span class=\"line\">      WatcherThread::make_startable();</span><br><span class=\"line\">      <span class=\"comment\">// Start up the WatcherThread if there are any periodic tasks</span></span><br><span class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">NOTE:</span>  All PeriodicTasks should be registered by now. If they</span></span><br><span class=\"line\">      <span class=\"comment\">//   aren't, late joiners might appear to start slowly (we might</span></span><br><span class=\"line\">      <span class=\"comment\">//   take a while to process their first tick).</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (PeriodicTask::num_tasks() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          WatcherThread::start();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Give os specific code one last chance to start</span></span><br><span class=\"line\">  os::init_3();</span><br><span class=\"line\"></span><br><span class=\"line\">  create_vm_timer.end();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>init_globals()</code>方法位于<code>hotspot/src/share/vm/runtime/init.cpp</code>用来初始化全局模块:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jint <span class=\"title\">init_globals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  HandleMark hm;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化各子系统的监控及管理服务</span></span><br><span class=\"line\">  <span class=\"comment\">// JMX、线程和同步子系统、类加载子系统的监控和管理</span></span><br><span class=\"line\">  management_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化字节码表，如istore、iload、iadd</span></span><br><span class=\"line\">  bytecodes_init();</span><br><span class=\"line\">  <span class=\"comment\">// 类加载器初始化</span></span><br><span class=\"line\">  classLoader_init();</span><br><span class=\"line\">  <span class=\"comment\">// 代码缓存池初始化</span></span><br><span class=\"line\">  codeCache_init();</span><br><span class=\"line\">  <span class=\"comment\">// VM版本初始化</span></span><br><span class=\"line\">  VM_Version_init();</span><br><span class=\"line\">  <span class=\"comment\">// 系统初始化</span></span><br><span class=\"line\">  os_init_globals();</span><br><span class=\"line\">  stubRoutines_init1();</span><br><span class=\"line\">  <span class=\"comment\">// ============================</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化堆以及决定所使用GC策略</span></span><br><span class=\"line\">  <span class=\"comment\">// ============================</span></span><br><span class=\"line\">  jint status = universe_init();  <span class=\"comment\">// dependent on codeCache_init and</span></span><br><span class=\"line\">                                  <span class=\"comment\">// stubRoutines_init1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化解析器</span></span><br><span class=\"line\">  interpreter_init();  <span class=\"comment\">// before any methods loaded</span></span><br><span class=\"line\">  invocationCounter_init();  <span class=\"comment\">// before any methods loaded</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化MarkSweep</span></span><br><span class=\"line\">  marksweep_init();</span><br><span class=\"line\">  accessFlags_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化操作码模板表</span></span><br><span class=\"line\">  templateTable_init();</span><br><span class=\"line\">  InterfaceSupport_init();</span><br><span class=\"line\">  SharedRuntime::generate_stubs();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化语法表及系统字典等</span></span><br><span class=\"line\">  universe2_init();  <span class=\"comment\">// dependent on codeCache_init and stubRoutines_init1</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化软引用时间戳表并设定软引用清除策略</span></span><br><span class=\"line\">  referenceProcessor_init();</span><br><span class=\"line\">  jni_handles_init();</span><br><span class=\"line\">  <span class=\"comment\">// 代码数据结构的必要性检查（仅限debug版本）</span></span><br><span class=\"line\">  vmStructs_init();</span><br><span class=\"line\">  vtableStubs_init();</span><br><span class=\"line\">  InlineCacheBuffer_init();</span><br><span class=\"line\">  <span class=\"comment\">// oracle编译器初始化（oracle编译器是一个编译器开关接口）</span></span><br><span class=\"line\">  compilerOracle_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化编译策略（根据启动参数决定编译策略）</span></span><br><span class=\"line\">  compilationPolicy_init();</span><br><span class=\"line\">  compileBroker_init();</span><br><span class=\"line\">  VMRegImpl::set_regName();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!universe_post_init()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ERR;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  javaClasses_init();   <span class=\"comment\">// must happen after vtable initialization</span></span><br><span class=\"line\">  stubRoutines_init2(); <span class=\"comment\">// note: StubRoutines need 2-phase init</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All the flags that get adjusted by VM_Version_init and os::init_2</span></span><br><span class=\"line\">  <span class=\"comment\">// have been set so dump the flags now.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (PrintFlagsFinal) &#123;</span><br><span class=\"line\">    CommandLineFlags::printFlags(tty, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>universe_init()</code>方法位于<code>hotspot/src/share/vm/memory/universe.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jint <span class=\"title\">universe_init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  assert(!Universe::_fully_initialized, <span class=\"string\">\"called after initialize_vtables\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"number\">1</span> &lt;&lt; LogHeapWordSize == <span class=\"keyword\">sizeof</span>(HeapWord),</span><br><span class=\"line\">         <span class=\"string\">\"LogHeapWordSize is incorrect.\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"keyword\">sizeof</span>(oop) &gt;= <span class=\"keyword\">sizeof</span>(HeapWord), <span class=\"string\">\"HeapWord larger than oop?\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"keyword\">sizeof</span>(oop) % <span class=\"keyword\">sizeof</span>(HeapWord) == <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"oop size is not not a multiple of HeapWord size\"</span>);</span><br><span class=\"line\">  <span class=\"function\">TraceTime <span class=\"title\">timer</span><span class=\"params\">(<span class=\"string\">\"Genesis\"</span>, TraceStartupTime)</span></span>;</span><br><span class=\"line\">  GC_locker::lock();  <span class=\"comment\">// do not allow gc during bootstrapping</span></span><br><span class=\"line\">  JavaClasses::compute_hard_coded_offsets();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Get map info from shared archive file.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (DumpSharedSpaces)</span><br><span class=\"line\">    UseSharedSpaces = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  FileMapInfo* mapinfo = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseSharedSpaces) &#123;</span><br><span class=\"line\">    mapinfo = NEW_C_HEAP_OBJ(FileMapInfo, mtInternal);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mapinfo, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(FileMapInfo));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Open the shared archive file, read and validate the header. If</span></span><br><span class=\"line\">    <span class=\"comment\">// initialization files, shared spaces [UseSharedSpaces] are</span></span><br><span class=\"line\">    <span class=\"comment\">// disabled and the file is closed.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mapinfo-&gt;initialize()) &#123;</span><br><span class=\"line\">      FileMapInfo::set_current_info(mapinfo);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      assert(!mapinfo-&gt;is_open() &amp;&amp; !UseSharedSpaces,</span><br><span class=\"line\">             <span class=\"string\">\"archive file not closed or shared spaces not disabled.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//===================================</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化堆</span></span><br><span class=\"line\">  <span class=\"comment\">// 包括创建及初始化各分区代，设定空间比例大小，回收策略等</span></span><br><span class=\"line\">  <span class=\"comment\">// 流程：根据启动参数决定使用的回收策略，初始化回收策略时会指定所使用的代规范，</span></span><br><span class=\"line\">  <span class=\"comment\">//       最后根据规范创建对应类型的回收堆。i.e.</span></span><br><span class=\"line\">  <span class=\"comment\">//      arguments -&gt; policy -&gt; spec -&gt; heap</span></span><br><span class=\"line\">  <span class=\"comment\">//===================================</span></span><br><span class=\"line\">  jint status = Universe::initialize_heap();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We have a heap so create the methodOop caches before</span></span><br><span class=\"line\">  <span class=\"comment\">// CompactingPermGenGen::initialize_oops() tries to populate them.</span></span><br><span class=\"line\">  Universe::_finalizer_register_cache = <span class=\"keyword\">new</span> LatestMethodOopCache();</span><br><span class=\"line\">  Universe::_loader_addClass_cache    = <span class=\"keyword\">new</span> LatestMethodOopCache();</span><br><span class=\"line\">  Universe::_pd_implies_cache         = <span class=\"keyword\">new</span> LatestMethodOopCache();</span><br><span class=\"line\">  Universe::_reflect_invoke_cache     = <span class=\"keyword\">new</span> ActiveMethodOopsCache();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseSharedSpaces) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Read the data structures supporting the shared spaces (shared</span></span><br><span class=\"line\">    <span class=\"comment\">// system dictionary, symbol table, etc.).  After that, access to</span></span><br><span class=\"line\">    <span class=\"comment\">// the file (other than the mapped regions) is no longer needed, and</span></span><br><span class=\"line\">    <span class=\"comment\">// the file is closed. Closing the file does not affect the</span></span><br><span class=\"line\">    <span class=\"comment\">// currently mapped regions.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    CompactingPermGenGen::initialize_oops();</span><br><span class=\"line\">    mapinfo-&gt;close();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    SymbolTable::create_table();</span><br><span class=\"line\">    StringTable::create_table();</span><br><span class=\"line\">    ClassLoader::create_package_info_table();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>initialize_heap()方法如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint Universe::initialize_heap() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果使用并行GC</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseParallelGC) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SERIALGC</span></span><br><span class=\"line\">    <span class=\"comment\">// 回收堆类型使用并行回收堆</span></span><br><span class=\"line\">    Universe::_collectedHeap = <span class=\"keyword\">new</span> ParallelScavengeHeap();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseParallelGC not supported in java kernel vm.\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseG1GC) &#123;</span><br><span class=\"line\">#ifndef SERIALGC</span><br><span class=\"line\">    <span class=\"comment\">// 如果使用G1回收，设定回收器策略和回收堆类型为G1CollectorPolicy和G1CollectedHeap</span></span><br><span class=\"line\">    G1CollectorPolicy* g1p = <span class=\"keyword\">new</span> G1CollectorPolicy();</span><br><span class=\"line\">    G1CollectedHeap* g1h = <span class=\"keyword\">new</span> G1CollectedHeap(g1p);</span><br><span class=\"line\">    Universe::_collectedHeap = g1h;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseG1GC not supported in java kernel vm.\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    GenCollectorPolicy *gc_policy;</span><br><span class=\"line\">    <span class=\"comment\">// 使用串行回收</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (UseSerialGC) &#123;</span><br><span class=\"line\">      gc_policy = <span class=\"keyword\">new</span> MarkSweepPolicy();</span><br><span class=\"line\">    <span class=\"comment\">// 使用并发回收</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class=\"line\">#ifndef SERIALGC</span><br><span class=\"line\">      <span class=\"comment\">// 是否使用自适应策略</span></span><br><span class=\"line\">      <span class=\"comment\">// ASConcurrentMarkSweepPolicy继承自ConcurrentMarkSweepPolicy，</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (UseAdaptiveSizePolicy) &#123;</span><br><span class=\"line\">        gc_policy = <span class=\"keyword\">new</span> ASConcurrentMarkSweepPolicy();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        gc_policy = <span class=\"keyword\">new</span> ConcurrentMarkSweepPolicy();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>   <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseConcMarkSweepGC not supported in java kernel vm.\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\">    <span class=\"comment\">// 默认使用标记清除算法</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// default old generation</span></span><br><span class=\"line\">      gc_policy = <span class=\"keyword\">new</span> MarkSweepPolicy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 回收策略类型体系图</span></span><br><span class=\"line\">    <span class=\"comment\">// AllocatedObj</span></span><br><span class=\"line\">    <span class=\"comment\">//    └── CHeapObj</span></span><br><span class=\"line\">    <span class=\"comment\">//        └── CollectorPolicy</span></span><br><span class=\"line\">    <span class=\"comment\">//            └── GenCollectorPolicy</span></span><br><span class=\"line\">    <span class=\"comment\">//                └── TwoGenerationCollectorPolicy</span></span><br><span class=\"line\">    <span class=\"comment\">//                    └── ConcurrentMarkSweepPolicy</span></span><br><span class=\"line\">    <span class=\"comment\">//                        └── ASConcurrentMarkSweepPolicy</span></span><br><span class=\"line\">    Universe::_collectedHeap = <span class=\"keyword\">new</span> GenCollectedHeap(gc_policy);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//===================================</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化堆空间</span></span><br><span class=\"line\">  <span class=\"comment\">// 这里调用GenCollectedHeap::initialize()方法， 真正向操作系统申请内存</span></span><br><span class=\"line\">  <span class=\"comment\">//===================================</span></span><br><span class=\"line\">  jint status = Universe::heap()-&gt;initialize();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _LP64</span></span><br><span class=\"line\">  <span class=\"comment\">// 在LP64数据模型下是否开启对象指针压缩</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseCompressedOops) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Subtract a page because something can get allocated at heap base.</span></span><br><span class=\"line\">    <span class=\"comment\">// This also makes implicit null checking work, because the</span></span><br><span class=\"line\">    <span class=\"comment\">// memory+1 page below heap_base needs to cause a signal.</span></span><br><span class=\"line\">    <span class=\"comment\">// See needs_explicit_null_check.</span></span><br><span class=\"line\">    <span class=\"comment\">// Only set the heap base for compressed oops because it indicates</span></span><br><span class=\"line\">    <span class=\"comment\">// compressed oops for pstack code.</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> verbose = PrintCompressedOopsMode || (PrintMiscellaneous &amp;&amp; Verbose);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">      tty-&gt;cr();</span><br><span class=\"line\">      tty-&gt;print(<span class=\"string\">\"heap address: \"</span> PTR_FORMAT <span class=\"string\">\", size: \"</span> SIZE_FORMAT <span class=\"string\">\" MB\"</span>,</span><br><span class=\"line\">                 Universe::heap()-&gt;base(), Universe::heap()-&gt;reserved_region().byte_size()/M);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">uint64_t</span>)Universe::heap()-&gt;reserved_region().end() &gt; OopEncodingHeapMax) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Can't reserve heap below 32Gb.</span></span><br><span class=\"line\">      Universe::set_narrow_oop_base(Universe::heap()-&gt;base() - os::vm_page_size());</span><br><span class=\"line\">      Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">        tty-&gt;print(<span class=\"string\">\", %s: \"</span>PTR_FORMAT,</span><br><span class=\"line\">            narrow_oop_mode_to_string(HeapBasedNarrowOop),</span><br><span class=\"line\">            Universe::narrow_oop_base());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      Universe::set_narrow_oop_base(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">        tty-&gt;print(<span class=\"string\">\", %s\"</span>, narrow_oop_mode_to_string(ZeroBasedNarrowOop));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN64</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!Universe::narrow_oop_use_implicit_null_checks()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Don't need guard page for implicit checks in indexed addressing</span></span><br><span class=\"line\">        <span class=\"comment\">// mode with zero based Compressed Oops.</span></span><br><span class=\"line\">        Universe::set_narrow_oop_use_implicit_null_checks(<span class=\"literal\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">//  _WIN64</span></span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>((<span class=\"keyword\">uint64_t</span>)Universe::heap()-&gt;reserved_region().end() &gt; NarrowOopHeapMax) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can't reserve heap below 4Gb.</span></span><br><span class=\"line\">        Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Universe::set_narrow_oop_shift(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">          tty-&gt;print(<span class=\"string\">\", %s\"</span>, narrow_oop_mode_to_string(UnscaledNarrowOop));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verbose) &#123;</span><br><span class=\"line\">      tty-&gt;cr();</span><br><span class=\"line\">      tty-&gt;cr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  assert(Universe::narrow_oop_base() == (Universe::heap()-&gt;base() - os::vm_page_size()) ||</span><br><span class=\"line\">         Universe::narrow_oop_base() == <span class=\"literal\">NULL</span>, <span class=\"string\">\"invalid value\"</span>);</span><br><span class=\"line\">  assert(Universe::narrow_oop_shift() == LogMinObjAlignmentInBytes ||</span><br><span class=\"line\">         Universe::narrow_oop_shift() == <span class=\"number\">0</span>, <span class=\"string\">\"invalid value\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We will never reach the CATCH below since Exceptions::_throw will cause</span></span><br><span class=\"line\">  <span class=\"comment\">// the VM to exit if an exception is thrown during initialization</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果使用TLAB则对其进行初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseTLAB) &#123;</span><br><span class=\"line\">    assert(Universe::heap()-&gt;supports_tlab_allocation(),</span><br><span class=\"line\">           <span class=\"string\">\"Should support thread-local allocation buffers\"</span>);</span><br><span class=\"line\">    ThreadLocalAllocBuffer::startup_initialization();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上面的代码中<code>Universe::heap()-&gt;initialize()</code>会调用GenCollectedHeap的<code>initialize()</code>方法：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint GenCollectedHeap::initialize() &#123;</span><br><span class=\"line\">  CollectedHeap::pre_initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">  _n_gens = gen_policy()-&gt;number_of_generations();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// While there are no constraints in the GC code that HeapWordSize</span></span><br><span class=\"line\">  <span class=\"comment\">// be any particular value, there are multiple other areas in the</span></span><br><span class=\"line\">  <span class=\"comment\">// system which believe this to be true (e.g. oop-&gt;object_size in some</span></span><br><span class=\"line\">  <span class=\"comment\">// cases incorrectly returns the size in wordSize units rather than</span></span><br><span class=\"line\">  <span class=\"comment\">// HeapWordSize).</span></span><br><span class=\"line\">  guarantee(HeapWordSize == wordSize, <span class=\"string\">\"HeapWordSize must equal wordSize\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The heap must be at least as aligned as generations.</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> alignment = Generation::GenGrain;</span><br><span class=\"line\"></span><br><span class=\"line\">  _gen_specs = gen_policy()-&gt;generations();</span><br><span class=\"line\">  PermanentGenerationSpec *perm_gen_spec =</span><br><span class=\"line\">                                collector_policy()-&gt;permanent_generation();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Make sure the sizes are all aligned.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; _n_gens; i++) &#123;</span><br><span class=\"line\">    _gen_specs[i]-&gt;align(alignment);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  perm_gen_spec-&gt;align(alignment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If we are dumping the heap, then allocate a wasted block of address</span></span><br><span class=\"line\">  <span class=\"comment\">// space in order to push the heap to a lower address.  This extra</span></span><br><span class=\"line\">  <span class=\"comment\">// address range allows for other (or larger) libraries to be loaded</span></span><br><span class=\"line\">  <span class=\"comment\">// without them occupying the space required for the shared spaces.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (DumpSharedSpaces) &#123;</span><br><span class=\"line\">    uintx reserved = <span class=\"number\">0</span>;</span><br><span class=\"line\">    uintx block_size = <span class=\"number\">64</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (reserved &lt; SharedDummyBlockSize) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">char</span>* dummy = os::reserve_memory(block_size);</span><br><span class=\"line\">      reserved += block_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Allocate space for the heap.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* heap_address;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> total_reserved = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n_covered_regions = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\">ReservedSpace <span class=\"title\">heap_rs</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">//分配区域，三个区域:YoungGen,OldGen,PermGen</span></span><br><span class=\"line\">  heap_address = allocate(alignment, perm_gen_spec, &amp;total_reserved,</span><br><span class=\"line\">                          &amp;n_covered_regions, &amp;heap_rs);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseSharedSpaces) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!heap_rs.is_reserved() || heap_address != heap_rs.base()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (heap_rs.is_reserved()) &#123;</span><br><span class=\"line\">        heap_rs.release();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      FileMapInfo* mapinfo = FileMapInfo::current_info();</span><br><span class=\"line\">      mapinfo-&gt;fail_continue(<span class=\"string\">\"Unable to reserve shared region.\"</span>);</span><br><span class=\"line\">      allocate(alignment, perm_gen_spec, &amp;total_reserved, &amp;n_covered_regions,</span><br><span class=\"line\">               &amp;heap_rs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!heap_rs.is_reserved()) &#123;</span><br><span class=\"line\">    vm_shutdown_during_initialization(</span><br><span class=\"line\">      <span class=\"string\">\"Could not reserve enough space for object heap\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//_reserved区域包括Y,O,P三个区域</span></span><br><span class=\"line\">  _reserved = MemRegion((HeapWord*)heap_rs.base(),</span><br><span class=\"line\">                        (HeapWord*)(heap_rs.base() + heap_rs.size()));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// It is important to do this in a way such that concurrent readers can't</span></span><br><span class=\"line\">  <span class=\"comment\">// temporarily think somethings in the heap.  (Seen this happen in asserts.)</span></span><br><span class=\"line\">  _reserved.set_word_size(<span class=\"number\">0</span>);</span><br><span class=\"line\">  _reserved.set_start((HeapWord*)heap_rs.base());</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> actual_heap_size = heap_rs.size() - perm_gen_spec-&gt;misc_data_size()</span><br><span class=\"line\">                                           - perm_gen_spec-&gt;misc_code_size();</span><br><span class=\"line\">  _reserved.set_end((HeapWord*)(heap_rs.base() + actual_heap_size));</span><br><span class=\"line\"></span><br><span class=\"line\">  _rem_set = collector_policy()-&gt;create_rem_set(_reserved, n_covered_regions);</span><br><span class=\"line\">  set_barrier_set(rem_set()-&gt;bs());</span><br><span class=\"line\"></span><br><span class=\"line\">  _gch = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; _n_gens; i++) &#123;</span><br><span class=\"line\">    ReservedSpace this_rs = heap_rs.first_part(_gen_specs[i]-&gt;max_size(),</span><br><span class=\"line\">                                              UseSharedSpaces, UseSharedSpaces);</span><br><span class=\"line\">    _gens[i] = _gen_specs[i]-&gt;init(this_rs, i, rem_set());</span><br><span class=\"line\">    <span class=\"comment\">// tag generations in JavaHeap</span></span><br><span class=\"line\">    MemTracker::record_virtual_memory_type((address)this_rs.base(), mtJavaHeap);</span><br><span class=\"line\">    heap_rs = heap_rs.last_part(_gen_specs[i]-&gt;max_size());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _perm_gen = perm_gen_spec-&gt;init(heap_rs, PermSize, rem_set());</span><br><span class=\"line\">  <span class=\"comment\">// tag PermGen</span></span><br><span class=\"line\">  MemTracker::record_virtual_memory_type((address)heap_rs.base(), mtJavaHeap);</span><br><span class=\"line\"></span><br><span class=\"line\">  clear_incremental_collection_failed();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> SERIALGC</span></span><br><span class=\"line\">  <span class=\"comment\">// If we are running CMS, create the collector responsible</span></span><br><span class=\"line\">  <span class=\"comment\">// for collecting the CMS generations.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (collector_policy()-&gt;is_concurrent_mark_sweep_policy()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> success = create_cms_collector();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// SERIALGC</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此JVM的初始化全部完成，至于内存策略的计算部分详细内容请阅读Hotspot源码，这里只作抛砖引玉。</p>"},{"title":"一行Python命令开启简单的静态文件服务器","date":"2017-08-30T06:35:00.000Z","_content":"![Python Logo](/images/post/2016/01/12/python_logo.jpg)\n\n在开发过程当中，常常会需要启动一个静态文件服务器用来访问静态资源或传输文件，安装Nginx？安装Tomcat？\n\nNo！都太重了。只需要执行一个Python命令即可马上拥有一个轻量级静态服务器。\n\n\n# 如果你使用的是Python2.x\n```bash\n$ python -m SimpleHTTPServer\nServing HTTP on 0.0.0.0 port 8000 ...\n```\n\n<!-- more -->\n\n# 如果你使用的是Python3.x\n```bash\n$ python -m http.server\n```\n打开浏览器即可访问`http://localhost:8000`，\n也可在后面追加指定目标端口，如：`python -m SimpleHTTPServer 9000`\n","source":"_posts/2017/08/30/start-up-a-file-server-using-one-python-command.md","raw":"---\ntitle: 一行Python命令开启简单的静态文件服务器\ndate: 2017-08-30 14:35:00\ncategories: Python\ntags:\n    - Python\n---\n![Python Logo](/images/post/2016/01/12/python_logo.jpg)\n\n在开发过程当中，常常会需要启动一个静态文件服务器用来访问静态资源或传输文件，安装Nginx？安装Tomcat？\n\nNo！都太重了。只需要执行一个Python命令即可马上拥有一个轻量级静态服务器。\n\n\n# 如果你使用的是Python2.x\n```bash\n$ python -m SimpleHTTPServer\nServing HTTP on 0.0.0.0 port 8000 ...\n```\n\n<!-- more -->\n\n# 如果你使用的是Python3.x\n```bash\n$ python -m http.server\n```\n打开浏览器即可访问`http://localhost:8000`，\n也可在后面追加指定目标端口，如：`python -m SimpleHTTPServer 9000`\n","slug":"start-up-a-file-server-using-one-python-command","published":1,"updated":"2018-04-06T17:13:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa1y000p2zs6ulwzcgi5","content":"<p><img src=\"/images/post/2016/01/12/python_logo.jpg\" alt=\"Python Logo\"></p>\n<p>在开发过程当中，常常会需要启动一个静态文件服务器用来访问静态资源或传输文件，安装Nginx？安装Tomcat？</p>\n<p>No！都太重了。只需要执行一个Python命令即可马上拥有一个轻量级静态服务器。</p>\n<h1 id=\"如果你使用的是Python2-x\"><a href=\"#如果你使用的是Python2-x\" class=\"headerlink\" title=\"如果你使用的是Python2.x\"></a>如果你使用的是Python2.x</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -m SimpleHTTPServer</span><br><span class=\"line\">Serving HTTP on 0.0.0.0 port 8000 ...</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"如果你使用的是Python3-x\"><a href=\"#如果你使用的是Python3-x\" class=\"headerlink\" title=\"如果你使用的是Python3.x\"></a>如果你使用的是Python3.x</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -m http.server</span><br></pre></td></tr></table></figure>\n<p>打开浏览器即可访问<code>http://localhost:8000</code>，<br>也可在后面追加指定目标端口，如：<code>python -m SimpleHTTPServer 9000</code></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2016/01/12/python_logo.jpg\" alt=\"Python Logo\"></p>\n<p>在开发过程当中，常常会需要启动一个静态文件服务器用来访问静态资源或传输文件，安装Nginx？安装Tomcat？</p>\n<p>No！都太重了。只需要执行一个Python命令即可马上拥有一个轻量级静态服务器。</p>\n<h1 id=\"如果你使用的是Python2-x\"><a href=\"#如果你使用的是Python2-x\" class=\"headerlink\" title=\"如果你使用的是Python2.x\"></a>如果你使用的是Python2.x</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -m SimpleHTTPServer</span><br><span class=\"line\">Serving HTTP on 0.0.0.0 port 8000 ...</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"如果你使用的是Python3-x\"><a href=\"#如果你使用的是Python3-x\" class=\"headerlink\" title=\"如果你使用的是Python3.x\"></a>如果你使用的是Python3.x</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -m http.server</span><br></pre></td></tr></table></figure>\n<p>打开浏览器即可访问<code>http://localhost:8000</code>，<br>也可在后面追加指定目标端口，如：<code>python -m SimpleHTTPServer 9000</code></p>"},{"title":"通过Nginx内嵌Lua脚本实现资源访问权限控制","date":"2017-10-14T18:19:27.000Z","_content":"![access-control-by-lua](/images/post/2017/10/15/access_control_by_lua.jpg)\n\n有些敏感的静态资源（比如身份证照片，企业执照等）是不能裸奔在互联网上的，被爬虫抓取后果比较严重，所以要加入一定的访问权限，满足某种规则后才可以访问。\n\n最常用的做法是访问者发起请求时首先对资源名使用私钥进行MD5作为signature，再将signature作为参数传入，服务端接到请求后按照同样规则进行验签，signature匹配则视为合法请求，否则deny返回403。\n\n<!-- more -->\n\n```lua\n--\n-- Author: Hunter Zhao\n-- Mail: zhaohevip@gmail.com\n-- Date: 13/10/2017\n-- Time: 10:25\n-- Description：敏感资源访问签名认证\n--\n\n-- =============================================\n\n-- the secret key\nSECRET_KEY = \"iamasecretkey\"\n\n--[[\n  获取资源名\n  e.g. 访问路径 /image/some_pic_name.jpg   返回 -> some_pic_name.jpg\n]]\nfunction getResourceName()\n\n  local url = ngx.var.uri\n  local len = string.len(url)\n  local _url = string.reverse(url)\n  local pos = string.find(_url, \"/\")\n  -- start position index\n  local start_pos = len - pos + 1\n  -- get substring from the index\n  local img_name = string.sub(url, start_pos + 1, len)\n\n  return img_name\nend\n\n\n--[[\n  验证签名合法性\n]]\nfunction validateSignature()\n\n  local sign = ngx.var.arg_sign\n\n  -- exit if signature is blank\n  if sign == nil or sign == \"\" then\n    ngx.exit(401)\n    return false\n  end\n\n  -- get request resource name\n  local img_name = getResourceName()\n  -- sign the specified string via MD5 algorithm\n  local token = ngx.md5(img_name..SECRET_KEY)\n\n  -- if signature doesn't equal the token\n  if sign ~= token then\n    ngx.exit(403)\n    return false\n  end\n\n  -- if everything is OK\n  return true\nend\n\n-- =============================================\n\n-- return the result of access interceptor\nreturn validateSignature()\n\n```\n\nNginx配置\n```bash\nserver {\n    listen 80 default;\n    server_name localhost;    \n    root  /path/to/root;\n\n    location /image/ {\n        default_type 'text/html';\n        access_by_lua_file \"/path/to/resource_access_control.lua\"; #通过lua来控制访问权限\n    }\n}\n```\n","source":"_posts/2017/10/15/resource-access-control-via-lua-script-in-nginx.md","raw":"---\ntitle: 通过Nginx内嵌Lua脚本实现资源访问权限控制\ndate: 2017-10-15 02:19:27\ncategories: Lua\ntags:\n    - Nginx\n    - Lua\n    - 权限\n---\n![access-control-by-lua](/images/post/2017/10/15/access_control_by_lua.jpg)\n\n有些敏感的静态资源（比如身份证照片，企业执照等）是不能裸奔在互联网上的，被爬虫抓取后果比较严重，所以要加入一定的访问权限，满足某种规则后才可以访问。\n\n最常用的做法是访问者发起请求时首先对资源名使用私钥进行MD5作为signature，再将signature作为参数传入，服务端接到请求后按照同样规则进行验签，signature匹配则视为合法请求，否则deny返回403。\n\n<!-- more -->\n\n```lua\n--\n-- Author: Hunter Zhao\n-- Mail: zhaohevip@gmail.com\n-- Date: 13/10/2017\n-- Time: 10:25\n-- Description：敏感资源访问签名认证\n--\n\n-- =============================================\n\n-- the secret key\nSECRET_KEY = \"iamasecretkey\"\n\n--[[\n  获取资源名\n  e.g. 访问路径 /image/some_pic_name.jpg   返回 -> some_pic_name.jpg\n]]\nfunction getResourceName()\n\n  local url = ngx.var.uri\n  local len = string.len(url)\n  local _url = string.reverse(url)\n  local pos = string.find(_url, \"/\")\n  -- start position index\n  local start_pos = len - pos + 1\n  -- get substring from the index\n  local img_name = string.sub(url, start_pos + 1, len)\n\n  return img_name\nend\n\n\n--[[\n  验证签名合法性\n]]\nfunction validateSignature()\n\n  local sign = ngx.var.arg_sign\n\n  -- exit if signature is blank\n  if sign == nil or sign == \"\" then\n    ngx.exit(401)\n    return false\n  end\n\n  -- get request resource name\n  local img_name = getResourceName()\n  -- sign the specified string via MD5 algorithm\n  local token = ngx.md5(img_name..SECRET_KEY)\n\n  -- if signature doesn't equal the token\n  if sign ~= token then\n    ngx.exit(403)\n    return false\n  end\n\n  -- if everything is OK\n  return true\nend\n\n-- =============================================\n\n-- return the result of access interceptor\nreturn validateSignature()\n\n```\n\nNginx配置\n```bash\nserver {\n    listen 80 default;\n    server_name localhost;    \n    root  /path/to/root;\n\n    location /image/ {\n        default_type 'text/html';\n        access_by_lua_file \"/path/to/resource_access_control.lua\"; #通过lua来控制访问权限\n    }\n}\n```\n","slug":"resource-access-control-via-lua-script-in-nginx","published":1,"updated":"2018-05-09T19:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa20000s2zs6zxj67il9","content":"<p><img src=\"/images/post/2017/10/15/access_control_by_lua.jpg\" alt=\"access-control-by-lua\"></p>\n<p>有些敏感的静态资源（比如身份证照片，企业执照等）是不能裸奔在互联网上的，被爬虫抓取后果比较严重，所以要加入一定的访问权限，满足某种规则后才可以访问。</p>\n<p>最常用的做法是访问者发起请求时首先对资源名使用私钥进行MD5作为signature，再将signature作为参数传入，服务端接到请求后按照同样规则进行验签，signature匹配则视为合法请求，否则deny返回403。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\">-- Mail: zhaohevip@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\">-- Date: 13/10/2017</span></span><br><span class=\"line\"><span class=\"comment\">-- Time: 10:25</span></span><br><span class=\"line\"><span class=\"comment\">-- Description：敏感资源访问签名认证</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- =============================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the secret key</span></span><br><span class=\"line\">SECRET_KEY = <span class=\"string\">\"iamasecretkey\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">  获取资源名</span></span><br><span class=\"line\"><span class=\"comment\">  e.g. 访问路径 /image/some_pic_name.jpg   返回 -&gt; some_pic_name.jpg</span></span><br><span class=\"line\"><span class=\"comment\">]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResourceName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">local</span> url = ngx.var.uri</span><br><span class=\"line\">  <span class=\"keyword\">local</span> <span class=\"built_in\">len</span> = <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(url)</span><br><span class=\"line\">  <span class=\"keyword\">local</span> _url = <span class=\"built_in\">string</span>.<span class=\"built_in\">reverse</span>(url)</span><br><span class=\"line\">  <span class=\"keyword\">local</span> pos = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(_url, <span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">-- start position index</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> start_pos = <span class=\"built_in\">len</span> - pos + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">-- get substring from the index</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> img_name = <span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(url, start_pos + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> img_name</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">  验证签名合法性</span></span><br><span class=\"line\"><span class=\"comment\">]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateSignature</span><span class=\"params\">()</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">local</span> sign = ngx.var.arg_sign</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">-- exit if signature is blank</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> sign == <span class=\"literal\">nil</span> <span class=\"keyword\">or</span> sign == <span class=\"string\">\"\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">exit</span>(<span class=\"number\">401</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">-- get request resource name</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> img_name = getResourceName()</span><br><span class=\"line\">  <span class=\"comment\">-- sign the specified string via MD5 algorithm</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> token = ngx.md5(img_name..SECRET_KEY)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">-- if signature doesn't equal the token</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> sign ~= token <span class=\"keyword\">then</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">exit</span>(<span class=\"number\">403</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">-- if everything is OK</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- =============================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- return the result of access interceptor</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> validateSignature()</span><br></pre></td></tr></table></figure>\n<p>Nginx配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default;</span><br><span class=\"line\">    server_name localhost;    </span><br><span class=\"line\">    root  /path/to/root;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /image/ &#123;</span><br><span class=\"line\">        default_type <span class=\"string\">'text/html'</span>;</span><br><span class=\"line\">        access_by_lua_file <span class=\"string\">\"/path/to/resource_access_control.lua\"</span>; <span class=\"comment\">#通过lua来控制访问权限</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2017/10/15/access_control_by_lua.jpg\" alt=\"access-control-by-lua\"></p>\n<p>有些敏感的静态资源（比如身份证照片，企业执照等）是不能裸奔在互联网上的，被爬虫抓取后果比较严重，所以要加入一定的访问权限，满足某种规则后才可以访问。</p>\n<p>最常用的做法是访问者发起请求时首先对资源名使用私钥进行MD5作为signature，再将signature作为参数传入，服务端接到请求后按照同样规则进行验签，signature匹配则视为合法请求，否则deny返回403。</p>","more":"<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Author: Hunter Zhao</span></span><br><span class=\"line\"><span class=\"comment\">-- Mail: zhaohevip@gmail.com</span></span><br><span class=\"line\"><span class=\"comment\">-- Date: 13/10/2017</span></span><br><span class=\"line\"><span class=\"comment\">-- Time: 10:25</span></span><br><span class=\"line\"><span class=\"comment\">-- Description：敏感资源访问签名认证</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- =============================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the secret key</span></span><br><span class=\"line\">SECRET_KEY = <span class=\"string\">\"iamasecretkey\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">  获取资源名</span></span><br><span class=\"line\"><span class=\"comment\">  e.g. 访问路径 /image/some_pic_name.jpg   返回 -&gt; some_pic_name.jpg</span></span><br><span class=\"line\"><span class=\"comment\">]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResourceName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">local</span> url = ngx.var.uri</span><br><span class=\"line\">  <span class=\"keyword\">local</span> <span class=\"built_in\">len</span> = <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(url)</span><br><span class=\"line\">  <span class=\"keyword\">local</span> _url = <span class=\"built_in\">string</span>.<span class=\"built_in\">reverse</span>(url)</span><br><span class=\"line\">  <span class=\"keyword\">local</span> pos = <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(_url, <span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">-- start position index</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> start_pos = <span class=\"built_in\">len</span> - pos + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">-- get substring from the index</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> img_name = <span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(url, start_pos + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> img_name</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">  验证签名合法性</span></span><br><span class=\"line\"><span class=\"comment\">]]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateSignature</span><span class=\"params\">()</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">local</span> sign = ngx.var.arg_sign</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">-- exit if signature is blank</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> sign == <span class=\"literal\">nil</span> <span class=\"keyword\">or</span> sign == <span class=\"string\">\"\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">exit</span>(<span class=\"number\">401</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">-- get request resource name</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> img_name = getResourceName()</span><br><span class=\"line\">  <span class=\"comment\">-- sign the specified string via MD5 algorithm</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> token = ngx.md5(img_name..SECRET_KEY)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">-- if signature doesn't equal the token</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> sign ~= token <span class=\"keyword\">then</span></span><br><span class=\"line\">    ngx.<span class=\"built_in\">exit</span>(<span class=\"number\">403</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">-- if everything is OK</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- =============================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- return the result of access interceptor</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> validateSignature()</span><br></pre></td></tr></table></figure>\n<p>Nginx配置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default;</span><br><span class=\"line\">    server_name localhost;    </span><br><span class=\"line\">    root  /path/to/root;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /image/ &#123;</span><br><span class=\"line\">        default_type <span class=\"string\">'text/html'</span>;</span><br><span class=\"line\">        access_by_lua_file <span class=\"string\">\"/path/to/resource_access_control.lua\"</span>; <span class=\"comment\">#通过lua来控制访问权限</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"SpringCloud中读取命令行参数或系统环境变量","date":"2017-11-10T12:03:26.000Z","_content":"\n![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n\nSpringCloud中帮我们很方便地提供了环境适配方案，通过命令行参数或export系统环境变量指定`REGISTRY_CENTER_URI`值，\n\n如果读取到，SpringCloud优先使用该值，如果该变量未指定则使用默认值`http://localhost:9000/eureka/`\n<!-- more -->\n\n```yaml\neureka:\n    instance:\n        prefer-ip-address: true\n    client:\n        serviceUrl:\n            defaultZone: ${REGISTRY_CENTER_URI:http://localhost:9000/eureka/}\n\n```\n\n\n\n","source":"_posts/2017/11/10/use-environment-variable-or-command-line-parameter-in-spring-cloud.md","raw":"---\ntitle: SpringCloud中读取命令行参数或系统环境变量\ndate: 2017-11-10 20:03:26\ncategories: Spring Cloud\ntags:\n    - Spring Cloud\n    - Spring Boot\n---\n\n![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n\nSpringCloud中帮我们很方便地提供了环境适配方案，通过命令行参数或export系统环境变量指定`REGISTRY_CENTER_URI`值，\n\n如果读取到，SpringCloud优先使用该值，如果该变量未指定则使用默认值`http://localhost:9000/eureka/`\n<!-- more -->\n\n```yaml\neureka:\n    instance:\n        prefer-ip-address: true\n    client:\n        serviceUrl:\n            defaultZone: ${REGISTRY_CENTER_URI:http://localhost:9000/eureka/}\n\n```\n\n\n\n","slug":"use-environment-variable-or-command-line-parameter-in-spring-cloud","published":1,"updated":"2018-05-14T16:50:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa21000v2zs6ds80fni1","content":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"></p>\n<p>SpringCloud中帮我们很方便地提供了环境适配方案，通过命令行参数或export系统环境变量指定<code>REGISTRY_CENTER_URI</code>值，</p>\n<p>如果读取到，SpringCloud优先使用该值，如果该变量未指定则使用默认值<code>http://localhost:9000/eureka/</code><br><a id=\"more\"></a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">    instance:</span></span><br><span class=\"line\"><span class=\"attr\">        prefer-ip-address:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    client:</span></span><br><span class=\"line\"><span class=\"attr\">        serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">            defaultZone:</span> <span class=\"string\">$&#123;REGISTRY_CENTER_URI:http://localhost:9000/eureka/&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"></p>\n<p>SpringCloud中帮我们很方便地提供了环境适配方案，通过命令行参数或export系统环境变量指定<code>REGISTRY_CENTER_URI</code>值，</p>\n<p>如果读取到，SpringCloud优先使用该值，如果该变量未指定则使用默认值<code>http://localhost:9000/eureka/</code><br>","more":"</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">    instance:</span></span><br><span class=\"line\"><span class=\"attr\">        prefer-ip-address:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    client:</span></span><br><span class=\"line\"><span class=\"attr\">        serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">            defaultZone:</span> <span class=\"string\">$&#123;REGISTRY_CENTER_URI:http://localhost:9000/eureka/&#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"SpringCloud配置中心多级目录多文件匹配搜索","date":"2017-11-14T15:03:26.000Z","_content":"![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n\nSpringCloud将所有配置通过文件或Git模式集中化，微服务在启动时通过注册中心找到配置中心并拉取对应配置文件，\n让微服务动态更新配置成为可能。很多情况下，不同功能角色的配置文件分散在不同的配置文件中，比如`redis`和`rabbitmq`，\n多文件匹配SpringCloud也是支持的，如下：\n\n<!-- more -->\n配置中心 application.yml：\n```yaml\nspring:\n    application:\n        name: config-center\n    cloud:\n        bus:\n            trace:\n                enabled: true\n        config:\n            server:\n                git:\n                    uri: ${GIT_URL:https://git.xyz.com/cloud-config-repo.git}\n                    username: ${GIT_USERNAME:someuser}\n                    password: ${GIT_PASSWORD:somepass}\n                    clone-on-start: ${CLONE_ON_START:true}\n                    # 搜索配置仓库多级目录\n                    search-paths: services/**,platform/**\n\n```\n\n\n微服务bootstrap.yml:\n```yaml\nspring:\n    application:\n        name: base-service\n    profiles:\n        active: default\n    cloud:\n        config:\n            # 匹配配置中心多个配置文件\n            name: common,datasource,redis,rabbitmq,${spring.application.name},${spring.application.name}-application\n            profile: ${spring.profiles.active}\n            label: ${COFNIG_BRANCH:master}\n            discovery:\n                enabled: true\n                service-id: config-center\n```\n\n通过命令行`spring.profiles.active`参数指定目标运行环境（dev、test、prod），比如运行在test环境，微服务启动时会去配置中心匹配如下文件：\n- common-test.properties\n- datasource-test.properties\n- redis-test.properties\n- rabbitmq-test properties\n- base-service-test.properties\n- base-service-application.yml\n","source":"_posts/2017/11/14/multiple-files-and-directories-search-in-config-center-of-spring-cloud.md","raw":"---\ntitle: SpringCloud配置中心多级目录多文件匹配搜索\ndate: 2017-11-14 23:03:26\ncategories: Spring Cloud\ntags:\n    - Spring Cloud\n    - Spring Boot\n---\n![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n\nSpringCloud将所有配置通过文件或Git模式集中化，微服务在启动时通过注册中心找到配置中心并拉取对应配置文件，\n让微服务动态更新配置成为可能。很多情况下，不同功能角色的配置文件分散在不同的配置文件中，比如`redis`和`rabbitmq`，\n多文件匹配SpringCloud也是支持的，如下：\n\n<!-- more -->\n配置中心 application.yml：\n```yaml\nspring:\n    application:\n        name: config-center\n    cloud:\n        bus:\n            trace:\n                enabled: true\n        config:\n            server:\n                git:\n                    uri: ${GIT_URL:https://git.xyz.com/cloud-config-repo.git}\n                    username: ${GIT_USERNAME:someuser}\n                    password: ${GIT_PASSWORD:somepass}\n                    clone-on-start: ${CLONE_ON_START:true}\n                    # 搜索配置仓库多级目录\n                    search-paths: services/**,platform/**\n\n```\n\n\n微服务bootstrap.yml:\n```yaml\nspring:\n    application:\n        name: base-service\n    profiles:\n        active: default\n    cloud:\n        config:\n            # 匹配配置中心多个配置文件\n            name: common,datasource,redis,rabbitmq,${spring.application.name},${spring.application.name}-application\n            profile: ${spring.profiles.active}\n            label: ${COFNIG_BRANCH:master}\n            discovery:\n                enabled: true\n                service-id: config-center\n```\n\n通过命令行`spring.profiles.active`参数指定目标运行环境（dev、test、prod），比如运行在test环境，微服务启动时会去配置中心匹配如下文件：\n- common-test.properties\n- datasource-test.properties\n- redis-test.properties\n- rabbitmq-test properties\n- base-service-test.properties\n- base-service-application.yml\n","slug":"multiple-files-and-directories-search-in-config-center-of-spring-cloud","published":1,"updated":"2018-05-14T16:50:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa24000x2zs6tli39m3j","content":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"></p>\n<p>SpringCloud将所有配置通过文件或Git模式集中化，微服务在启动时通过注册中心找到配置中心并拉取对应配置文件，<br>让微服务动态更新配置成为可能。很多情况下，不同功能角色的配置文件分散在不同的配置文件中，比如<code>redis</code>和<code>rabbitmq</code>，<br>多文件匹配SpringCloud也是支持的，如下：</p>\n<a id=\"more\"></a>\n<p>配置中心 application.yml：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    application:</span></span><br><span class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">config-center</span></span><br><span class=\"line\"><span class=\"attr\">    cloud:</span></span><br><span class=\"line\"><span class=\"attr\">        bus:</span></span><br><span class=\"line\"><span class=\"attr\">            trace:</span></span><br><span class=\"line\"><span class=\"attr\">                enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">        config:</span></span><br><span class=\"line\"><span class=\"attr\">            server:</span></span><br><span class=\"line\"><span class=\"attr\">                git:</span></span><br><span class=\"line\"><span class=\"attr\">                    uri:</span> <span class=\"string\">$&#123;GIT_URL:https://git.xyz.com/cloud-config-repo.git&#125;</span></span><br><span class=\"line\"><span class=\"attr\">                    username:</span> <span class=\"string\">$&#123;GIT_USERNAME:someuser&#125;</span></span><br><span class=\"line\"><span class=\"attr\">                    password:</span> <span class=\"string\">$&#123;GIT_PASSWORD:somepass&#125;</span></span><br><span class=\"line\"><span class=\"attr\">                    clone-on-start:</span> <span class=\"string\">$&#123;CLONE_ON_START:true&#125;</span></span><br><span class=\"line\">                    <span class=\"comment\"># 搜索配置仓库多级目录</span></span><br><span class=\"line\"><span class=\"attr\">                    search-paths:</span> <span class=\"string\">services/**,platform/**</span></span><br></pre></td></tr></table></figure></p>\n<p>微服务bootstrap.yml:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    application:</span></span><br><span class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">base-service</span></span><br><span class=\"line\"><span class=\"attr\">    profiles:</span></span><br><span class=\"line\"><span class=\"attr\">        active:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">    cloud:</span></span><br><span class=\"line\"><span class=\"attr\">        config:</span></span><br><span class=\"line\">            <span class=\"comment\"># 匹配配置中心多个配置文件</span></span><br><span class=\"line\"><span class=\"attr\">            name:</span> <span class=\"string\">common,datasource,redis,rabbitmq,$&#123;spring.application.name&#125;,$&#123;spring.application.name&#125;-application</span></span><br><span class=\"line\"><span class=\"attr\">            profile:</span> <span class=\"string\">$&#123;spring.profiles.active&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            label:</span> <span class=\"string\">$&#123;COFNIG_BRANCH:master&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            discovery:</span></span><br><span class=\"line\"><span class=\"attr\">                enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">                service-id:</span> <span class=\"string\">config-center</span></span><br></pre></td></tr></table></figure></p>\n<p>通过命令行<code>spring.profiles.active</code>参数指定目标运行环境（dev、test、prod），比如运行在test环境，微服务启动时会去配置中心匹配如下文件：</p>\n<ul>\n<li>common-test.properties</li>\n<li>datasource-test.properties</li>\n<li>redis-test.properties</li>\n<li>rabbitmq-test properties</li>\n<li>base-service-test.properties</li>\n<li>base-service-application.yml</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"></p>\n<p>SpringCloud将所有配置通过文件或Git模式集中化，微服务在启动时通过注册中心找到配置中心并拉取对应配置文件，<br>让微服务动态更新配置成为可能。很多情况下，不同功能角色的配置文件分散在不同的配置文件中，比如<code>redis</code>和<code>rabbitmq</code>，<br>多文件匹配SpringCloud也是支持的，如下：</p>","more":"<p>配置中心 application.yml：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    application:</span></span><br><span class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">config-center</span></span><br><span class=\"line\"><span class=\"attr\">    cloud:</span></span><br><span class=\"line\"><span class=\"attr\">        bus:</span></span><br><span class=\"line\"><span class=\"attr\">            trace:</span></span><br><span class=\"line\"><span class=\"attr\">                enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">        config:</span></span><br><span class=\"line\"><span class=\"attr\">            server:</span></span><br><span class=\"line\"><span class=\"attr\">                git:</span></span><br><span class=\"line\"><span class=\"attr\">                    uri:</span> <span class=\"string\">$&#123;GIT_URL:https://git.xyz.com/cloud-config-repo.git&#125;</span></span><br><span class=\"line\"><span class=\"attr\">                    username:</span> <span class=\"string\">$&#123;GIT_USERNAME:someuser&#125;</span></span><br><span class=\"line\"><span class=\"attr\">                    password:</span> <span class=\"string\">$&#123;GIT_PASSWORD:somepass&#125;</span></span><br><span class=\"line\"><span class=\"attr\">                    clone-on-start:</span> <span class=\"string\">$&#123;CLONE_ON_START:true&#125;</span></span><br><span class=\"line\">                    <span class=\"comment\"># 搜索配置仓库多级目录</span></span><br><span class=\"line\"><span class=\"attr\">                    search-paths:</span> <span class=\"string\">services/**,platform/**</span></span><br></pre></td></tr></table></figure></p>\n<p>微服务bootstrap.yml:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    application:</span></span><br><span class=\"line\"><span class=\"attr\">        name:</span> <span class=\"string\">base-service</span></span><br><span class=\"line\"><span class=\"attr\">    profiles:</span></span><br><span class=\"line\"><span class=\"attr\">        active:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">    cloud:</span></span><br><span class=\"line\"><span class=\"attr\">        config:</span></span><br><span class=\"line\">            <span class=\"comment\"># 匹配配置中心多个配置文件</span></span><br><span class=\"line\"><span class=\"attr\">            name:</span> <span class=\"string\">common,datasource,redis,rabbitmq,$&#123;spring.application.name&#125;,$&#123;spring.application.name&#125;-application</span></span><br><span class=\"line\"><span class=\"attr\">            profile:</span> <span class=\"string\">$&#123;spring.profiles.active&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            label:</span> <span class=\"string\">$&#123;COFNIG_BRANCH:master&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            discovery:</span></span><br><span class=\"line\"><span class=\"attr\">                enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">                service-id:</span> <span class=\"string\">config-center</span></span><br></pre></td></tr></table></figure></p>\n<p>通过命令行<code>spring.profiles.active</code>参数指定目标运行环境（dev、test、prod），比如运行在test环境，微服务启动时会去配置中心匹配如下文件：</p>\n<ul>\n<li>common-test.properties</li>\n<li>datasource-test.properties</li>\n<li>redis-test.properties</li>\n<li>rabbitmq-test properties</li>\n<li>base-service-test.properties</li>\n<li>base-service-application.yml</li>\n</ul>"},{"title":"SpringCloud设置HttpMessageConverter为fastjson格式化输出","date":"2017-11-16T15:03:26.000Z","_content":"![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n\n我们的API响应的Media类型一般是`application/json;charset=UTF-8`，在SpringCloud中可以通过如下方式设置，\n\n并且将HttpMessageConverter设置为fastjson，使用fastjson提供的各种功能格式化输出内容。\n\n<!-- more -->\n```java\n    @Bean\n    public HttpMessageConverters fastjsonHttpMessageConverter() {\n\n        StringHttpMessageConverter converter = new StringHttpMessageConverter(StandardCharsets.UTF_8);\n\n        FastJsonHttpMessageConverter fastConverter  = new FastJsonHttpMessageConverter();\n        // 配置Media类型\n        List<MediaType> supportedMediaTypes = new ArrayList<>();\n        supportedMediaTypes.add(MediaType.TEXT_HTML);\n        supportedMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);\n        fastConverter.setSupportedMediaTypes(supportedMediaTypes);\n        \n        // fastjson配置\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.DisableCircularReferenceDetect);\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.WriteMapNullValue);\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.WriteNullStringAsEmpty);\n        fastConverter.setFastJsonConfig(fastJsonConfig);\n        \n        return new HttpMessageConverters(converter, fastConverter);\n    }\n\n```\n\n","source":"_posts/2017/11/16/set-http-message-converter-as-fastjson-in-spring-cloud.md","raw":"---\ntitle: SpringCloud设置HttpMessageConverter为fastjson格式化输出\ndate: 2017-11-16 23:03:26\ncategories: Spring Cloud\ntags:\n    - Spring Cloud\n    - Spring Boot\n---\n![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n\n我们的API响应的Media类型一般是`application/json;charset=UTF-8`，在SpringCloud中可以通过如下方式设置，\n\n并且将HttpMessageConverter设置为fastjson，使用fastjson提供的各种功能格式化输出内容。\n\n<!-- more -->\n```java\n    @Bean\n    public HttpMessageConverters fastjsonHttpMessageConverter() {\n\n        StringHttpMessageConverter converter = new StringHttpMessageConverter(StandardCharsets.UTF_8);\n\n        FastJsonHttpMessageConverter fastConverter  = new FastJsonHttpMessageConverter();\n        // 配置Media类型\n        List<MediaType> supportedMediaTypes = new ArrayList<>();\n        supportedMediaTypes.add(MediaType.TEXT_HTML);\n        supportedMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);\n        fastConverter.setSupportedMediaTypes(supportedMediaTypes);\n        \n        // fastjson配置\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.DisableCircularReferenceDetect);\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.WriteMapNullValue);\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.WriteNullStringAsEmpty);\n        fastConverter.setFastJsonConfig(fastJsonConfig);\n        \n        return new HttpMessageConverters(converter, fastConverter);\n    }\n\n```\n\n","slug":"set-http-message-converter-as-fastjson-in-spring-cloud","published":1,"updated":"2018-05-14T16:50:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2500102zs6zg86wsj3","content":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"></p>\n<p>我们的API响应的Media类型一般是<code>application/json;charset=UTF-8</code>，在SpringCloud中可以通过如下方式设置，</p>\n<p>并且将HttpMessageConverter设置为fastjson，使用fastjson提供的各种功能格式化输出内容。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverters <span class=\"title\">fastjsonHttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    StringHttpMessageConverter converter = <span class=\"keyword\">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8);</span><br><span class=\"line\"></span><br><span class=\"line\">    FastJsonHttpMessageConverter fastConverter  = <span class=\"keyword\">new</span> FastJsonHttpMessageConverter();</span><br><span class=\"line\">    <span class=\"comment\">// 配置Media类型</span></span><br><span class=\"line\">    List&lt;MediaType&gt; supportedMediaTypes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    supportedMediaTypes.add(MediaType.TEXT_HTML);</span><br><span class=\"line\">    supportedMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">    fastConverter.setSupportedMediaTypes(supportedMediaTypes);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// fastjson配置</span></span><br><span class=\"line\">    FastJsonConfig fastJsonConfig = <span class=\"keyword\">new</span> FastJsonConfig();</span><br><span class=\"line\">    fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class=\"line\">    fastJsonConfig.setSerializerFeatures(SerializerFeature.DisableCircularReferenceDetect);</span><br><span class=\"line\">    fastJsonConfig.setSerializerFeatures(SerializerFeature.WriteMapNullValue);</span><br><span class=\"line\">    fastJsonConfig.setSerializerFeatures(SerializerFeature.WriteNullStringAsEmpty);</span><br><span class=\"line\">    fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HttpMessageConverters(converter, fastConverter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"></p>\n<p>我们的API响应的Media类型一般是<code>application/json;charset=UTF-8</code>，在SpringCloud中可以通过如下方式设置，</p>\n<p>并且将HttpMessageConverter设置为fastjson，使用fastjson提供的各种功能格式化输出内容。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HttpMessageConverters <span class=\"title\">fastjsonHttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    StringHttpMessageConverter converter = <span class=\"keyword\">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8);</span><br><span class=\"line\"></span><br><span class=\"line\">    FastJsonHttpMessageConverter fastConverter  = <span class=\"keyword\">new</span> FastJsonHttpMessageConverter();</span><br><span class=\"line\">    <span class=\"comment\">// 配置Media类型</span></span><br><span class=\"line\">    List&lt;MediaType&gt; supportedMediaTypes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    supportedMediaTypes.add(MediaType.TEXT_HTML);</span><br><span class=\"line\">    supportedMediaTypes.add(MediaType.APPLICATION_JSON_UTF8);</span><br><span class=\"line\">    fastConverter.setSupportedMediaTypes(supportedMediaTypes);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// fastjson配置</span></span><br><span class=\"line\">    FastJsonConfig fastJsonConfig = <span class=\"keyword\">new</span> FastJsonConfig();</span><br><span class=\"line\">    fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class=\"line\">    fastJsonConfig.setSerializerFeatures(SerializerFeature.DisableCircularReferenceDetect);</span><br><span class=\"line\">    fastJsonConfig.setSerializerFeatures(SerializerFeature.WriteMapNullValue);</span><br><span class=\"line\">    fastJsonConfig.setSerializerFeatures(SerializerFeature.WriteNullStringAsEmpty);</span><br><span class=\"line\">    fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HttpMessageConverters(converter, fastConverter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SpringCloud集成Redis哨兵","date":"2017-11-20T13:03:26.000Z","_content":"![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n在SpringCloud中我们可以很容易地集成并使用Redis缓存，在pom.xml中加入依赖，\n<!-- more -->\npom.xml\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n在application.yml中加入如下内容：\n```yaml\nspring:\n    profiles:\n        active: default\n    redis:\n        sentinel:\n            master: ${spring.redis.sentinel.master}\n            nodes: ${spring.redis.sentinel.nodes}\n        pool:\n            max-idle: ${spring.redis.pool.max-idle}\n            min-idle: ${spring.redis.pool.min-idle}\n            max-active: ${spring.redis.pool.max-active}\n            max-wait: ${spring.redis.pool.max-wait}\n```\n\n\n在Configuration中加入`RedisTemplate`，然后在代码中注入RedisTemplate即可使用。\n```java\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n    \n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new GenericToStringSerializer<>(String.class));\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n\n```\n\n","source":"_posts/2017/11/20/using-redis-in-spring-cloud.md","raw":"---\ntitle: SpringCloud集成Redis哨兵\ndate: 2017-11-20 21:03:26\ncategories: Spring Cloud\ntags:\n    - Spring Cloud\n    - Spring Boot\n    - Redis\n---\n![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n在SpringCloud中我们可以很容易地集成并使用Redis缓存，在pom.xml中加入依赖，\n<!-- more -->\npom.xml\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n在application.yml中加入如下内容：\n```yaml\nspring:\n    profiles:\n        active: default\n    redis:\n        sentinel:\n            master: ${spring.redis.sentinel.master}\n            nodes: ${spring.redis.sentinel.nodes}\n        pool:\n            max-idle: ${spring.redis.pool.max-idle}\n            min-idle: ${spring.redis.pool.min-idle}\n            max-active: ${spring.redis.pool.max-active}\n            max-wait: ${spring.redis.pool.max-wait}\n```\n\n\n在Configuration中加入`RedisTemplate`，然后在代码中注入RedisTemplate即可使用。\n```java\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n    \n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new GenericToStringSerializer<>(String.class));\n        redisTemplate.setConnectionFactory(factory);\n        return redisTemplate;\n    }\n\n```\n\n","slug":"using-redis-in-spring-cloud","published":1,"updated":"2018-05-14T16:50:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2700112zs6kmsshoi0","content":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"><br>在SpringCloud中我们可以很容易地集成并使用Redis缓存，在pom.xml中加入依赖，<br><a id=\"more\"></a><br>pom.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在application.yml中加入如下内容：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    profiles:</span></span><br><span class=\"line\"><span class=\"attr\">        active:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">    redis:</span></span><br><span class=\"line\"><span class=\"attr\">        sentinel:</span></span><br><span class=\"line\"><span class=\"attr\">            master:</span> <span class=\"string\">$&#123;spring.redis.sentinel.master&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            nodes:</span> <span class=\"string\">$&#123;spring.redis.sentinel.nodes&#125;</span></span><br><span class=\"line\"><span class=\"attr\">        pool:</span></span><br><span class=\"line\"><span class=\"attr\">            max-idle:</span> <span class=\"string\">$&#123;spring.redis.pool.max-idle&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            min-idle:</span> <span class=\"string\">$&#123;spring.redis.pool.min-idle&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            max-active:</span> <span class=\"string\">$&#123;spring.redis.pool.max-active&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            max-wait:</span> <span class=\"string\">$&#123;spring.redis.pool.max-wait&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>在Configuration中加入<code>RedisTemplate</code>，然后在代码中注入RedisTemplate即可使用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">    redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> GenericToStringSerializer&lt;&gt;(String.class));</span><br><span class=\"line\">    redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"><br>在SpringCloud中我们可以很容易地集成并使用Redis缓存，在pom.xml中加入依赖，<br>","more":"<br>pom.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在application.yml中加入如下内容：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    profiles:</span></span><br><span class=\"line\"><span class=\"attr\">        active:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">    redis:</span></span><br><span class=\"line\"><span class=\"attr\">        sentinel:</span></span><br><span class=\"line\"><span class=\"attr\">            master:</span> <span class=\"string\">$&#123;spring.redis.sentinel.master&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            nodes:</span> <span class=\"string\">$&#123;spring.redis.sentinel.nodes&#125;</span></span><br><span class=\"line\"><span class=\"attr\">        pool:</span></span><br><span class=\"line\"><span class=\"attr\">            max-idle:</span> <span class=\"string\">$&#123;spring.redis.pool.max-idle&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            min-idle:</span> <span class=\"string\">$&#123;spring.redis.pool.min-idle&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            max-active:</span> <span class=\"string\">$&#123;spring.redis.pool.max-active&#125;</span></span><br><span class=\"line\"><span class=\"attr\">            max-wait:</span> <span class=\"string\">$&#123;spring.redis.pool.max-wait&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>在Configuration中加入<code>RedisTemplate</code>，然后在代码中注入RedisTemplate即可使用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">    redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">    redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> GenericToStringSerializer&lt;&gt;(String.class));</span><br><span class=\"line\">    redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"SpringCloud设置zuul网关跨域访问","date":"2017-11-22T13:53:26.000Z","_content":"![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\nSpringCloud设置跨域访问只需在zuul网关服务中加入如下configuration即可。\n\n<!-- more -->\n\n```java\n    /**\n     * CORS配置\n     * @return\n     */\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true);\n        config.addAllowedOrigin(\"*\");\n        config.addAllowedHeader(\"*\");\n        config.addAllowedMethod(\"OPTIONS\");\n        config.addAllowedMethod(\"HEAD\");\n        config.addAllowedMethod(\"GET\");\n        config.addAllowedMethod(\"PUT\");\n        config.addAllowedMethod(\"POST\");\n        config.addAllowedMethod(\"DELETE\");\n        config.addAllowedMethod(\"PATCH\");\n        source.registerCorsConfiguration(\"/**\", config);\n        return new CorsFilter(source);\n    }\n\n```\n\n\n","source":"_posts/2017/11/22/cors-filter-settings-in-zuul-of-spring-cloud.md","raw":"---\ntitle: SpringCloud设置zuul网关跨域访问\ndate: 2017-11-22 21:53:26\ncategories: Spring Cloud\ntags:\n    - Spring Cloud\n    - Spring Boot\n---\n![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\nSpringCloud设置跨域访问只需在zuul网关服务中加入如下configuration即可。\n\n<!-- more -->\n\n```java\n    /**\n     * CORS配置\n     * @return\n     */\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true);\n        config.addAllowedOrigin(\"*\");\n        config.addAllowedHeader(\"*\");\n        config.addAllowedMethod(\"OPTIONS\");\n        config.addAllowedMethod(\"HEAD\");\n        config.addAllowedMethod(\"GET\");\n        config.addAllowedMethod(\"PUT\");\n        config.addAllowedMethod(\"POST\");\n        config.addAllowedMethod(\"DELETE\");\n        config.addAllowedMethod(\"PATCH\");\n        source.registerCorsConfiguration(\"/**\", config);\n        return new CorsFilter(source);\n    }\n\n```\n\n\n","slug":"cors-filter-settings-in-zuul-of-spring-cloud","published":1,"updated":"2018-05-14T16:50:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2800162zs62ajrb3ge","content":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"><br>SpringCloud设置跨域访问只需在zuul网关服务中加入如下configuration即可。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CORS配置</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CorsFilter <span class=\"title\">corsFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    UrlBasedCorsConfigurationSource source = <span class=\"keyword\">new</span> UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">    CorsConfiguration config = <span class=\"keyword\">new</span> CorsConfiguration();</span><br><span class=\"line\">    config.setAllowCredentials(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    config.addAllowedOrigin(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    config.addAllowedHeader(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"OPTIONS\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"HEAD\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"GET\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"PUT\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"POST\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"DELETE\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"PATCH\"</span>);</span><br><span class=\"line\">    source.registerCorsConfiguration(<span class=\"string\">\"/**\"</span>, config);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CorsFilter(source);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"><br>SpringCloud设置跨域访问只需在zuul网关服务中加入如下configuration即可。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CORS配置</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CorsFilter <span class=\"title\">corsFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    UrlBasedCorsConfigurationSource source = <span class=\"keyword\">new</span> UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">    CorsConfiguration config = <span class=\"keyword\">new</span> CorsConfiguration();</span><br><span class=\"line\">    config.setAllowCredentials(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    config.addAllowedOrigin(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    config.addAllowedHeader(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"OPTIONS\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"HEAD\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"GET\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"PUT\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"POST\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"DELETE\"</span>);</span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"PATCH\"</span>);</span><br><span class=\"line\">    source.registerCorsConfiguration(<span class=\"string\">\"/**\"</span>, config);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CorsFilter(source);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SpringCloud自定义Feign解码器","date":"2017-12-02T14:53:26.000Z","_content":"![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n在SpringCloud微服务中，Feign组件帮我们把跨服务HTTP请求模板化，我们的FeignClient看上去可能是下面这样，\n\n返回值都被封装在一个ApiResponse中，调用者获取真正内容时需要再次获取ApiResponse中的data内容，略显恶心。\n\n<!-- more -->\n```java\n@FeignClient(value = Const.FeignClient.USER_CENTER, path = \"user\")\npublic interface UserCloudService {\n\n    @PostMapping(\"save\")\n    ApiResponse<User> saveUser(@RequestBody UserVo userVo);\n\n}\n```\n\n使用其Decoder让我们更方便地自定义FeignClient中的方法返回值，\n\n```java\n    @Bean\n    public Decoder decoder() {\n        return (response, type) -> {\n            String body = Util.toString(response.body().asReader());\n            ObjectMapper mapper = new ObjectMapper();\n            JavaType javaType = mapper.getTypeFactory()\n                    .constructParametricType(ApiResponse.class, mapper.getTypeFactory().constructType(type));\n            ApiResponse<?> apiResponse = mapper.readValue(body, javaType);\n            return apiResponse.getData();\n        };\n    }\n\n```\n\n\n\n所以以上FeignClient就会变成如下，跟普通Service无异，平滑过渡。\n```java\n@FeignClient(value = Const.FeignClient.USER_CENTER, path = \"user\")\npublic interface UserCloudService {\n\n    @PostMapping(\"save\")\n    User saveUser(@RequestBody UserVo userVo);\n\n}\n```\n\n\n","source":"_posts/2017/12/02/customize-feign-decoder-in-spring-cloud.md","raw":"---\ntitle: SpringCloud自定义Feign解码器\ndate: 2017-12-02 22:53:26\ncategories: Spring Cloud\ntags:\n    - Spring Cloud\n    - Spring Boot\n---\n![spring-cloud](/images/post/2017/11/10/spring-cloud-logo.jpg)\n在SpringCloud微服务中，Feign组件帮我们把跨服务HTTP请求模板化，我们的FeignClient看上去可能是下面这样，\n\n返回值都被封装在一个ApiResponse中，调用者获取真正内容时需要再次获取ApiResponse中的data内容，略显恶心。\n\n<!-- more -->\n```java\n@FeignClient(value = Const.FeignClient.USER_CENTER, path = \"user\")\npublic interface UserCloudService {\n\n    @PostMapping(\"save\")\n    ApiResponse<User> saveUser(@RequestBody UserVo userVo);\n\n}\n```\n\n使用其Decoder让我们更方便地自定义FeignClient中的方法返回值，\n\n```java\n    @Bean\n    public Decoder decoder() {\n        return (response, type) -> {\n            String body = Util.toString(response.body().asReader());\n            ObjectMapper mapper = new ObjectMapper();\n            JavaType javaType = mapper.getTypeFactory()\n                    .constructParametricType(ApiResponse.class, mapper.getTypeFactory().constructType(type));\n            ApiResponse<?> apiResponse = mapper.readValue(body, javaType);\n            return apiResponse.getData();\n        };\n    }\n\n```\n\n\n\n所以以上FeignClient就会变成如下，跟普通Service无异，平滑过渡。\n```java\n@FeignClient(value = Const.FeignClient.USER_CENTER, path = \"user\")\npublic interface UserCloudService {\n\n    @PostMapping(\"save\")\n    User saveUser(@RequestBody UserVo userVo);\n\n}\n```\n\n\n","slug":"customize-feign-decoder-in-spring-cloud","published":1,"updated":"2018-05-14T16:50:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2900182zs6oqvo90v2","content":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"><br>在SpringCloud微服务中，Feign组件帮我们把跨服务HTTP请求模板化，我们的FeignClient看上去可能是下面这样，</p>\n<p>返回值都被封装在一个ApiResponse中，调用者获取真正内容时需要再次获取ApiResponse中的data内容，略显恶心。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(value = Const.FeignClient.USER_CENTER, path = <span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserCloudService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"save\"</span>)</span><br><span class=\"line\">    <span class=\"function\">ApiResponse&lt;User&gt; <span class=\"title\">saveUser</span><span class=\"params\">(@RequestBody UserVo userVo)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用其Decoder让我们更方便地自定义FeignClient中的方法返回值，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Decoder <span class=\"title\">decoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (response, type) -&gt; &#123;</span><br><span class=\"line\">        String body = Util.toString(response.body().asReader());</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        JavaType javaType = mapper.getTypeFactory()</span><br><span class=\"line\">                .constructParametricType(ApiResponse.class, mapper.getTypeFactory().constructType(type));</span><br><span class=\"line\">        ApiResponse&lt;?&gt; apiResponse = mapper.readValue(body, javaType);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiResponse.getData();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以以上FeignClient就会变成如下，跟普通Service无异，平滑过渡。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(value = Const.FeignClient.USER_CENTER, path = <span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserCloudService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"save\"</span>)</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">saveUser</span><span class=\"params\">(@RequestBody UserVo userVo)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2017/11/10/spring-cloud-logo.jpg\" alt=\"spring-cloud\"><br>在SpringCloud微服务中，Feign组件帮我们把跨服务HTTP请求模板化，我们的FeignClient看上去可能是下面这样，</p>\n<p>返回值都被封装在一个ApiResponse中，调用者获取真正内容时需要再次获取ApiResponse中的data内容，略显恶心。</p>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(value = Const.FeignClient.USER_CENTER, path = <span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserCloudService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"save\"</span>)</span><br><span class=\"line\">    <span class=\"function\">ApiResponse&lt;User&gt; <span class=\"title\">saveUser</span><span class=\"params\">(@RequestBody UserVo userVo)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用其Decoder让我们更方便地自定义FeignClient中的方法返回值，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Decoder <span class=\"title\">decoder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (response, type) -&gt; &#123;</span><br><span class=\"line\">        String body = Util.toString(response.body().asReader());</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        JavaType javaType = mapper.getTypeFactory()</span><br><span class=\"line\">                .constructParametricType(ApiResponse.class, mapper.getTypeFactory().constructType(type));</span><br><span class=\"line\">        ApiResponse&lt;?&gt; apiResponse = mapper.readValue(body, javaType);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiResponse.getData();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以以上FeignClient就会变成如下，跟普通Service无异，平滑过渡。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(value = Const.FeignClient.USER_CENTER, path = <span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserCloudService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"save\"</span>)</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">saveUser</span><span class=\"params\">(@RequestBody UserVo userVo)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"【JVM源码探秘】在Mac上编译OpenJDK10源码","date":"2018-01-28T17:03:13.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk-logo.jpg)\n\n以前尝试编译过OpenJDK7、8和9，由于源代码中存在诸多BUG，导致各种编译问题，解决来解决去，还是很难编译通过，很是不爽。\n\n今天抱着试试看的态度又服用了一个疗程，拿起桌上的OpenJDK10，反手就是一次编译，居然像德芙一样丝滑，一次通过。\n\n<!-- more -->\n# 软件环境\n- OS：macOS Sierra 10.12\n- Xcode: 8.3.3\n- Oracle JDK: 1.8.0_151\n- freetype: 2.9\n- ccache: 3.3.5(Optional)\n\n# 前置条件\n先确保系统已安装freetype和ccache\n```bash\n$ brew install freetype ccache\n```\n\n# 拉取代码\n```\n$ hg clone http://hg.openjdk.java.net/jdk10/master openjdk10\n```\n此处需要耐心等待一段时间，必要情况下需要多尝试几次才能拉取成功。\n\n\n\n# 配置参数\n\n接下来配置编译参数，以下是相关选项说明\n- `--with-debug-level=slowdebug` 启用slowdebug级别调试\n- `--enable-dtrace` 启用dtrace\n- `--with-jvm-variants=server` 编译server类型JVM\n- `--with-target-bits=64` 指定JVM为64位\n- `--enable-ccache` 启用ccache，加快编译\n- `--with-num-cores=8` 编译使用CPU核心数\n- `--with-memory-size=8000` 编译使用内存\n- `--disable-warnings-as-errors` 忽略警告 \n\n```bash\n$ bash configure --with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --enable-ccache --with-num-cores=8 --with-memory-size=8000  --disable-warnings-as-errors\n\n...\n\n====================================================\nA new configuration has been successfully created in\n/Users/hunterzhao/CLionProjects/OpenJDK10/build/macosx-x86_64-normal-server-slowdebug\nusing configure arguments '--with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --enable-ccache --with-num-cores=8 --with-memory-size=8000 --disable-warnings-as-errors'.\n\nConfiguration summary:\n* Debug level:    slowdebug\n* HS debug level: debug\n* JDK variant:    normal\n* JVM variants:   server\n* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64\n* Version string: 10-internal+0-adhoc.hunterzhao.OpenJDK10 (10-internal)\n\nTools summary:\n* Boot JDK:       java version \"1.8.0_151\" Java(TM) SE Runtime Environment (build 1.8.0_151-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home)\n* Toolchain:      clang (clang/LLVM from Xcode 8.3.3)\n* C Compiler:     Version 8.1.0 (at /usr/bin/clang)\n* C++ Compiler:   Version 8.1.0 (at /usr/bin/clang++)\n\nBuild performance summary:\n* Cores to use:   7\n* Memory limit:   8000 MB\n* ccache status:  Active (3.3.5)\n```\n\n\n\n\n# 执行编译\n```\n$ make images\n\n...\n\nCreating support/demos/image/jfc/CodePointIM/CodePointIM.jar\nCreating support/demos/image/applets/MoleculeViewer/MoleculeViewer.jar\nCreating support/demos/image/applets/WireFrame/WireFrame.jar\nCreating support/demos/image/jfc/SwingApplet/SwingApplet.jar\nCreating support/demos/image/jfc/FileChooserDemo/FileChooserDemo.jar\nCreating support/demos/image/jfc/Font2DTest/Font2DTest.jar\nCreating support/demos/image/jfc/Metalworks/Metalworks.jar\nCreating support/demos/image/jfc/Notepad/Notepad.jar\nCreating support/demos/image/jfc/SampleTree/SampleTree.jar\nCreating support/demos/image/jfc/TableExample/TableExample.jar\nCreating support/demos/image/jfc/TransparentRuler/TransparentRuler.jar\nCreating support/classlist.jar\nCreating images/jmods/jdk.jlink.jmod\nCreating images/jmods/java.base.jmod\nCreating jre jimage\nCreating jdk jimage\nWARNING: Using incubator modules: jdk.incubator.httpclient\nWARNING: Using incubator modules: jdk.incubator.httpclient\nStopping sjavac server\nFinished building target 'images' in configuration 'macosx-x86_64-normal-server-slowdebug'\n```\n大约10分钟后编译完成，由于机器配置不同可能会导致编译时长有所差异。\n\n# 测试\n\n```bash\n$ ./build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java -version\nopenjdk version \"10-internal\"\nOpenJDK Runtime Environment (slowdebug build 10-internal+0-adhoc.hunterzhao.OpenJDK10)\nOpenJDK 64-Bit Server VM (slowdebug build 10-internal+0-adhoc.hunterzhao.OpenJDK10, mixed mode)\n```\n\n\n本篇文章至此结束，下篇介绍搭建OpenJDK10 DEBUG环境。","source":"_posts/2018/01/29/compile-openjdk10-source-code-on-mac.md","raw":"---\ntitle: 【JVM源码探秘】在Mac上编译OpenJDK10源码\ndate: 2018-01-29 01:03:13\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk-logo.jpg)\n\n以前尝试编译过OpenJDK7、8和9，由于源代码中存在诸多BUG，导致各种编译问题，解决来解决去，还是很难编译通过，很是不爽。\n\n今天抱着试试看的态度又服用了一个疗程，拿起桌上的OpenJDK10，反手就是一次编译，居然像德芙一样丝滑，一次通过。\n\n<!-- more -->\n# 软件环境\n- OS：macOS Sierra 10.12\n- Xcode: 8.3.3\n- Oracle JDK: 1.8.0_151\n- freetype: 2.9\n- ccache: 3.3.5(Optional)\n\n# 前置条件\n先确保系统已安装freetype和ccache\n```bash\n$ brew install freetype ccache\n```\n\n# 拉取代码\n```\n$ hg clone http://hg.openjdk.java.net/jdk10/master openjdk10\n```\n此处需要耐心等待一段时间，必要情况下需要多尝试几次才能拉取成功。\n\n\n\n# 配置参数\n\n接下来配置编译参数，以下是相关选项说明\n- `--with-debug-level=slowdebug` 启用slowdebug级别调试\n- `--enable-dtrace` 启用dtrace\n- `--with-jvm-variants=server` 编译server类型JVM\n- `--with-target-bits=64` 指定JVM为64位\n- `--enable-ccache` 启用ccache，加快编译\n- `--with-num-cores=8` 编译使用CPU核心数\n- `--with-memory-size=8000` 编译使用内存\n- `--disable-warnings-as-errors` 忽略警告 \n\n```bash\n$ bash configure --with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --enable-ccache --with-num-cores=8 --with-memory-size=8000  --disable-warnings-as-errors\n\n...\n\n====================================================\nA new configuration has been successfully created in\n/Users/hunterzhao/CLionProjects/OpenJDK10/build/macosx-x86_64-normal-server-slowdebug\nusing configure arguments '--with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --enable-ccache --with-num-cores=8 --with-memory-size=8000 --disable-warnings-as-errors'.\n\nConfiguration summary:\n* Debug level:    slowdebug\n* HS debug level: debug\n* JDK variant:    normal\n* JVM variants:   server\n* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64\n* Version string: 10-internal+0-adhoc.hunterzhao.OpenJDK10 (10-internal)\n\nTools summary:\n* Boot JDK:       java version \"1.8.0_151\" Java(TM) SE Runtime Environment (build 1.8.0_151-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home)\n* Toolchain:      clang (clang/LLVM from Xcode 8.3.3)\n* C Compiler:     Version 8.1.0 (at /usr/bin/clang)\n* C++ Compiler:   Version 8.1.0 (at /usr/bin/clang++)\n\nBuild performance summary:\n* Cores to use:   7\n* Memory limit:   8000 MB\n* ccache status:  Active (3.3.5)\n```\n\n\n\n\n# 执行编译\n```\n$ make images\n\n...\n\nCreating support/demos/image/jfc/CodePointIM/CodePointIM.jar\nCreating support/demos/image/applets/MoleculeViewer/MoleculeViewer.jar\nCreating support/demos/image/applets/WireFrame/WireFrame.jar\nCreating support/demos/image/jfc/SwingApplet/SwingApplet.jar\nCreating support/demos/image/jfc/FileChooserDemo/FileChooserDemo.jar\nCreating support/demos/image/jfc/Font2DTest/Font2DTest.jar\nCreating support/demos/image/jfc/Metalworks/Metalworks.jar\nCreating support/demos/image/jfc/Notepad/Notepad.jar\nCreating support/demos/image/jfc/SampleTree/SampleTree.jar\nCreating support/demos/image/jfc/TableExample/TableExample.jar\nCreating support/demos/image/jfc/TransparentRuler/TransparentRuler.jar\nCreating support/classlist.jar\nCreating images/jmods/jdk.jlink.jmod\nCreating images/jmods/java.base.jmod\nCreating jre jimage\nCreating jdk jimage\nWARNING: Using incubator modules: jdk.incubator.httpclient\nWARNING: Using incubator modules: jdk.incubator.httpclient\nStopping sjavac server\nFinished building target 'images' in configuration 'macosx-x86_64-normal-server-slowdebug'\n```\n大约10分钟后编译完成，由于机器配置不同可能会导致编译时长有所差异。\n\n# 测试\n\n```bash\n$ ./build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java -version\nopenjdk version \"10-internal\"\nOpenJDK Runtime Environment (slowdebug build 10-internal+0-adhoc.hunterzhao.OpenJDK10)\nOpenJDK 64-Bit Server VM (slowdebug build 10-internal+0-adhoc.hunterzhao.OpenJDK10, mixed mode)\n```\n\n\n本篇文章至此结束，下篇介绍搭建OpenJDK10 DEBUG环境。","slug":"compile-openjdk10-source-code-on-mac","published":1,"updated":"2018-04-30T08:46:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2a001c2zs6izg8vypi","content":"<p><img src=\"/images/post/2018/01/29/openjdk-logo.jpg\" alt=\"openjdk\"></p>\n<p>以前尝试编译过OpenJDK7、8和9，由于源代码中存在诸多BUG，导致各种编译问题，解决来解决去，还是很难编译通过，很是不爽。</p>\n<p>今天抱着试试看的态度又服用了一个疗程，拿起桌上的OpenJDK10，反手就是一次编译，居然像德芙一样丝滑，一次通过。</p>\n<a id=\"more\"></a>\n<h1 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h1><ul>\n<li>OS：macOS Sierra 10.12</li>\n<li>Xcode: 8.3.3</li>\n<li>Oracle JDK: 1.8.0_151</li>\n<li>freetype: 2.9</li>\n<li>ccache: 3.3.5(Optional)</li>\n</ul>\n<h1 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h1><p>先确保系统已安装freetype和ccache<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install freetype ccache</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"拉取代码\"><a href=\"#拉取代码\" class=\"headerlink\" title=\"拉取代码\"></a>拉取代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hg clone http://hg.openjdk.java.net/jdk10/master openjdk10</span><br></pre></td></tr></table></figure>\n<p>此处需要耐心等待一段时间，必要情况下需要多尝试几次才能拉取成功。</p>\n<h1 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h1><p>接下来配置编译参数，以下是相关选项说明</p>\n<ul>\n<li><code>--with-debug-level=slowdebug</code> 启用slowdebug级别调试</li>\n<li><code>--enable-dtrace</code> 启用dtrace</li>\n<li><code>--with-jvm-variants=server</code> 编译server类型JVM</li>\n<li><code>--with-target-bits=64</code> 指定JVM为64位</li>\n<li><code>--enable-ccache</code> 启用ccache，加快编译</li>\n<li><code>--with-num-cores=8</code> 编译使用CPU核心数</li>\n<li><code>--with-memory-size=8000</code> 编译使用内存</li>\n<li><code>--disable-warnings-as-errors</code> 忽略警告 </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash configure --with-debug-level=slowdebug --<span class=\"built_in\">enable</span>-dtrace --with-jvm-variants=server --with-target-bits=64 --<span class=\"built_in\">enable</span>-ccache --with-num-cores=8 --with-memory-size=8000  --<span class=\"built_in\">disable</span>-warnings-as-errors</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">====================================================</span><br><span class=\"line\">A new configuration has been successfully created <span class=\"keyword\">in</span></span><br><span class=\"line\">/Users/hunterzhao/CLionProjects/OpenJDK10/build/macosx-x86_64-normal-server-slowdebug</span><br><span class=\"line\">using configure arguments <span class=\"string\">'--with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --enable-ccache --with-num-cores=8 --with-memory-size=8000 --disable-warnings-as-errors'</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration summary:</span><br><span class=\"line\">* Debug level:    slowdebug</span><br><span class=\"line\">* HS debug level: debug</span><br><span class=\"line\">* JDK variant:    normal</span><br><span class=\"line\">* JVM variants:   server</span><br><span class=\"line\">* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64</span><br><span class=\"line\">* Version string: 10-internal+0-adhoc.hunterzhao.OpenJDK10 (10-internal)</span><br><span class=\"line\"></span><br><span class=\"line\">Tools summary:</span><br><span class=\"line\">* Boot JDK:       java version <span class=\"string\">\"1.8.0_151\"</span> Java(TM) SE Runtime Environment (build 1.8.0_151-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home)</span><br><span class=\"line\">* Toolchain:      clang (clang/LLVM from Xcode 8.3.3)</span><br><span class=\"line\">* C Compiler:     Version 8.1.0 (at /usr/bin/clang)</span><br><span class=\"line\">* C++ Compiler:   Version 8.1.0 (at /usr/bin/clang++)</span><br><span class=\"line\"></span><br><span class=\"line\">Build performance summary:</span><br><span class=\"line\">* Cores to use:   7</span><br><span class=\"line\">* Memory <span class=\"built_in\">limit</span>:   8000 MB</span><br><span class=\"line\">* ccache status:  Active (3.3.5)</span><br></pre></td></tr></table></figure>\n<h1 id=\"执行编译\"><a href=\"#执行编译\" class=\"headerlink\" title=\"执行编译\"></a>执行编译</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make images</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Creating support/demos/image/jfc/CodePointIM/CodePointIM.jar</span><br><span class=\"line\">Creating support/demos/image/applets/MoleculeViewer/MoleculeViewer.jar</span><br><span class=\"line\">Creating support/demos/image/applets/WireFrame/WireFrame.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/SwingApplet/SwingApplet.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/FileChooserDemo/FileChooserDemo.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Font2DTest/Font2DTest.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Metalworks/Metalworks.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Notepad/Notepad.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/SampleTree/SampleTree.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/TableExample/TableExample.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/TransparentRuler/TransparentRuler.jar</span><br><span class=\"line\">Creating support/classlist.jar</span><br><span class=\"line\">Creating images/jmods/jdk.jlink.jmod</span><br><span class=\"line\">Creating images/jmods/java.base.jmod</span><br><span class=\"line\">Creating jre jimage</span><br><span class=\"line\">Creating jdk jimage</span><br><span class=\"line\">WARNING: Using incubator modules: jdk.incubator.httpclient</span><br><span class=\"line\">WARNING: Using incubator modules: jdk.incubator.httpclient</span><br><span class=\"line\">Stopping sjavac server</span><br><span class=\"line\">Finished building target &apos;images&apos; in configuration &apos;macosx-x86_64-normal-server-slowdebug&apos;</span><br></pre></td></tr></table></figure>\n<p>大约10分钟后编译完成，由于机器配置不同可能会导致编译时长有所差异。</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java -version</span><br><span class=\"line\">openjdk version <span class=\"string\">\"10-internal\"</span></span><br><span class=\"line\">OpenJDK Runtime Environment (slowdebug build 10-internal+0-adhoc.hunterzhao.OpenJDK10)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (slowdebug build 10-internal+0-adhoc.hunterzhao.OpenJDK10, mixed mode)</span><br></pre></td></tr></table></figure>\n<p>本篇文章至此结束，下篇介绍搭建OpenJDK10 DEBUG环境。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk-logo.jpg\" alt=\"openjdk\"></p>\n<p>以前尝试编译过OpenJDK7、8和9，由于源代码中存在诸多BUG，导致各种编译问题，解决来解决去，还是很难编译通过，很是不爽。</p>\n<p>今天抱着试试看的态度又服用了一个疗程，拿起桌上的OpenJDK10，反手就是一次编译，居然像德芙一样丝滑，一次通过。</p>","more":"<h1 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h1><ul>\n<li>OS：macOS Sierra 10.12</li>\n<li>Xcode: 8.3.3</li>\n<li>Oracle JDK: 1.8.0_151</li>\n<li>freetype: 2.9</li>\n<li>ccache: 3.3.5(Optional)</li>\n</ul>\n<h1 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h1><p>先确保系统已安装freetype和ccache<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install freetype ccache</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"拉取代码\"><a href=\"#拉取代码\" class=\"headerlink\" title=\"拉取代码\"></a>拉取代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hg clone http://hg.openjdk.java.net/jdk10/master openjdk10</span><br></pre></td></tr></table></figure>\n<p>此处需要耐心等待一段时间，必要情况下需要多尝试几次才能拉取成功。</p>\n<h1 id=\"配置参数\"><a href=\"#配置参数\" class=\"headerlink\" title=\"配置参数\"></a>配置参数</h1><p>接下来配置编译参数，以下是相关选项说明</p>\n<ul>\n<li><code>--with-debug-level=slowdebug</code> 启用slowdebug级别调试</li>\n<li><code>--enable-dtrace</code> 启用dtrace</li>\n<li><code>--with-jvm-variants=server</code> 编译server类型JVM</li>\n<li><code>--with-target-bits=64</code> 指定JVM为64位</li>\n<li><code>--enable-ccache</code> 启用ccache，加快编译</li>\n<li><code>--with-num-cores=8</code> 编译使用CPU核心数</li>\n<li><code>--with-memory-size=8000</code> 编译使用内存</li>\n<li><code>--disable-warnings-as-errors</code> 忽略警告 </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash configure --with-debug-level=slowdebug --<span class=\"built_in\">enable</span>-dtrace --with-jvm-variants=server --with-target-bits=64 --<span class=\"built_in\">enable</span>-ccache --with-num-cores=8 --with-memory-size=8000  --<span class=\"built_in\">disable</span>-warnings-as-errors</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">====================================================</span><br><span class=\"line\">A new configuration has been successfully created <span class=\"keyword\">in</span></span><br><span class=\"line\">/Users/hunterzhao/CLionProjects/OpenJDK10/build/macosx-x86_64-normal-server-slowdebug</span><br><span class=\"line\">using configure arguments <span class=\"string\">'--with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --enable-ccache --with-num-cores=8 --with-memory-size=8000 --disable-warnings-as-errors'</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration summary:</span><br><span class=\"line\">* Debug level:    slowdebug</span><br><span class=\"line\">* HS debug level: debug</span><br><span class=\"line\">* JDK variant:    normal</span><br><span class=\"line\">* JVM variants:   server</span><br><span class=\"line\">* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64</span><br><span class=\"line\">* Version string: 10-internal+0-adhoc.hunterzhao.OpenJDK10 (10-internal)</span><br><span class=\"line\"></span><br><span class=\"line\">Tools summary:</span><br><span class=\"line\">* Boot JDK:       java version <span class=\"string\">\"1.8.0_151\"</span> Java(TM) SE Runtime Environment (build 1.8.0_151-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home)</span><br><span class=\"line\">* Toolchain:      clang (clang/LLVM from Xcode 8.3.3)</span><br><span class=\"line\">* C Compiler:     Version 8.1.0 (at /usr/bin/clang)</span><br><span class=\"line\">* C++ Compiler:   Version 8.1.0 (at /usr/bin/clang++)</span><br><span class=\"line\"></span><br><span class=\"line\">Build performance summary:</span><br><span class=\"line\">* Cores to use:   7</span><br><span class=\"line\">* Memory <span class=\"built_in\">limit</span>:   8000 MB</span><br><span class=\"line\">* ccache status:  Active (3.3.5)</span><br></pre></td></tr></table></figure>\n<h1 id=\"执行编译\"><a href=\"#执行编译\" class=\"headerlink\" title=\"执行编译\"></a>执行编译</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make images</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">Creating support/demos/image/jfc/CodePointIM/CodePointIM.jar</span><br><span class=\"line\">Creating support/demos/image/applets/MoleculeViewer/MoleculeViewer.jar</span><br><span class=\"line\">Creating support/demos/image/applets/WireFrame/WireFrame.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/SwingApplet/SwingApplet.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/FileChooserDemo/FileChooserDemo.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Font2DTest/Font2DTest.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Metalworks/Metalworks.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/Notepad/Notepad.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/SampleTree/SampleTree.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/TableExample/TableExample.jar</span><br><span class=\"line\">Creating support/demos/image/jfc/TransparentRuler/TransparentRuler.jar</span><br><span class=\"line\">Creating support/classlist.jar</span><br><span class=\"line\">Creating images/jmods/jdk.jlink.jmod</span><br><span class=\"line\">Creating images/jmods/java.base.jmod</span><br><span class=\"line\">Creating jre jimage</span><br><span class=\"line\">Creating jdk jimage</span><br><span class=\"line\">WARNING: Using incubator modules: jdk.incubator.httpclient</span><br><span class=\"line\">WARNING: Using incubator modules: jdk.incubator.httpclient</span><br><span class=\"line\">Stopping sjavac server</span><br><span class=\"line\">Finished building target &apos;images&apos; in configuration &apos;macosx-x86_64-normal-server-slowdebug&apos;</span><br></pre></td></tr></table></figure>\n<p>大约10分钟后编译完成，由于机器配置不同可能会导致编译时长有所差异。</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java -version</span><br><span class=\"line\">openjdk version <span class=\"string\">\"10-internal\"</span></span><br><span class=\"line\">OpenJDK Runtime Environment (slowdebug build 10-internal+0-adhoc.hunterzhao.OpenJDK10)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (slowdebug build 10-internal+0-adhoc.hunterzhao.OpenJDK10, mixed mode)</span><br></pre></td></tr></table></figure>\n<p>本篇文章至此结束，下篇介绍搭建OpenJDK10 DEBUG环境。</p>"},{"title":"【JVM源码探秘】在Mac上搭建OpenJDK10源码调试环境","date":"2018-01-29T17:08:18.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n前面文章已经介绍了如何[在Mac上编译OpenJDK10源码](/post/2018/01/29/compile-openjdk10-source-code-on-mac/)，拥有了自己的JDK版本，\n\n为了深入了解Java实例的创建、初始化和执行流程以及内部实现原理，DEBUG是必不可少的必杀技。\n\n所以，本篇文章继续介绍在Mac上搭建OpenJDK10源码调试环境，黑喂狗。\n\n<!-- more -->\n# 软件环境\n- OS: macOS Sierra 10.12\n- IDE: Clion 2018.1\n- Code: OpenJDK 10\n\n# 下载IDE\n从JetBrains官网下载[Clion](https://www.jetbrains.com/clion/)，安装。\n\n# 导入项目\n打开Clion依次选择`File` > `Import Project`\n\n![import-hotspot](/images/post/2018/01/30/import-hotspot-src.jpg)\n\n\n# 编辑配置\n如下图编辑DEBUG配置信息\n1. `Executable` 选择之前build出的镜像里的java可执行文件（i.e. build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java）\n2. `Program arguments` 填写-version，输出Java版本\n3. `Before launch` 注意：这里一定要移除Build，否则会报错无法调试\n\n\n![edit-configuration](/images/post/2018/01/30/edit-configuration.jpg)\n\n# 调试源码\n\n在`hotspot/share/runtime/thread.cpp`文件的`Threads::create_vm`方法内部打断点，\n\n点击DEBUG按钮，不出意外会发现进入如下界面，congrats！\n\n![openjdk](/images/post/2018/01/30/debug-openjdk10-with-clion-ide.jpg)\n\n接下来，泡杯咖啡，Step by step慢慢DEBUG吧，后面的文章将陆续介绍JVM创建及初始化流程。\n","source":"_posts/2018/01/30/debug-openjdk10-source-code-on-mac-with-clion-ide.md","raw":"---\ntitle: 【JVM源码探秘】在Mac上搭建OpenJDK10源码调试环境\ndate: 2018-01-30 01:08:18\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n前面文章已经介绍了如何[在Mac上编译OpenJDK10源码](/post/2018/01/29/compile-openjdk10-source-code-on-mac/)，拥有了自己的JDK版本，\n\n为了深入了解Java实例的创建、初始化和执行流程以及内部实现原理，DEBUG是必不可少的必杀技。\n\n所以，本篇文章继续介绍在Mac上搭建OpenJDK10源码调试环境，黑喂狗。\n\n<!-- more -->\n# 软件环境\n- OS: macOS Sierra 10.12\n- IDE: Clion 2018.1\n- Code: OpenJDK 10\n\n# 下载IDE\n从JetBrains官网下载[Clion](https://www.jetbrains.com/clion/)，安装。\n\n# 导入项目\n打开Clion依次选择`File` > `Import Project`\n\n![import-hotspot](/images/post/2018/01/30/import-hotspot-src.jpg)\n\n\n# 编辑配置\n如下图编辑DEBUG配置信息\n1. `Executable` 选择之前build出的镜像里的java可执行文件（i.e. build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java）\n2. `Program arguments` 填写-version，输出Java版本\n3. `Before launch` 注意：这里一定要移除Build，否则会报错无法调试\n\n\n![edit-configuration](/images/post/2018/01/30/edit-configuration.jpg)\n\n# 调试源码\n\n在`hotspot/share/runtime/thread.cpp`文件的`Threads::create_vm`方法内部打断点，\n\n点击DEBUG按钮，不出意外会发现进入如下界面，congrats！\n\n![openjdk](/images/post/2018/01/30/debug-openjdk10-with-clion-ide.jpg)\n\n接下来，泡杯咖啡，Step by step慢慢DEBUG吧，后面的文章将陆续介绍JVM创建及初始化流程。\n","slug":"debug-openjdk10-source-code-on-mac-with-clion-ide","published":1,"updated":"2018-05-09T15:36:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2c001e2zs6dlpbrbmk","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>前面文章已经介绍了如何<a href=\"/post/2018/01/29/compile-openjdk10-source-code-on-mac/\">在Mac上编译OpenJDK10源码</a>，拥有了自己的JDK版本，</p>\n<p>为了深入了解Java实例的创建、初始化和执行流程以及内部实现原理，DEBUG是必不可少的必杀技。</p>\n<p>所以，本篇文章继续介绍在Mac上搭建OpenJDK10源码调试环境，黑喂狗。</p>\n<a id=\"more\"></a>\n<h1 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h1><ul>\n<li>OS: macOS Sierra 10.12</li>\n<li>IDE: Clion 2018.1</li>\n<li>Code: OpenJDK 10</li>\n</ul>\n<h1 id=\"下载IDE\"><a href=\"#下载IDE\" class=\"headerlink\" title=\"下载IDE\"></a>下载IDE</h1><p>从JetBrains官网下载<a href=\"https://www.jetbrains.com/clion/\" target=\"_blank\" rel=\"noopener\">Clion</a>，安装。</p>\n<h1 id=\"导入项目\"><a href=\"#导入项目\" class=\"headerlink\" title=\"导入项目\"></a>导入项目</h1><p>打开Clion依次选择<code>File</code> &gt; <code>Import Project</code></p>\n<p><img src=\"/images/post/2018/01/30/import-hotspot-src.jpg\" alt=\"import-hotspot\"></p>\n<h1 id=\"编辑配置\"><a href=\"#编辑配置\" class=\"headerlink\" title=\"编辑配置\"></a>编辑配置</h1><p>如下图编辑DEBUG配置信息</p>\n<ol>\n<li><code>Executable</code> 选择之前build出的镜像里的java可执行文件（i.e. build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java）</li>\n<li><code>Program arguments</code> 填写-version，输出Java版本</li>\n<li><code>Before launch</code> 注意：这里一定要移除Build，否则会报错无法调试</li>\n</ol>\n<p><img src=\"/images/post/2018/01/30/edit-configuration.jpg\" alt=\"edit-configuration\"></p>\n<h1 id=\"调试源码\"><a href=\"#调试源码\" class=\"headerlink\" title=\"调试源码\"></a>调试源码</h1><p>在<code>hotspot/share/runtime/thread.cpp</code>文件的<code>Threads::create_vm</code>方法内部打断点，</p>\n<p>点击DEBUG按钮，不出意外会发现进入如下界面，congrats！</p>\n<p><img src=\"/images/post/2018/01/30/debug-openjdk10-with-clion-ide.jpg\" alt=\"openjdk\"></p>\n<p>接下来，泡杯咖啡，Step by step慢慢DEBUG吧，后面的文章将陆续介绍JVM创建及初始化流程。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>前面文章已经介绍了如何<a href=\"/post/2018/01/29/compile-openjdk10-source-code-on-mac/\">在Mac上编译OpenJDK10源码</a>，拥有了自己的JDK版本，</p>\n<p>为了深入了解Java实例的创建、初始化和执行流程以及内部实现原理，DEBUG是必不可少的必杀技。</p>\n<p>所以，本篇文章继续介绍在Mac上搭建OpenJDK10源码调试环境，黑喂狗。</p>","more":"<h1 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h1><ul>\n<li>OS: macOS Sierra 10.12</li>\n<li>IDE: Clion 2018.1</li>\n<li>Code: OpenJDK 10</li>\n</ul>\n<h1 id=\"下载IDE\"><a href=\"#下载IDE\" class=\"headerlink\" title=\"下载IDE\"></a>下载IDE</h1><p>从JetBrains官网下载<a href=\"https://www.jetbrains.com/clion/\" target=\"_blank\" rel=\"noopener\">Clion</a>，安装。</p>\n<h1 id=\"导入项目\"><a href=\"#导入项目\" class=\"headerlink\" title=\"导入项目\"></a>导入项目</h1><p>打开Clion依次选择<code>File</code> &gt; <code>Import Project</code></p>\n<p><img src=\"/images/post/2018/01/30/import-hotspot-src.jpg\" alt=\"import-hotspot\"></p>\n<h1 id=\"编辑配置\"><a href=\"#编辑配置\" class=\"headerlink\" title=\"编辑配置\"></a>编辑配置</h1><p>如下图编辑DEBUG配置信息</p>\n<ol>\n<li><code>Executable</code> 选择之前build出的镜像里的java可执行文件（i.e. build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java）</li>\n<li><code>Program arguments</code> 填写-version，输出Java版本</li>\n<li><code>Before launch</code> 注意：这里一定要移除Build，否则会报错无法调试</li>\n</ol>\n<p><img src=\"/images/post/2018/01/30/edit-configuration.jpg\" alt=\"edit-configuration\"></p>\n<h1 id=\"调试源码\"><a href=\"#调试源码\" class=\"headerlink\" title=\"调试源码\"></a>调试源码</h1><p>在<code>hotspot/share/runtime/thread.cpp</code>文件的<code>Threads::create_vm</code>方法内部打断点，</p>\n<p>点击DEBUG按钮，不出意外会发现进入如下界面，congrats！</p>\n<p><img src=\"/images/post/2018/01/30/debug-openjdk10-with-clion-ide.jpg\" alt=\"openjdk\"></p>\n<p>接下来，泡杯咖啡，Step by step慢慢DEBUG吧，后面的文章将陆续介绍JVM创建及初始化流程。</p>"},{"title":"【JVM源码探秘】Java中的Class文件结构","date":"2018-02-12T09:10:35.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n我们都知道JVM并不能直接运行Java源文件，而是程序猿通过JDK提供的`javac`命令将Java源文件编译成`.class`二进制文件，\n然后供JVM加载并使用，也就是说class文件其实是程序猿和JVM之间交互的媒介，相当于介于用户和Linux内核之间的shell。\n\n一个class文件完整地描述了Java源文件的各种信息，Oracle JVM规范中的[4.1 The ClassFile Structure](https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1) 详细定义了一个标准class文件的结构\n\n<!-- more -->\n\n```\nClassFile {\n       u4             magic;\n       u2             minor_version;\n       u2             major_version;\n       u2             constant_pool_count;\n       cp_info        constant_pool[constant_pool_count-1];\n       u2             access_flags;\n       u2             this_class;\n       u2             super_class;\n       u2             interfaces_count;\n       u2             interfaces[interfaces_count];\n       u2             fields_count;\n       field_info     fields[fields_count];\n       u2             methods_count;\n       method_info    methods[methods_count];\n       u2             attributes_count;\n       attribute_info attributes[attributes_count];\n}\n```\n\n\n# magic\nclass文件的魔数值，用于鉴定是否为一个合法class文件，值为`0xCAFEBABE`\n\n# minor_version & major_version\nclass文件的主次版本号，随着JDK版本release递增，JVM运行时向下兼容，也就是说在JDK10上编译出的class文件在JRE7上无法运行，否则会抛出`java.lang.UnsupportedClassVersionError`\nminor_version和major_version项目的值是该类文件的次版本号和主版本号。 主版本号和次版本号一起决定了类文件格式的版本。 \n如果一个类文件的主版本号为M，次版本号为m，那么我们将它的类文件格式的版本表示为M.m. 因此，类文件格式版本可以按照字典顺序排列，例如，1.5 <2.0 <2.1。\nJava虚拟机实现可以支持版本v的类文件格式，当且仅当v处于某个连续范围Mi.0≤v≤Mj.m. 范围基于实现符合的Java SE平台的版本。 \n符合给定Java SE平台版本的实现必须支持表4.1-A中为该版本指定的范围，并且不支持其他范围。 （对于历史案例，显示的是JDK版本而不是Java SE平台版本。）\n\n|Java SE版本| class文件格式版本号范围   |\n|-------|------------------------|\n|1.0.2\t| 45.0 ≤ v ≤ 45.3|\n|1.1\t| 45.0 ≤ v ≤ 45.65535|\n|1.2\t| 45.0 ≤ v ≤ 46.0|\n|1.3\t| 45.0 ≤ v ≤ 47.0|\n|1.4\t| 45.0 ≤ v ≤ 48.0|\n|5.0\t| 45.0 ≤ v ≤ 49.0|\n|6\t    | 45.0 ≤ v ≤ 50.0|\n|7\t    | 45.0 ≤ v ≤ 51.0|\n|8\t    | 45.0 ≤ v ≤ 52.0|\n|9\t    | 45.0 ≤ v ≤ 53.0|\n|10\t    | 45.0 ≤ v ≤ 54.0|\n\n\n# constant_pool_count\n常量池元素条目数量，constant_pool_count项的值等于constant_pool表中的条目数加1。\n\n# constant_pool[constant_pool_count-1]\nconstant_pool是一个结构表，它表示在ClassFile结构及其子结构中引用的各种字符串常量，类和接口名称，字段名称以及其他常量。 \n每个constant_pool表项的格式由其第一个“标记”字节指示。constant_pool表的索引从1到constant_pool_count - 1。\n\n# access_flags\naccess_flags项的值是用于表示对此类或接口的访问权限和属性的标志掩码。\n\n|Flag             |值\t    |说明\n|-----------------|---------|----------------------------\n|ACC_PUBLIC       |0x0001\t|Declared public; may be accessed from outside its package.\n|ACC_FINAL        |0x0010\t|Declared final; no subclasses allowed.\n|ACC_SUPER        |0x0020\t|Treat superclass methods specially when invoked by the invokespecial instruction.\n|ACC_INTERFACE    |0x0200\t|Is an interface, not a class.\n|ACC_ABSTRACT     |0x0400\t|Declared abstract; must not be instantiated.\n|ACC_SYNTHETIC    |0x1000\t|Declared synthetic; not present in the source code.\n|ACC_ANNOTATION   |0x2000\t|Declared as an annotation type.\n|ACC_ENUM         |0x4000\t|Declared as an enum type.\n|ACC_MODULE       |0x8000\t|Is a module, not a class or interface.\n\nACC_MODULE标志表明这个类文件定义了一个模块，而不是类或接口。如果设置了ACC_MODULE标志，则特殊规则适用于本节末尾给出的类文件。\n如果未设置ACC_MODULE标志，则当前段落下方的规则将应用于类文件。一个接口通过设置ACC_INTERFACE标志来区分。\n如果未设置ACC_INTERFACE标志，则此类文件定义一个类，而不是接口或模块。\n如果设置了ACC_INTERFACE标志，则还必须设置ACC_ABSTRACT标志，并且不得设置ACC_FINAL，ACC_SUPER，ACC_ENUM和ACC_MODULE标志集。\n如果ACC_INTERFACE标志没有置位，除了ACC_ANNOTATION和ACC_MODULE之外，可以设置表4.1-B中的其他任何标志。但是，这样的类文件不能同时设置\n其ACC_FINAL和ACC_ABSTRACT标志（JLS§8.1.1.2）。\nACC_SUPER标志指示如果它出现在这个类或接口中，则由invokespecial指令（§invokespecial）表示两个可选语义中的哪一个。 \nJava虚拟机指令集的编译器应该设置ACC_SUPER标志。在Java SE 8及更高版本中，Java虚拟机认为ACC_SUPER标志将在每个类文件中设置，\n而不管类文件中标志的实际值和类文件的版本如何。\n\nACC_SUPER标志的存在是为了与用于Java编程语言的早期编译器编译的代码向后兼容。 在1.0.2之前的JDK版本中，编译器生成了access_flags，\n其中现在表示ACC_SUPER的标志没有指定的含义，并且Oracle的Java虚拟机实现忽略该标志（如果已设置）。ACC_SYNTHETIC标志表示该类或接口\n是由编译器生成的，并未出现在源代码中。\n注释类型（JLS§9.6）必须设置其ACC_ANNOTATION标志。 如果设置了ACC_ANNOTATION标志，则还必须设置ACC_INTERFACE标志。\nACC_ENUM标志表明该类或其超类被声明为枚举类型（JLS§8.9）。\n未在表4.1-B中分配的access_flags项目的所有位保留供将来使用。 它们应该在生成的类文件中设置为零，并且应该被Java虚拟机实现忽略。\n\n# this_class\nthis_class项的值必须是constant_pool表中的有效索引。 该索引处的constant_pool条目必须是表示由此类文件定义的类或接口的CONSTANT_Class_info结构。\n\n\n# super_class\n对于类来说，super_class项的值必须为零，或者必须是常量池表中的有效索引。 如果super_class项的值不为零，则该索引处的constant_pool条目\n必须是表示由此类文件定义的类的直接超类的CONSTANT_Class_info结构。 直接超类或其任何超类都不能在其ClassFile结构的access_flags项中\n设置ACC_FINAL标志。如果super_class项的值为零，那么这个类文件必须表示类Object，唯一没有直接超类的类或接口。\n对于接口来说，super_class项的值必须始终是constant_pool表中的有效索引。 该索引处的constant_pool条目必须是表示类Object的\nCONSTANT_Class_info结构。\n\n\n# interfaces_count\ninterfaces_count项的值给出了此类或接口类型的直接超接口的数量。\n\n# interfaces[interfaces_count]\ninterfaces数组中的每个值都必须是constant_pool表中的有效索引。 在接口[i]的每个值处的constant_pool条目（其中0≤i<interfaces_count）\n必须是CONSTANT_Class_info结构，该结构表示作为该类或接口类型的直接超级接口的接口，按照从左到右的顺序 类型的来源。\n\n# fields_count\nfields_count项的值给出了field表中field_info结构的数量。 field_info结构表示由此类或接口类型声明的所有字段，包括类变量和实例变量。\n\n# fields[fields_count]\n字段表中的每个值都必须是一个field_info结构，以便对此类或接口中的字段进行完整描述。 字段表仅包含由此类或接口声明的那些字段。 \n它不包含表示从超类或超接口继承的字段的项。\n\n# methods_count\nmethods_count项的值给出了method_info的编号\n结构在方法表中。\n\n# methods[methods_count]\n方法表中的每个值都必须是一个method_info结构（第4.6节），以提供此类或接口中方法的完整描述。 如果在method_info结构的access_flags项中\n没有设置ACC_NATIVE和ACC_ABSTRACT标志，则也会提供实现该方法的Java虚拟机指令。\nmethod_info结构表示由此类或接口类型声明的所有方法，包括实例方法，类方法，实例初始化方法）以及任何类或接口初始化方法。 \n方法表不包含表示从超类或超接口继承的方法的项。\n\n# attributes_count\nattributes_count项的值给出了此类的属性表中的属性数量。\n\n# attributes[attributes_count]\n\n属性表的每个值必须是一个attribute_info结构\n\n> 如果在access_flags项中设置了ACC_MODULE标志，则可以设置access_flags项中的其他标志，并且以下规则适用于ClassFile结构的其余部分：\n  •major_version，minor_version：≥53.0（即Java SE 9及以上）\n  •this_class：模块信息\n  •super_class，interfaces_count，fields_count，methods_count：零\n  •属性：必须存在一个模块属性。 除了Module，ModulePackages，ModuleMainClass，InnerClasses，SourceFile，SourceDebugExtension，\n  RuntimeVisibleAnnotations和RuntimeInvisibleAnnotations之外，可能不会出现任何预定义的属性（§4.7）。\n\n\n","source":"_posts/2018/02/12/analysis-of-hotspot-jvm-java-class-file-structure.md","raw":"---\ntitle: 【JVM源码探秘】Java中的Class文件结构\ndate: 2018-02-12 17:10:35\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n我们都知道JVM并不能直接运行Java源文件，而是程序猿通过JDK提供的`javac`命令将Java源文件编译成`.class`二进制文件，\n然后供JVM加载并使用，也就是说class文件其实是程序猿和JVM之间交互的媒介，相当于介于用户和Linux内核之间的shell。\n\n一个class文件完整地描述了Java源文件的各种信息，Oracle JVM规范中的[4.1 The ClassFile Structure](https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1) 详细定义了一个标准class文件的结构\n\n<!-- more -->\n\n```\nClassFile {\n       u4             magic;\n       u2             minor_version;\n       u2             major_version;\n       u2             constant_pool_count;\n       cp_info        constant_pool[constant_pool_count-1];\n       u2             access_flags;\n       u2             this_class;\n       u2             super_class;\n       u2             interfaces_count;\n       u2             interfaces[interfaces_count];\n       u2             fields_count;\n       field_info     fields[fields_count];\n       u2             methods_count;\n       method_info    methods[methods_count];\n       u2             attributes_count;\n       attribute_info attributes[attributes_count];\n}\n```\n\n\n# magic\nclass文件的魔数值，用于鉴定是否为一个合法class文件，值为`0xCAFEBABE`\n\n# minor_version & major_version\nclass文件的主次版本号，随着JDK版本release递增，JVM运行时向下兼容，也就是说在JDK10上编译出的class文件在JRE7上无法运行，否则会抛出`java.lang.UnsupportedClassVersionError`\nminor_version和major_version项目的值是该类文件的次版本号和主版本号。 主版本号和次版本号一起决定了类文件格式的版本。 \n如果一个类文件的主版本号为M，次版本号为m，那么我们将它的类文件格式的版本表示为M.m. 因此，类文件格式版本可以按照字典顺序排列，例如，1.5 <2.0 <2.1。\nJava虚拟机实现可以支持版本v的类文件格式，当且仅当v处于某个连续范围Mi.0≤v≤Mj.m. 范围基于实现符合的Java SE平台的版本。 \n符合给定Java SE平台版本的实现必须支持表4.1-A中为该版本指定的范围，并且不支持其他范围。 （对于历史案例，显示的是JDK版本而不是Java SE平台版本。）\n\n|Java SE版本| class文件格式版本号范围   |\n|-------|------------------------|\n|1.0.2\t| 45.0 ≤ v ≤ 45.3|\n|1.1\t| 45.0 ≤ v ≤ 45.65535|\n|1.2\t| 45.0 ≤ v ≤ 46.0|\n|1.3\t| 45.0 ≤ v ≤ 47.0|\n|1.4\t| 45.0 ≤ v ≤ 48.0|\n|5.0\t| 45.0 ≤ v ≤ 49.0|\n|6\t    | 45.0 ≤ v ≤ 50.0|\n|7\t    | 45.0 ≤ v ≤ 51.0|\n|8\t    | 45.0 ≤ v ≤ 52.0|\n|9\t    | 45.0 ≤ v ≤ 53.0|\n|10\t    | 45.0 ≤ v ≤ 54.0|\n\n\n# constant_pool_count\n常量池元素条目数量，constant_pool_count项的值等于constant_pool表中的条目数加1。\n\n# constant_pool[constant_pool_count-1]\nconstant_pool是一个结构表，它表示在ClassFile结构及其子结构中引用的各种字符串常量，类和接口名称，字段名称以及其他常量。 \n每个constant_pool表项的格式由其第一个“标记”字节指示。constant_pool表的索引从1到constant_pool_count - 1。\n\n# access_flags\naccess_flags项的值是用于表示对此类或接口的访问权限和属性的标志掩码。\n\n|Flag             |值\t    |说明\n|-----------------|---------|----------------------------\n|ACC_PUBLIC       |0x0001\t|Declared public; may be accessed from outside its package.\n|ACC_FINAL        |0x0010\t|Declared final; no subclasses allowed.\n|ACC_SUPER        |0x0020\t|Treat superclass methods specially when invoked by the invokespecial instruction.\n|ACC_INTERFACE    |0x0200\t|Is an interface, not a class.\n|ACC_ABSTRACT     |0x0400\t|Declared abstract; must not be instantiated.\n|ACC_SYNTHETIC    |0x1000\t|Declared synthetic; not present in the source code.\n|ACC_ANNOTATION   |0x2000\t|Declared as an annotation type.\n|ACC_ENUM         |0x4000\t|Declared as an enum type.\n|ACC_MODULE       |0x8000\t|Is a module, not a class or interface.\n\nACC_MODULE标志表明这个类文件定义了一个模块，而不是类或接口。如果设置了ACC_MODULE标志，则特殊规则适用于本节末尾给出的类文件。\n如果未设置ACC_MODULE标志，则当前段落下方的规则将应用于类文件。一个接口通过设置ACC_INTERFACE标志来区分。\n如果未设置ACC_INTERFACE标志，则此类文件定义一个类，而不是接口或模块。\n如果设置了ACC_INTERFACE标志，则还必须设置ACC_ABSTRACT标志，并且不得设置ACC_FINAL，ACC_SUPER，ACC_ENUM和ACC_MODULE标志集。\n如果ACC_INTERFACE标志没有置位，除了ACC_ANNOTATION和ACC_MODULE之外，可以设置表4.1-B中的其他任何标志。但是，这样的类文件不能同时设置\n其ACC_FINAL和ACC_ABSTRACT标志（JLS§8.1.1.2）。\nACC_SUPER标志指示如果它出现在这个类或接口中，则由invokespecial指令（§invokespecial）表示两个可选语义中的哪一个。 \nJava虚拟机指令集的编译器应该设置ACC_SUPER标志。在Java SE 8及更高版本中，Java虚拟机认为ACC_SUPER标志将在每个类文件中设置，\n而不管类文件中标志的实际值和类文件的版本如何。\n\nACC_SUPER标志的存在是为了与用于Java编程语言的早期编译器编译的代码向后兼容。 在1.0.2之前的JDK版本中，编译器生成了access_flags，\n其中现在表示ACC_SUPER的标志没有指定的含义，并且Oracle的Java虚拟机实现忽略该标志（如果已设置）。ACC_SYNTHETIC标志表示该类或接口\n是由编译器生成的，并未出现在源代码中。\n注释类型（JLS§9.6）必须设置其ACC_ANNOTATION标志。 如果设置了ACC_ANNOTATION标志，则还必须设置ACC_INTERFACE标志。\nACC_ENUM标志表明该类或其超类被声明为枚举类型（JLS§8.9）。\n未在表4.1-B中分配的access_flags项目的所有位保留供将来使用。 它们应该在生成的类文件中设置为零，并且应该被Java虚拟机实现忽略。\n\n# this_class\nthis_class项的值必须是constant_pool表中的有效索引。 该索引处的constant_pool条目必须是表示由此类文件定义的类或接口的CONSTANT_Class_info结构。\n\n\n# super_class\n对于类来说，super_class项的值必须为零，或者必须是常量池表中的有效索引。 如果super_class项的值不为零，则该索引处的constant_pool条目\n必须是表示由此类文件定义的类的直接超类的CONSTANT_Class_info结构。 直接超类或其任何超类都不能在其ClassFile结构的access_flags项中\n设置ACC_FINAL标志。如果super_class项的值为零，那么这个类文件必须表示类Object，唯一没有直接超类的类或接口。\n对于接口来说，super_class项的值必须始终是constant_pool表中的有效索引。 该索引处的constant_pool条目必须是表示类Object的\nCONSTANT_Class_info结构。\n\n\n# interfaces_count\ninterfaces_count项的值给出了此类或接口类型的直接超接口的数量。\n\n# interfaces[interfaces_count]\ninterfaces数组中的每个值都必须是constant_pool表中的有效索引。 在接口[i]的每个值处的constant_pool条目（其中0≤i<interfaces_count）\n必须是CONSTANT_Class_info结构，该结构表示作为该类或接口类型的直接超级接口的接口，按照从左到右的顺序 类型的来源。\n\n# fields_count\nfields_count项的值给出了field表中field_info结构的数量。 field_info结构表示由此类或接口类型声明的所有字段，包括类变量和实例变量。\n\n# fields[fields_count]\n字段表中的每个值都必须是一个field_info结构，以便对此类或接口中的字段进行完整描述。 字段表仅包含由此类或接口声明的那些字段。 \n它不包含表示从超类或超接口继承的字段的项。\n\n# methods_count\nmethods_count项的值给出了method_info的编号\n结构在方法表中。\n\n# methods[methods_count]\n方法表中的每个值都必须是一个method_info结构（第4.6节），以提供此类或接口中方法的完整描述。 如果在method_info结构的access_flags项中\n没有设置ACC_NATIVE和ACC_ABSTRACT标志，则也会提供实现该方法的Java虚拟机指令。\nmethod_info结构表示由此类或接口类型声明的所有方法，包括实例方法，类方法，实例初始化方法）以及任何类或接口初始化方法。 \n方法表不包含表示从超类或超接口继承的方法的项。\n\n# attributes_count\nattributes_count项的值给出了此类的属性表中的属性数量。\n\n# attributes[attributes_count]\n\n属性表的每个值必须是一个attribute_info结构\n\n> 如果在access_flags项中设置了ACC_MODULE标志，则可以设置access_flags项中的其他标志，并且以下规则适用于ClassFile结构的其余部分：\n  •major_version，minor_version：≥53.0（即Java SE 9及以上）\n  •this_class：模块信息\n  •super_class，interfaces_count，fields_count，methods_count：零\n  •属性：必须存在一个模块属性。 除了Module，ModulePackages，ModuleMainClass，InnerClasses，SourceFile，SourceDebugExtension，\n  RuntimeVisibleAnnotations和RuntimeInvisibleAnnotations之外，可能不会出现任何预定义的属性（§4.7）。\n\n\n","slug":"analysis-of-hotspot-jvm-java-class-file-structure","published":1,"updated":"2018-05-20T16:46:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2e001g2zs61y4oq122","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>我们都知道JVM并不能直接运行Java源文件，而是程序猿通过JDK提供的<code>javac</code>命令将Java源文件编译成<code>.class</code>二进制文件，<br>然后供JVM加载并使用，也就是说class文件其实是程序猿和JVM之间交互的媒介，相当于介于用户和Linux内核之间的shell。</p>\n<p>一个class文件完整地描述了Java源文件的各种信息，Oracle JVM规范中的<a href=\"https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1\" target=\"_blank\" rel=\"noopener\">4.1 The ClassFile Structure</a> 详细定义了一个标准class文件的结构</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">       u4             magic;</span><br><span class=\"line\">       u2             minor_version;</span><br><span class=\"line\">       u2             major_version;</span><br><span class=\"line\">       u2             constant_pool_count;</span><br><span class=\"line\">       cp_info        constant_pool[constant_pool_count-1];</span><br><span class=\"line\">       u2             access_flags;</span><br><span class=\"line\">       u2             this_class;</span><br><span class=\"line\">       u2             super_class;</span><br><span class=\"line\">       u2             interfaces_count;</span><br><span class=\"line\">       u2             interfaces[interfaces_count];</span><br><span class=\"line\">       u2             fields_count;</span><br><span class=\"line\">       field_info     fields[fields_count];</span><br><span class=\"line\">       u2             methods_count;</span><br><span class=\"line\">       method_info    methods[methods_count];</span><br><span class=\"line\">       u2             attributes_count;</span><br><span class=\"line\">       attribute_info attributes[attributes_count];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"magic\"><a href=\"#magic\" class=\"headerlink\" title=\"magic\"></a>magic</h1><p>class文件的魔数值，用于鉴定是否为一个合法class文件，值为<code>0xCAFEBABE</code></p>\n<h1 id=\"minor-version-amp-major-version\"><a href=\"#minor-version-amp-major-version\" class=\"headerlink\" title=\"minor_version &amp; major_version\"></a>minor_version &amp; major_version</h1><p>class文件的主次版本号，随着JDK版本release递增，JVM运行时向下兼容，也就是说在JDK10上编译出的class文件在JRE7上无法运行，否则会抛出<code>java.lang.UnsupportedClassVersionError</code><br>minor_version和major_version项目的值是该类文件的次版本号和主版本号。 主版本号和次版本号一起决定了类文件格式的版本。<br>如果一个类文件的主版本号为M，次版本号为m，那么我们将它的类文件格式的版本表示为M.m. 因此，类文件格式版本可以按照字典顺序排列，例如，1.5 &lt;2.0 &lt;2.1。<br>Java虚拟机实现可以支持版本v的类文件格式，当且仅当v处于某个连续范围Mi.0≤v≤Mj.m. 范围基于实现符合的Java SE平台的版本。<br>符合给定Java SE平台版本的实现必须支持表4.1-A中为该版本指定的范围，并且不支持其他范围。 （对于历史案例，显示的是JDK版本而不是Java SE平台版本。）</p>\n<table>\n<thead>\n<tr>\n<th>Java SE版本</th>\n<th>class文件格式版本号范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.0.2</td>\n<td>45.0 ≤ v ≤ 45.3</td>\n</tr>\n<tr>\n<td>1.1</td>\n<td>45.0 ≤ v ≤ 45.65535</td>\n</tr>\n<tr>\n<td>1.2</td>\n<td>45.0 ≤ v ≤ 46.0</td>\n</tr>\n<tr>\n<td>1.3</td>\n<td>45.0 ≤ v ≤ 47.0</td>\n</tr>\n<tr>\n<td>1.4</td>\n<td>45.0 ≤ v ≤ 48.0</td>\n</tr>\n<tr>\n<td>5.0</td>\n<td>45.0 ≤ v ≤ 49.0</td>\n</tr>\n<tr>\n<td>6</td>\n<td>45.0 ≤ v ≤ 50.0</td>\n</tr>\n<tr>\n<td>7</td>\n<td>45.0 ≤ v ≤ 51.0</td>\n</tr>\n<tr>\n<td>8</td>\n<td>45.0 ≤ v ≤ 52.0</td>\n</tr>\n<tr>\n<td>9</td>\n<td>45.0 ≤ v ≤ 53.0</td>\n</tr>\n<tr>\n<td>10</td>\n<td>45.0 ≤ v ≤ 54.0</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"constant-pool-count\"><a href=\"#constant-pool-count\" class=\"headerlink\" title=\"constant_pool_count\"></a>constant_pool_count</h1><p>常量池元素条目数量，constant_pool_count项的值等于constant_pool表中的条目数加1。</p>\n<h1 id=\"constant-pool-constant-pool-count-1\"><a href=\"#constant-pool-constant-pool-count-1\" class=\"headerlink\" title=\"constant_pool[constant_pool_count-1]\"></a>constant_pool[constant_pool_count-1]</h1><p>constant_pool是一个结构表，它表示在ClassFile结构及其子结构中引用的各种字符串常量，类和接口名称，字段名称以及其他常量。<br>每个constant_pool表项的格式由其第一个“标记”字节指示。constant_pool表的索引从1到constant_pool_count - 1。</p>\n<h1 id=\"access-flags\"><a href=\"#access-flags\" class=\"headerlink\" title=\"access_flags\"></a>access_flags</h1><p>access_flags项的值是用于表示对此类或接口的访问权限和属性的标志掩码。</p>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ACC_PUBLIC</td>\n<td>0x0001</td>\n<td>Declared public; may be accessed from outside its package.</td>\n</tr>\n<tr>\n<td>ACC_FINAL</td>\n<td>0x0010</td>\n<td>Declared final; no subclasses allowed.</td>\n</tr>\n<tr>\n<td>ACC_SUPER</td>\n<td>0x0020</td>\n<td>Treat superclass methods specially when invoked by the invokespecial instruction.</td>\n</tr>\n<tr>\n<td>ACC_INTERFACE</td>\n<td>0x0200</td>\n<td>Is an interface, not a class.</td>\n</tr>\n<tr>\n<td>ACC_ABSTRACT</td>\n<td>0x0400</td>\n<td>Declared abstract; must not be instantiated.</td>\n</tr>\n<tr>\n<td>ACC_SYNTHETIC</td>\n<td>0x1000</td>\n<td>Declared synthetic; not present in the source code.</td>\n</tr>\n<tr>\n<td>ACC_ANNOTATION</td>\n<td>0x2000</td>\n<td>Declared as an annotation type.</td>\n</tr>\n<tr>\n<td>ACC_ENUM</td>\n<td>0x4000</td>\n<td>Declared as an enum type.</td>\n</tr>\n<tr>\n<td>ACC_MODULE</td>\n<td>0x8000</td>\n<td>Is a module, not a class or interface.</td>\n</tr>\n</tbody>\n</table>\n<p>ACC_MODULE标志表明这个类文件定义了一个模块，而不是类或接口。如果设置了ACC_MODULE标志，则特殊规则适用于本节末尾给出的类文件。<br>如果未设置ACC_MODULE标志，则当前段落下方的规则将应用于类文件。一个接口通过设置ACC_INTERFACE标志来区分。<br>如果未设置ACC_INTERFACE标志，则此类文件定义一个类，而不是接口或模块。<br>如果设置了ACC_INTERFACE标志，则还必须设置ACC_ABSTRACT标志，并且不得设置ACC_FINAL，ACC_SUPER，ACC_ENUM和ACC_MODULE标志集。<br>如果ACC_INTERFACE标志没有置位，除了ACC_ANNOTATION和ACC_MODULE之外，可以设置表4.1-B中的其他任何标志。但是，这样的类文件不能同时设置<br>其ACC_FINAL和ACC_ABSTRACT标志（JLS§8.1.1.2）。<br>ACC_SUPER标志指示如果它出现在这个类或接口中，则由invokespecial指令（§invokespecial）表示两个可选语义中的哪一个。<br>Java虚拟机指令集的编译器应该设置ACC_SUPER标志。在Java SE 8及更高版本中，Java虚拟机认为ACC_SUPER标志将在每个类文件中设置，<br>而不管类文件中标志的实际值和类文件的版本如何。</p>\n<p>ACC_SUPER标志的存在是为了与用于Java编程语言的早期编译器编译的代码向后兼容。 在1.0.2之前的JDK版本中，编译器生成了access_flags，<br>其中现在表示ACC_SUPER的标志没有指定的含义，并且Oracle的Java虚拟机实现忽略该标志（如果已设置）。ACC_SYNTHETIC标志表示该类或接口<br>是由编译器生成的，并未出现在源代码中。<br>注释类型（JLS§9.6）必须设置其ACC_ANNOTATION标志。 如果设置了ACC_ANNOTATION标志，则还必须设置ACC_INTERFACE标志。<br>ACC_ENUM标志表明该类或其超类被声明为枚举类型（JLS§8.9）。<br>未在表4.1-B中分配的access_flags项目的所有位保留供将来使用。 它们应该在生成的类文件中设置为零，并且应该被Java虚拟机实现忽略。</p>\n<h1 id=\"this-class\"><a href=\"#this-class\" class=\"headerlink\" title=\"this_class\"></a>this_class</h1><p>this_class项的值必须是constant_pool表中的有效索引。 该索引处的constant_pool条目必须是表示由此类文件定义的类或接口的CONSTANT_Class_info结构。</p>\n<h1 id=\"super-class\"><a href=\"#super-class\" class=\"headerlink\" title=\"super_class\"></a>super_class</h1><p>对于类来说，super_class项的值必须为零，或者必须是常量池表中的有效索引。 如果super_class项的值不为零，则该索引处的constant_pool条目<br>必须是表示由此类文件定义的类的直接超类的CONSTANT_Class_info结构。 直接超类或其任何超类都不能在其ClassFile结构的access_flags项中<br>设置ACC_FINAL标志。如果super_class项的值为零，那么这个类文件必须表示类Object，唯一没有直接超类的类或接口。<br>对于接口来说，super_class项的值必须始终是constant_pool表中的有效索引。 该索引处的constant_pool条目必须是表示类Object的<br>CONSTANT_Class_info结构。</p>\n<h1 id=\"interfaces-count\"><a href=\"#interfaces-count\" class=\"headerlink\" title=\"interfaces_count\"></a>interfaces_count</h1><p>interfaces_count项的值给出了此类或接口类型的直接超接口的数量。</p>\n<h1 id=\"interfaces-interfaces-count\"><a href=\"#interfaces-interfaces-count\" class=\"headerlink\" title=\"interfaces[interfaces_count]\"></a>interfaces[interfaces_count]</h1><p>interfaces数组中的每个值都必须是constant_pool表中的有效索引。 在接口[i]的每个值处的constant_pool条目（其中0≤i&lt;interfaces_count）<br>必须是CONSTANT_Class_info结构，该结构表示作为该类或接口类型的直接超级接口的接口，按照从左到右的顺序 类型的来源。</p>\n<h1 id=\"fields-count\"><a href=\"#fields-count\" class=\"headerlink\" title=\"fields_count\"></a>fields_count</h1><p>fields_count项的值给出了field表中field_info结构的数量。 field_info结构表示由此类或接口类型声明的所有字段，包括类变量和实例变量。</p>\n<h1 id=\"fields-fields-count\"><a href=\"#fields-fields-count\" class=\"headerlink\" title=\"fields[fields_count]\"></a>fields[fields_count]</h1><p>字段表中的每个值都必须是一个field_info结构，以便对此类或接口中的字段进行完整描述。 字段表仅包含由此类或接口声明的那些字段。<br>它不包含表示从超类或超接口继承的字段的项。</p>\n<h1 id=\"methods-count\"><a href=\"#methods-count\" class=\"headerlink\" title=\"methods_count\"></a>methods_count</h1><p>methods_count项的值给出了method_info的编号<br>结构在方法表中。</p>\n<h1 id=\"methods-methods-count\"><a href=\"#methods-methods-count\" class=\"headerlink\" title=\"methods[methods_count]\"></a>methods[methods_count]</h1><p>方法表中的每个值都必须是一个method_info结构（第4.6节），以提供此类或接口中方法的完整描述。 如果在method_info结构的access_flags项中<br>没有设置ACC_NATIVE和ACC_ABSTRACT标志，则也会提供实现该方法的Java虚拟机指令。<br>method_info结构表示由此类或接口类型声明的所有方法，包括实例方法，类方法，实例初始化方法）以及任何类或接口初始化方法。<br>方法表不包含表示从超类或超接口继承的方法的项。</p>\n<h1 id=\"attributes-count\"><a href=\"#attributes-count\" class=\"headerlink\" title=\"attributes_count\"></a>attributes_count</h1><p>attributes_count项的值给出了此类的属性表中的属性数量。</p>\n<h1 id=\"attributes-attributes-count\"><a href=\"#attributes-attributes-count\" class=\"headerlink\" title=\"attributes[attributes_count]\"></a>attributes[attributes_count]</h1><p>属性表的每个值必须是一个attribute_info结构</p>\n<blockquote>\n<p>如果在access_flags项中设置了ACC_MODULE标志，则可以设置access_flags项中的其他标志，并且以下规则适用于ClassFile结构的其余部分：<br>  •major_version，minor_version：≥53.0（即Java SE 9及以上）<br>  •this_class：模块信息<br>  •super_class，interfaces_count，fields_count，methods_count：零<br>  •属性：必须存在一个模块属性。 除了Module，ModulePackages，ModuleMainClass，InnerClasses，SourceFile，SourceDebugExtension，<br>  RuntimeVisibleAnnotations和RuntimeInvisibleAnnotations之外，可能不会出现任何预定义的属性（§4.7）。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>我们都知道JVM并不能直接运行Java源文件，而是程序猿通过JDK提供的<code>javac</code>命令将Java源文件编译成<code>.class</code>二进制文件，<br>然后供JVM加载并使用，也就是说class文件其实是程序猿和JVM之间交互的媒介，相当于介于用户和Linux内核之间的shell。</p>\n<p>一个class文件完整地描述了Java源文件的各种信息，Oracle JVM规范中的<a href=\"https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1\" target=\"_blank\" rel=\"noopener\">4.1 The ClassFile Structure</a> 详细定义了一个标准class文件的结构</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassFile &#123;</span><br><span class=\"line\">       u4             magic;</span><br><span class=\"line\">       u2             minor_version;</span><br><span class=\"line\">       u2             major_version;</span><br><span class=\"line\">       u2             constant_pool_count;</span><br><span class=\"line\">       cp_info        constant_pool[constant_pool_count-1];</span><br><span class=\"line\">       u2             access_flags;</span><br><span class=\"line\">       u2             this_class;</span><br><span class=\"line\">       u2             super_class;</span><br><span class=\"line\">       u2             interfaces_count;</span><br><span class=\"line\">       u2             interfaces[interfaces_count];</span><br><span class=\"line\">       u2             fields_count;</span><br><span class=\"line\">       field_info     fields[fields_count];</span><br><span class=\"line\">       u2             methods_count;</span><br><span class=\"line\">       method_info    methods[methods_count];</span><br><span class=\"line\">       u2             attributes_count;</span><br><span class=\"line\">       attribute_info attributes[attributes_count];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"magic\"><a href=\"#magic\" class=\"headerlink\" title=\"magic\"></a>magic</h1><p>class文件的魔数值，用于鉴定是否为一个合法class文件，值为<code>0xCAFEBABE</code></p>\n<h1 id=\"minor-version-amp-major-version\"><a href=\"#minor-version-amp-major-version\" class=\"headerlink\" title=\"minor_version &amp; major_version\"></a>minor_version &amp; major_version</h1><p>class文件的主次版本号，随着JDK版本release递增，JVM运行时向下兼容，也就是说在JDK10上编译出的class文件在JRE7上无法运行，否则会抛出<code>java.lang.UnsupportedClassVersionError</code><br>minor_version和major_version项目的值是该类文件的次版本号和主版本号。 主版本号和次版本号一起决定了类文件格式的版本。<br>如果一个类文件的主版本号为M，次版本号为m，那么我们将它的类文件格式的版本表示为M.m. 因此，类文件格式版本可以按照字典顺序排列，例如，1.5 &lt;2.0 &lt;2.1。<br>Java虚拟机实现可以支持版本v的类文件格式，当且仅当v处于某个连续范围Mi.0≤v≤Mj.m. 范围基于实现符合的Java SE平台的版本。<br>符合给定Java SE平台版本的实现必须支持表4.1-A中为该版本指定的范围，并且不支持其他范围。 （对于历史案例，显示的是JDK版本而不是Java SE平台版本。）</p>\n<table>\n<thead>\n<tr>\n<th>Java SE版本</th>\n<th>class文件格式版本号范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.0.2</td>\n<td>45.0 ≤ v ≤ 45.3</td>\n</tr>\n<tr>\n<td>1.1</td>\n<td>45.0 ≤ v ≤ 45.65535</td>\n</tr>\n<tr>\n<td>1.2</td>\n<td>45.0 ≤ v ≤ 46.0</td>\n</tr>\n<tr>\n<td>1.3</td>\n<td>45.0 ≤ v ≤ 47.0</td>\n</tr>\n<tr>\n<td>1.4</td>\n<td>45.0 ≤ v ≤ 48.0</td>\n</tr>\n<tr>\n<td>5.0</td>\n<td>45.0 ≤ v ≤ 49.0</td>\n</tr>\n<tr>\n<td>6</td>\n<td>45.0 ≤ v ≤ 50.0</td>\n</tr>\n<tr>\n<td>7</td>\n<td>45.0 ≤ v ≤ 51.0</td>\n</tr>\n<tr>\n<td>8</td>\n<td>45.0 ≤ v ≤ 52.0</td>\n</tr>\n<tr>\n<td>9</td>\n<td>45.0 ≤ v ≤ 53.0</td>\n</tr>\n<tr>\n<td>10</td>\n<td>45.0 ≤ v ≤ 54.0</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"constant-pool-count\"><a href=\"#constant-pool-count\" class=\"headerlink\" title=\"constant_pool_count\"></a>constant_pool_count</h1><p>常量池元素条目数量，constant_pool_count项的值等于constant_pool表中的条目数加1。</p>\n<h1 id=\"constant-pool-constant-pool-count-1\"><a href=\"#constant-pool-constant-pool-count-1\" class=\"headerlink\" title=\"constant_pool[constant_pool_count-1]\"></a>constant_pool[constant_pool_count-1]</h1><p>constant_pool是一个结构表，它表示在ClassFile结构及其子结构中引用的各种字符串常量，类和接口名称，字段名称以及其他常量。<br>每个constant_pool表项的格式由其第一个“标记”字节指示。constant_pool表的索引从1到constant_pool_count - 1。</p>\n<h1 id=\"access-flags\"><a href=\"#access-flags\" class=\"headerlink\" title=\"access_flags\"></a>access_flags</h1><p>access_flags项的值是用于表示对此类或接口的访问权限和属性的标志掩码。</p>\n<table>\n<thead>\n<tr>\n<th>Flag</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ACC_PUBLIC</td>\n<td>0x0001</td>\n<td>Declared public; may be accessed from outside its package.</td>\n</tr>\n<tr>\n<td>ACC_FINAL</td>\n<td>0x0010</td>\n<td>Declared final; no subclasses allowed.</td>\n</tr>\n<tr>\n<td>ACC_SUPER</td>\n<td>0x0020</td>\n<td>Treat superclass methods specially when invoked by the invokespecial instruction.</td>\n</tr>\n<tr>\n<td>ACC_INTERFACE</td>\n<td>0x0200</td>\n<td>Is an interface, not a class.</td>\n</tr>\n<tr>\n<td>ACC_ABSTRACT</td>\n<td>0x0400</td>\n<td>Declared abstract; must not be instantiated.</td>\n</tr>\n<tr>\n<td>ACC_SYNTHETIC</td>\n<td>0x1000</td>\n<td>Declared synthetic; not present in the source code.</td>\n</tr>\n<tr>\n<td>ACC_ANNOTATION</td>\n<td>0x2000</td>\n<td>Declared as an annotation type.</td>\n</tr>\n<tr>\n<td>ACC_ENUM</td>\n<td>0x4000</td>\n<td>Declared as an enum type.</td>\n</tr>\n<tr>\n<td>ACC_MODULE</td>\n<td>0x8000</td>\n<td>Is a module, not a class or interface.</td>\n</tr>\n</tbody>\n</table>\n<p>ACC_MODULE标志表明这个类文件定义了一个模块，而不是类或接口。如果设置了ACC_MODULE标志，则特殊规则适用于本节末尾给出的类文件。<br>如果未设置ACC_MODULE标志，则当前段落下方的规则将应用于类文件。一个接口通过设置ACC_INTERFACE标志来区分。<br>如果未设置ACC_INTERFACE标志，则此类文件定义一个类，而不是接口或模块。<br>如果设置了ACC_INTERFACE标志，则还必须设置ACC_ABSTRACT标志，并且不得设置ACC_FINAL，ACC_SUPER，ACC_ENUM和ACC_MODULE标志集。<br>如果ACC_INTERFACE标志没有置位，除了ACC_ANNOTATION和ACC_MODULE之外，可以设置表4.1-B中的其他任何标志。但是，这样的类文件不能同时设置<br>其ACC_FINAL和ACC_ABSTRACT标志（JLS§8.1.1.2）。<br>ACC_SUPER标志指示如果它出现在这个类或接口中，则由invokespecial指令（§invokespecial）表示两个可选语义中的哪一个。<br>Java虚拟机指令集的编译器应该设置ACC_SUPER标志。在Java SE 8及更高版本中，Java虚拟机认为ACC_SUPER标志将在每个类文件中设置，<br>而不管类文件中标志的实际值和类文件的版本如何。</p>\n<p>ACC_SUPER标志的存在是为了与用于Java编程语言的早期编译器编译的代码向后兼容。 在1.0.2之前的JDK版本中，编译器生成了access_flags，<br>其中现在表示ACC_SUPER的标志没有指定的含义，并且Oracle的Java虚拟机实现忽略该标志（如果已设置）。ACC_SYNTHETIC标志表示该类或接口<br>是由编译器生成的，并未出现在源代码中。<br>注释类型（JLS§9.6）必须设置其ACC_ANNOTATION标志。 如果设置了ACC_ANNOTATION标志，则还必须设置ACC_INTERFACE标志。<br>ACC_ENUM标志表明该类或其超类被声明为枚举类型（JLS§8.9）。<br>未在表4.1-B中分配的access_flags项目的所有位保留供将来使用。 它们应该在生成的类文件中设置为零，并且应该被Java虚拟机实现忽略。</p>\n<h1 id=\"this-class\"><a href=\"#this-class\" class=\"headerlink\" title=\"this_class\"></a>this_class</h1><p>this_class项的值必须是constant_pool表中的有效索引。 该索引处的constant_pool条目必须是表示由此类文件定义的类或接口的CONSTANT_Class_info结构。</p>\n<h1 id=\"super-class\"><a href=\"#super-class\" class=\"headerlink\" title=\"super_class\"></a>super_class</h1><p>对于类来说，super_class项的值必须为零，或者必须是常量池表中的有效索引。 如果super_class项的值不为零，则该索引处的constant_pool条目<br>必须是表示由此类文件定义的类的直接超类的CONSTANT_Class_info结构。 直接超类或其任何超类都不能在其ClassFile结构的access_flags项中<br>设置ACC_FINAL标志。如果super_class项的值为零，那么这个类文件必须表示类Object，唯一没有直接超类的类或接口。<br>对于接口来说，super_class项的值必须始终是constant_pool表中的有效索引。 该索引处的constant_pool条目必须是表示类Object的<br>CONSTANT_Class_info结构。</p>\n<h1 id=\"interfaces-count\"><a href=\"#interfaces-count\" class=\"headerlink\" title=\"interfaces_count\"></a>interfaces_count</h1><p>interfaces_count项的值给出了此类或接口类型的直接超接口的数量。</p>\n<h1 id=\"interfaces-interfaces-count\"><a href=\"#interfaces-interfaces-count\" class=\"headerlink\" title=\"interfaces[interfaces_count]\"></a>interfaces[interfaces_count]</h1><p>interfaces数组中的每个值都必须是constant_pool表中的有效索引。 在接口[i]的每个值处的constant_pool条目（其中0≤i&lt;interfaces_count）<br>必须是CONSTANT_Class_info结构，该结构表示作为该类或接口类型的直接超级接口的接口，按照从左到右的顺序 类型的来源。</p>\n<h1 id=\"fields-count\"><a href=\"#fields-count\" class=\"headerlink\" title=\"fields_count\"></a>fields_count</h1><p>fields_count项的值给出了field表中field_info结构的数量。 field_info结构表示由此类或接口类型声明的所有字段，包括类变量和实例变量。</p>\n<h1 id=\"fields-fields-count\"><a href=\"#fields-fields-count\" class=\"headerlink\" title=\"fields[fields_count]\"></a>fields[fields_count]</h1><p>字段表中的每个值都必须是一个field_info结构，以便对此类或接口中的字段进行完整描述。 字段表仅包含由此类或接口声明的那些字段。<br>它不包含表示从超类或超接口继承的字段的项。</p>\n<h1 id=\"methods-count\"><a href=\"#methods-count\" class=\"headerlink\" title=\"methods_count\"></a>methods_count</h1><p>methods_count项的值给出了method_info的编号<br>结构在方法表中。</p>\n<h1 id=\"methods-methods-count\"><a href=\"#methods-methods-count\" class=\"headerlink\" title=\"methods[methods_count]\"></a>methods[methods_count]</h1><p>方法表中的每个值都必须是一个method_info结构（第4.6节），以提供此类或接口中方法的完整描述。 如果在method_info结构的access_flags项中<br>没有设置ACC_NATIVE和ACC_ABSTRACT标志，则也会提供实现该方法的Java虚拟机指令。<br>method_info结构表示由此类或接口类型声明的所有方法，包括实例方法，类方法，实例初始化方法）以及任何类或接口初始化方法。<br>方法表不包含表示从超类或超接口继承的方法的项。</p>\n<h1 id=\"attributes-count\"><a href=\"#attributes-count\" class=\"headerlink\" title=\"attributes_count\"></a>attributes_count</h1><p>attributes_count项的值给出了此类的属性表中的属性数量。</p>\n<h1 id=\"attributes-attributes-count\"><a href=\"#attributes-attributes-count\" class=\"headerlink\" title=\"attributes[attributes_count]\"></a>attributes[attributes_count]</h1><p>属性表的每个值必须是一个attribute_info结构</p>\n<blockquote>\n<p>如果在access_flags项中设置了ACC_MODULE标志，则可以设置access_flags项中的其他标志，并且以下规则适用于ClassFile结构的其余部分：<br>  •major_version，minor_version：≥53.0（即Java SE 9及以上）<br>  •this_class：模块信息<br>  •super_class，interfaces_count，fields_count，methods_count：零<br>  •属性：必须存在一个模块属性。 除了Module，ModulePackages，ModuleMainClass，InnerClasses，SourceFile，SourceDebugExtension，<br>  RuntimeVisibleAnnotations和RuntimeInvisibleAnnotations之外，可能不会出现任何预定义的属性（§4.7）。</p>\n</blockquote>"},{"title":"【JVM源码探秘】HotSpot启动流程分析-创建","date":"2018-02-23T07:53:30.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n在之前的文章中已经介绍了如何在Mac上[编译](/post/2018/01/29/compile-openjdk10-source-code-on-mac/)及[调试](/post/2018/01/30/debug-openjdk10-source-code-on-mac-with-clion-ide/)OpenJDK10源码，\n\n那么，一个Java实例从开始运行至结束经历了什么？本文将从JVM源码角度一探究竟，深入剖析HotSpot其创建流程。\n\n<!-- more -->\n\n# main.c # main()\n\n程序主入口位于`src/java.base/share/native/launcher/main.c`\n\n\n```c++\nint\nmain(int argc, char **argv)\n{\n    int margc;\n    char** margv;\n    int jargc;\n    char** jargv;\n    const jboolean const_javaw = JNI_FALSE;\n\n    ...\n\n#endif /* WIN32 */\n    return JLI_Launch(margc, margv,\n                   jargc, (const char**) jargv,\n                   0, NULL,\n                   VERSION_STRING,\n                   DOT_VERSION,\n                   (const_progname != NULL) ? const_progname : *margv,\n                   (const_launcher != NULL) ? const_launcher : *margv,\n                   jargc > 0,\n                   const_cpwildcard, const_javaw, 0);\n}\n```\n\nmain返回了`JLI_Launch()`函数，位于`src/java.base/share/native/libjli/java.c`\n\n# java.c # JLI_Launch()\n```c++\n/*\n * Entry point.\n */\nint\nJLI_Launch(int argc, char ** argv,              /* main argc, argc */\n        int jargc, const char** jargv,          /* java args */\n        int appclassc, const char** appclassv,  /* app classpath */\n        const char* fullversion,                /* full version defined */\n        const char* dotversion,                 /* UNUSED dot version defined */\n        const char* pname,                      /* program name */\n        const char* lname,                      /* launcher name */\n        jboolean javaargs,                      /* JAVA_ARGS */\n        jboolean cpwildcard,                    /* classpath wildcard*/\n        jboolean javaw,                         /* windows-only javaw */\n        jint ergo                               /* unused */\n)\n{\n    int mode = LM_UNKNOWN;\n    char *what = NULL;\n    char *main_class = NULL;\n    int ret;\n    InvocationFunctions ifn;\n    jlong start, end;\n    char jvmpath[MAXPATHLEN];\n    char jrepath[MAXPATHLEN];\n    char jvmcfg[MAXPATHLEN];\n    \n    /*\n     * 确保运行适当的JRE\n     * \n     * SelectVersion() has several responsibilities:\n     *\n     *  1) Disallow specification of another JRE.  With 1.9, another\n     *     version of the JRE cannot be invoked.\n     *  2) Allow for a JRE version to invoke JDK 1.9 or later.  Since\n     *     all mJRE directives have been stripped from the request but\n     *     the pre 1.9 JRE [ 1.6 thru 1.8 ], it is as if 1.9+ has been\n     *     invoked from the command line.\n     */\n    SelectVersion(argc, argv, &main_class);\n\n    // 创建运行环境，如检查系统使用的数据模型（32bit、64bit），获取使用的JRE路径，找到jvm.cfg解析已知的vm类型\n    // 设置新的LD_LIBRARY_PATH变量\n    CreateExecutionEnvironment(&argc, &argv,\n                               jrepath, sizeof(jrepath),\n                               jvmpath, sizeof(jvmpath),\n                               jvmcfg,  sizeof(jvmcfg));\n\n\n    // 加载JVM\n    // 通过jvmpath找到libjvm.so 返回以下方法\n    // JNI_CreateJavaVM\n    // JNI_GetDefaultJavaVMInitArgs\n    // GetCreatedJavaVMs\n    // 的符号地址返回，挂载到InvocationFunctions以便后续调用\n    if (!LoadJavaVM(jvmpath, &ifn)) {\n        return(6);\n    }\n\n    if (IsJavaArgs()) {\n        // 转换命令行参数 如：javac -cp foo:foo/\"*\" -J-ms32m\n        /* Preprocess wrapper arguments */\n        TranslateApplicationArgs(jargc, jargv, &argc, &argv);\n\n        /*\n         * 添加了三个VM选项\n         * -Denv.class.path 用户设置的CLASSPATH变量，如果CLASSPATH显式设置了tools.jar\n         *  \t\t\t\t则可以反编译VM的工具类sun.tools.*\n         * -Dapplication.home 应用程序目录\n         * -Djava.class.path 应用程序的类文件目录\n         */\n        if (!AddApplicationOptions(appclassc, appclassv)) {\n            return(1);\n        }\n    } else {\n        /* Set default CLASSPATH */\n        char* cpath = getenv(\"CLASSPATH\");\n        if (cpath != NULL) {\n            SetClassPath(cpath);\n        }\n    }\n\n    /* 解析命令行参数-jar -cp、-version、-*path、-X*等参数\n     *\n     * Parse command line options; if the return value of\n     * ParseArguments is false, the program should exit.\n     */\n    if (!ParseArguments(&argc, &argv, &mode, &what, &ret, jrepath))\n    {\n        return(ret);\n    }\n\n    // 设置classpath\n    /* Override class path if -jar flag was specified */\n    if (mode == LM_JAR) {\n        SetClassPath(what);     /* Override class path */\n    }\n    \n    ...\n    \n    return JVMInit(&ifn, threadStackSize, argc, argv, mode, what, ret);\n}\n```\n\n继续跟进`JVMInit()`方法，位于`src/java.base/macosx/native/libjli/java_md_macosx.c`，\n> 注：\n> 由于我的系统是Mac，所以对应的是java_md_macosx.c，\n> 其他系统位于目录`src/java.base`对应操作系统类型下的java_md.c或java_md_xxx.c\n\n# java_md_macosx.c # JVMInit()\n\n```c\nint\nJVMInit(InvocationFunctions* ifn, jlong threadStackSize,\n                 int argc, char **argv,\n                 int mode, char *what, int ret) {\n    if (sameThread) {\n        JLI_TraceLauncher(\"In same thread\\n\");\n        // need to block this thread against the main thread\n        // so signals get caught correctly\n        __block int rslt = 0;\n        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n        {\n            NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock: ^{\n                JavaMainArgs args;\n                args.argc = argc;\n                args.argv = argv;\n                args.mode = mode;\n                args.what = what;\n                args.ifn  = *ifn;\n                rslt = JavaMain(&args);\n            }];\n\n            /*\n             * We cannot use dispatch_sync here, because it blocks the main dispatch queue.\n             * Using the main NSRunLoop allows the dispatch queue to run properly once\n             * SWT (or whatever toolkit this is needed for) kicks off it's own NSRunLoop\n             * and starts running.\n             */\n            [op performSelectorOnMainThread:@selector(start) withObject:nil waitUntilDone:YES];\n        }\n        [pool drain];\n        return rslt;\n    } else {\n        // block当前线程并且在新线程中继续执行\n        // 至于为什么在新线程中创建JVM见引用https://bugs.openjdk.java.net/browse/JDK-6316197\n        return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);\n    }\n}\n```\n\n`JVMInit`方法紧接着又return回`java.c`的`ContinueInNewThread()`方法\n\n# java.c # ContinueInNewThread()\n```c\nint\nContinueInNewThread(InvocationFunctions* ifn, jlong threadStackSize,\n                    int argc, char **argv,\n                    int mode, char *what, int ret)\n{\n\n    /*\n     * 指定线程大小\n     * If user doesn't specify stack size, check if VM has a preference.\n     * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will\n     * return its default stack size through the init args structure.\n     */\n    if (threadStackSize == 0) {\n      struct JDK1_1InitArgs args1_1;\n      memset((void*)&args1_1, 0, sizeof(args1_1));\n      args1_1.version = JNI_VERSION_1_1;\n      ifn->GetDefaultJavaVMInitArgs(&args1_1);  /* ignore return value */\n      if (args1_1.javaStackSize > 0) {\n         threadStackSize = args1_1.javaStackSize;\n      }\n    }\n\n    { /* Create a new thread to create JVM and invoke main method */\n      JavaMainArgs args;\n      int rslt;\n\n      args.argc = argc;\n      args.argv = argv;\n      args.mode = mode;\n      args.what = what;\n      args.ifn = *ifn;\n\n      // 在新线程中执行\n      rslt = ContinueInNewThread0(JavaMain, threadStackSize, (void*)&args);\n      /* If the caller has deemed there is an error we\n       * simply return that, otherwise we return the value of\n       * the callee\n       */\n      return (ret != 0) ? ret : rslt;\n    }\n}\n```\n\n`ContinueInNewThread()`方法调用了执行方法`ContinueInNewThread0()`\n\n# java.c # ContinueInNewThread0()\n```c\n/*\n * Block current thread and continue execution in a new thread\n */\nint\nContinueInNewThread0(int (JNICALL *continuation)(void *), jlong stack_size, void * args) {\n    int rslt;\n    pthread_t tid;\n    pthread_attr_t attr;\n    pthread_attr_init(&attr);\n    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n    if (stack_size > 0) {\n      pthread_attr_setstacksize(&attr, stack_size);\n    }\n    pthread_attr_setguardsize(&attr, 0); // no pthread guard page on java threads\n\n    if (pthread_create(&tid, &attr, (void *(*)(void*))continuation, (void*)args) == 0) {\n      void * tmp;\n      pthread_join(tid, &tmp);\n      rslt = (int)(intptr_t)tmp;\n    } else {\n     /*\n      *  调用JNI_CreateJavaVM执行创建虚拟机\n      *\n      * Continue execution in current thread if for some reason (e.g. out of\n      * memory/LWP)  a new thread can't be created. This will likely fail\n      * later in continuation as JNI_CreateJavaVM needs to create quite a\n      * few new threads, anyway, just give it a try..\n      */\n      rslt = continuation(args);\n    }\n\n    pthread_attr_destroy(&attr);\n    return rslt;\n}\n```\n\n`ContinueInNewThread0()`中最终执行了名为`continuation`的JNICALL，而这个的JNICALL正是上一步传过来的`JavaMain`，\n单看`JavaMain`这个名字就好熟悉，有木有？接下来我们看看`JavaMain`的庐山真面目\n\n\n# java.c # JavaMain()\n\n```c\nint JNICALL\nJavaMain(void * _args)\n{\n    JavaMainArgs *args = (JavaMainArgs *)_args;\n    int argc = args->argc;\n    char **argv = args->argv;\n    int mode = args->mode;\n    char *what = args->what;\n    InvocationFunctions ifn = args->ifn;\n\n    JavaVM *vm = 0;\n    JNIEnv *env = 0;\n    jclass mainClass = NULL;\n    jclass appClass = NULL; // actual application class being launched\n    jmethodID mainID;\n    jobjectArray mainArgs;\n    int ret = 0;\n    jlong start, end;\n\n    RegisterThread();\n\n    // ================================\n    //          初始化虚拟机\n    // ================================\n    /* Initialize the virtual machine */\n    start = CounterGet();\n    if (!InitializeJVM(&vm, &env, &ifn)) {\n        JLI_ReportErrorMessage(JVM_ERROR1);\n        exit(1);\n    }\n\n    ...\n\n    // 如果输入了-version或-showversion参数\n    if (printVersion || showVersion) {\n        PrintJavaVersion(env, showVersion);\n        CHECK_EXCEPTION_LEAVE(0);\n        if (printVersion) {\n            LEAVE();\n        }\n    }\n\n    // 如果jar文件和类名均未指定则输出默认usage信息\n    /* If the user specified neither a class name nor a JAR file */\n    if (printXUsage || printUsage || what == 0 || mode == LM_UNKNOWN) {\n        PrintUsage(env, printXUsage);\n        CHECK_EXCEPTION_LEAVE(1);\n        LEAVE();\n    }\n\n    FreeKnownVMs(); /* after last possible PrintUsage */\n\n    ret = 1;\n\n    /*\n     * 加载Java程序的main方法，如果没找到则退出\n     *\n     * Get the application's main class. It also checks if the main\n     * method exists.\n     *\n     * See bugid 5030265.  The Main-Class name has already been parsed\n     * from the manifest, but not parsed properly for UTF-8 support.\n     * Hence the code here ignores the value previously extracted and\n     * uses the pre-existing code to reextract the value.  This is\n     * possibly an end of release cycle expedient.  However, it has\n     * also been discovered that passing some character sets through\n     * the environment has \"strange\" behavior on some variants of\n     * Windows.  Hence, maybe the manifest parsing code local to the\n     * launcher should never be enhanced.\n     *\n     * Hence, future work should either:\n     *     1)   Correct the local parsing code and verify that the\n     *          Main-Class attribute gets properly passed through\n     *          all environments,\n     *     2)   Remove the vestages of maintaining main_class through\n     *          the environment (and remove these comments).\n     *\n     * This method also correctly handles launching existing JavaFX\n     * applications that may or may not have a Main-Class manifest entry.\n     */\n    mainClass = LoadMainClass(env, mode, what);\n    CHECK_EXCEPTION_NULL_LEAVE(mainClass);\n    /*\n     * 获取程序主类Class对象\n     *\n     * In some cases when launching an application that needs a helper, e.g., a\n     * JavaFX application with no main method, the mainClass will not be the\n     * applications own main class but rather a helper class. To keep things\n     * consistent in the UI we need to track and report the application main class.\n     */\n    appClass = GetApplicationClass(env);\n    NULL_CHECK_RETURN_VALUE(appClass, -1);\n\n    // 构建main方法参数列表\n    /* Build platform specific argument array */\n    mainArgs = CreateApplicationArgs(env, argv, argc);\n    CHECK_EXCEPTION_NULL_LEAVE(mainArgs);\n\n    if (dryRun) {\n        ret = 0;\n        LEAVE();\n    }\n\n    /*\n     * PostJVMInit uses the class name as the application name for GUI purposes,\n     * for example, on OSX this sets the application name in the menu bar for\n     * both SWT and JavaFX. So we'll pass the actual application class here\n     * instead of mainClass as that may be a launcher or helper class instead\n     * of the application class.\n     */\n    PostJVMInit(env, appClass, vm);\n    CHECK_EXCEPTION_LEAVE(1);\n\n    /*\n     * 获取main方法ID\n     *\n     * The LoadMainClass not only loads the main class, it will also ensure\n     * that the main method's signature is correct, therefore further checking\n     * is not required. The main method is invoked here so that extraneous java\n     * stacks are not in the application stack trace.\n     */\n    mainID = (*env)->GetStaticMethodID(env, mainClass, \"main\",\n                                       \"([Ljava/lang/String;)V\");\n    CHECK_EXCEPTION_NULL_LEAVE(mainID);\n\n    // 调用main方法\n    /* Invoke main method. */\n    (*env)->CallStaticVoidMethod(env, mainClass, mainID, mainArgs);\n\n    /*\n     * 如果有异常抛出，程序将返回非零结束码\n     * \n     * The launcher's exit code (in the absence of calls to\n     * System.exit) will be non-zero if main threw an exception.\n     */\n    ret = (*env)->ExceptionOccurred(env) == NULL ? 0 : 1;\n\n    // 退出\n    LEAVE();\n}\n```\n\n可见`JavaMain()`是Java主程序的native调用。\n在该方法里会执行虚拟机的初始化，获取Java程序主类及main方法，然后通过JNI调用main方法，\n自此，整个JVM进程执行结束，最终退出。\n\n**值得注意的是:** \n该方法中调用的`InitializeJVM()`方法会执行一系列关于虚拟机的分配、挂载、初始化等工作，下篇文章我们继续详细深入介绍。\n\n","source":"_posts/2018/02/23/analysis-of-hotspot-jvm-startup-process-creation.md","raw":"---\ntitle: 【JVM源码探秘】HotSpot启动流程分析-创建\ndate: 2018-02-23 15:53:30\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n在之前的文章中已经介绍了如何在Mac上[编译](/post/2018/01/29/compile-openjdk10-source-code-on-mac/)及[调试](/post/2018/01/30/debug-openjdk10-source-code-on-mac-with-clion-ide/)OpenJDK10源码，\n\n那么，一个Java实例从开始运行至结束经历了什么？本文将从JVM源码角度一探究竟，深入剖析HotSpot其创建流程。\n\n<!-- more -->\n\n# main.c # main()\n\n程序主入口位于`src/java.base/share/native/launcher/main.c`\n\n\n```c++\nint\nmain(int argc, char **argv)\n{\n    int margc;\n    char** margv;\n    int jargc;\n    char** jargv;\n    const jboolean const_javaw = JNI_FALSE;\n\n    ...\n\n#endif /* WIN32 */\n    return JLI_Launch(margc, margv,\n                   jargc, (const char**) jargv,\n                   0, NULL,\n                   VERSION_STRING,\n                   DOT_VERSION,\n                   (const_progname != NULL) ? const_progname : *margv,\n                   (const_launcher != NULL) ? const_launcher : *margv,\n                   jargc > 0,\n                   const_cpwildcard, const_javaw, 0);\n}\n```\n\nmain返回了`JLI_Launch()`函数，位于`src/java.base/share/native/libjli/java.c`\n\n# java.c # JLI_Launch()\n```c++\n/*\n * Entry point.\n */\nint\nJLI_Launch(int argc, char ** argv,              /* main argc, argc */\n        int jargc, const char** jargv,          /* java args */\n        int appclassc, const char** appclassv,  /* app classpath */\n        const char* fullversion,                /* full version defined */\n        const char* dotversion,                 /* UNUSED dot version defined */\n        const char* pname,                      /* program name */\n        const char* lname,                      /* launcher name */\n        jboolean javaargs,                      /* JAVA_ARGS */\n        jboolean cpwildcard,                    /* classpath wildcard*/\n        jboolean javaw,                         /* windows-only javaw */\n        jint ergo                               /* unused */\n)\n{\n    int mode = LM_UNKNOWN;\n    char *what = NULL;\n    char *main_class = NULL;\n    int ret;\n    InvocationFunctions ifn;\n    jlong start, end;\n    char jvmpath[MAXPATHLEN];\n    char jrepath[MAXPATHLEN];\n    char jvmcfg[MAXPATHLEN];\n    \n    /*\n     * 确保运行适当的JRE\n     * \n     * SelectVersion() has several responsibilities:\n     *\n     *  1) Disallow specification of another JRE.  With 1.9, another\n     *     version of the JRE cannot be invoked.\n     *  2) Allow for a JRE version to invoke JDK 1.9 or later.  Since\n     *     all mJRE directives have been stripped from the request but\n     *     the pre 1.9 JRE [ 1.6 thru 1.8 ], it is as if 1.9+ has been\n     *     invoked from the command line.\n     */\n    SelectVersion(argc, argv, &main_class);\n\n    // 创建运行环境，如检查系统使用的数据模型（32bit、64bit），获取使用的JRE路径，找到jvm.cfg解析已知的vm类型\n    // 设置新的LD_LIBRARY_PATH变量\n    CreateExecutionEnvironment(&argc, &argv,\n                               jrepath, sizeof(jrepath),\n                               jvmpath, sizeof(jvmpath),\n                               jvmcfg,  sizeof(jvmcfg));\n\n\n    // 加载JVM\n    // 通过jvmpath找到libjvm.so 返回以下方法\n    // JNI_CreateJavaVM\n    // JNI_GetDefaultJavaVMInitArgs\n    // GetCreatedJavaVMs\n    // 的符号地址返回，挂载到InvocationFunctions以便后续调用\n    if (!LoadJavaVM(jvmpath, &ifn)) {\n        return(6);\n    }\n\n    if (IsJavaArgs()) {\n        // 转换命令行参数 如：javac -cp foo:foo/\"*\" -J-ms32m\n        /* Preprocess wrapper arguments */\n        TranslateApplicationArgs(jargc, jargv, &argc, &argv);\n\n        /*\n         * 添加了三个VM选项\n         * -Denv.class.path 用户设置的CLASSPATH变量，如果CLASSPATH显式设置了tools.jar\n         *  \t\t\t\t则可以反编译VM的工具类sun.tools.*\n         * -Dapplication.home 应用程序目录\n         * -Djava.class.path 应用程序的类文件目录\n         */\n        if (!AddApplicationOptions(appclassc, appclassv)) {\n            return(1);\n        }\n    } else {\n        /* Set default CLASSPATH */\n        char* cpath = getenv(\"CLASSPATH\");\n        if (cpath != NULL) {\n            SetClassPath(cpath);\n        }\n    }\n\n    /* 解析命令行参数-jar -cp、-version、-*path、-X*等参数\n     *\n     * Parse command line options; if the return value of\n     * ParseArguments is false, the program should exit.\n     */\n    if (!ParseArguments(&argc, &argv, &mode, &what, &ret, jrepath))\n    {\n        return(ret);\n    }\n\n    // 设置classpath\n    /* Override class path if -jar flag was specified */\n    if (mode == LM_JAR) {\n        SetClassPath(what);     /* Override class path */\n    }\n    \n    ...\n    \n    return JVMInit(&ifn, threadStackSize, argc, argv, mode, what, ret);\n}\n```\n\n继续跟进`JVMInit()`方法，位于`src/java.base/macosx/native/libjli/java_md_macosx.c`，\n> 注：\n> 由于我的系统是Mac，所以对应的是java_md_macosx.c，\n> 其他系统位于目录`src/java.base`对应操作系统类型下的java_md.c或java_md_xxx.c\n\n# java_md_macosx.c # JVMInit()\n\n```c\nint\nJVMInit(InvocationFunctions* ifn, jlong threadStackSize,\n                 int argc, char **argv,\n                 int mode, char *what, int ret) {\n    if (sameThread) {\n        JLI_TraceLauncher(\"In same thread\\n\");\n        // need to block this thread against the main thread\n        // so signals get caught correctly\n        __block int rslt = 0;\n        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n        {\n            NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock: ^{\n                JavaMainArgs args;\n                args.argc = argc;\n                args.argv = argv;\n                args.mode = mode;\n                args.what = what;\n                args.ifn  = *ifn;\n                rslt = JavaMain(&args);\n            }];\n\n            /*\n             * We cannot use dispatch_sync here, because it blocks the main dispatch queue.\n             * Using the main NSRunLoop allows the dispatch queue to run properly once\n             * SWT (or whatever toolkit this is needed for) kicks off it's own NSRunLoop\n             * and starts running.\n             */\n            [op performSelectorOnMainThread:@selector(start) withObject:nil waitUntilDone:YES];\n        }\n        [pool drain];\n        return rslt;\n    } else {\n        // block当前线程并且在新线程中继续执行\n        // 至于为什么在新线程中创建JVM见引用https://bugs.openjdk.java.net/browse/JDK-6316197\n        return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);\n    }\n}\n```\n\n`JVMInit`方法紧接着又return回`java.c`的`ContinueInNewThread()`方法\n\n# java.c # ContinueInNewThread()\n```c\nint\nContinueInNewThread(InvocationFunctions* ifn, jlong threadStackSize,\n                    int argc, char **argv,\n                    int mode, char *what, int ret)\n{\n\n    /*\n     * 指定线程大小\n     * If user doesn't specify stack size, check if VM has a preference.\n     * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will\n     * return its default stack size through the init args structure.\n     */\n    if (threadStackSize == 0) {\n      struct JDK1_1InitArgs args1_1;\n      memset((void*)&args1_1, 0, sizeof(args1_1));\n      args1_1.version = JNI_VERSION_1_1;\n      ifn->GetDefaultJavaVMInitArgs(&args1_1);  /* ignore return value */\n      if (args1_1.javaStackSize > 0) {\n         threadStackSize = args1_1.javaStackSize;\n      }\n    }\n\n    { /* Create a new thread to create JVM and invoke main method */\n      JavaMainArgs args;\n      int rslt;\n\n      args.argc = argc;\n      args.argv = argv;\n      args.mode = mode;\n      args.what = what;\n      args.ifn = *ifn;\n\n      // 在新线程中执行\n      rslt = ContinueInNewThread0(JavaMain, threadStackSize, (void*)&args);\n      /* If the caller has deemed there is an error we\n       * simply return that, otherwise we return the value of\n       * the callee\n       */\n      return (ret != 0) ? ret : rslt;\n    }\n}\n```\n\n`ContinueInNewThread()`方法调用了执行方法`ContinueInNewThread0()`\n\n# java.c # ContinueInNewThread0()\n```c\n/*\n * Block current thread and continue execution in a new thread\n */\nint\nContinueInNewThread0(int (JNICALL *continuation)(void *), jlong stack_size, void * args) {\n    int rslt;\n    pthread_t tid;\n    pthread_attr_t attr;\n    pthread_attr_init(&attr);\n    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n\n    if (stack_size > 0) {\n      pthread_attr_setstacksize(&attr, stack_size);\n    }\n    pthread_attr_setguardsize(&attr, 0); // no pthread guard page on java threads\n\n    if (pthread_create(&tid, &attr, (void *(*)(void*))continuation, (void*)args) == 0) {\n      void * tmp;\n      pthread_join(tid, &tmp);\n      rslt = (int)(intptr_t)tmp;\n    } else {\n     /*\n      *  调用JNI_CreateJavaVM执行创建虚拟机\n      *\n      * Continue execution in current thread if for some reason (e.g. out of\n      * memory/LWP)  a new thread can't be created. This will likely fail\n      * later in continuation as JNI_CreateJavaVM needs to create quite a\n      * few new threads, anyway, just give it a try..\n      */\n      rslt = continuation(args);\n    }\n\n    pthread_attr_destroy(&attr);\n    return rslt;\n}\n```\n\n`ContinueInNewThread0()`中最终执行了名为`continuation`的JNICALL，而这个的JNICALL正是上一步传过来的`JavaMain`，\n单看`JavaMain`这个名字就好熟悉，有木有？接下来我们看看`JavaMain`的庐山真面目\n\n\n# java.c # JavaMain()\n\n```c\nint JNICALL\nJavaMain(void * _args)\n{\n    JavaMainArgs *args = (JavaMainArgs *)_args;\n    int argc = args->argc;\n    char **argv = args->argv;\n    int mode = args->mode;\n    char *what = args->what;\n    InvocationFunctions ifn = args->ifn;\n\n    JavaVM *vm = 0;\n    JNIEnv *env = 0;\n    jclass mainClass = NULL;\n    jclass appClass = NULL; // actual application class being launched\n    jmethodID mainID;\n    jobjectArray mainArgs;\n    int ret = 0;\n    jlong start, end;\n\n    RegisterThread();\n\n    // ================================\n    //          初始化虚拟机\n    // ================================\n    /* Initialize the virtual machine */\n    start = CounterGet();\n    if (!InitializeJVM(&vm, &env, &ifn)) {\n        JLI_ReportErrorMessage(JVM_ERROR1);\n        exit(1);\n    }\n\n    ...\n\n    // 如果输入了-version或-showversion参数\n    if (printVersion || showVersion) {\n        PrintJavaVersion(env, showVersion);\n        CHECK_EXCEPTION_LEAVE(0);\n        if (printVersion) {\n            LEAVE();\n        }\n    }\n\n    // 如果jar文件和类名均未指定则输出默认usage信息\n    /* If the user specified neither a class name nor a JAR file */\n    if (printXUsage || printUsage || what == 0 || mode == LM_UNKNOWN) {\n        PrintUsage(env, printXUsage);\n        CHECK_EXCEPTION_LEAVE(1);\n        LEAVE();\n    }\n\n    FreeKnownVMs(); /* after last possible PrintUsage */\n\n    ret = 1;\n\n    /*\n     * 加载Java程序的main方法，如果没找到则退出\n     *\n     * Get the application's main class. It also checks if the main\n     * method exists.\n     *\n     * See bugid 5030265.  The Main-Class name has already been parsed\n     * from the manifest, but not parsed properly for UTF-8 support.\n     * Hence the code here ignores the value previously extracted and\n     * uses the pre-existing code to reextract the value.  This is\n     * possibly an end of release cycle expedient.  However, it has\n     * also been discovered that passing some character sets through\n     * the environment has \"strange\" behavior on some variants of\n     * Windows.  Hence, maybe the manifest parsing code local to the\n     * launcher should never be enhanced.\n     *\n     * Hence, future work should either:\n     *     1)   Correct the local parsing code and verify that the\n     *          Main-Class attribute gets properly passed through\n     *          all environments,\n     *     2)   Remove the vestages of maintaining main_class through\n     *          the environment (and remove these comments).\n     *\n     * This method also correctly handles launching existing JavaFX\n     * applications that may or may not have a Main-Class manifest entry.\n     */\n    mainClass = LoadMainClass(env, mode, what);\n    CHECK_EXCEPTION_NULL_LEAVE(mainClass);\n    /*\n     * 获取程序主类Class对象\n     *\n     * In some cases when launching an application that needs a helper, e.g., a\n     * JavaFX application with no main method, the mainClass will not be the\n     * applications own main class but rather a helper class. To keep things\n     * consistent in the UI we need to track and report the application main class.\n     */\n    appClass = GetApplicationClass(env);\n    NULL_CHECK_RETURN_VALUE(appClass, -1);\n\n    // 构建main方法参数列表\n    /* Build platform specific argument array */\n    mainArgs = CreateApplicationArgs(env, argv, argc);\n    CHECK_EXCEPTION_NULL_LEAVE(mainArgs);\n\n    if (dryRun) {\n        ret = 0;\n        LEAVE();\n    }\n\n    /*\n     * PostJVMInit uses the class name as the application name for GUI purposes,\n     * for example, on OSX this sets the application name in the menu bar for\n     * both SWT and JavaFX. So we'll pass the actual application class here\n     * instead of mainClass as that may be a launcher or helper class instead\n     * of the application class.\n     */\n    PostJVMInit(env, appClass, vm);\n    CHECK_EXCEPTION_LEAVE(1);\n\n    /*\n     * 获取main方法ID\n     *\n     * The LoadMainClass not only loads the main class, it will also ensure\n     * that the main method's signature is correct, therefore further checking\n     * is not required. The main method is invoked here so that extraneous java\n     * stacks are not in the application stack trace.\n     */\n    mainID = (*env)->GetStaticMethodID(env, mainClass, \"main\",\n                                       \"([Ljava/lang/String;)V\");\n    CHECK_EXCEPTION_NULL_LEAVE(mainID);\n\n    // 调用main方法\n    /* Invoke main method. */\n    (*env)->CallStaticVoidMethod(env, mainClass, mainID, mainArgs);\n\n    /*\n     * 如果有异常抛出，程序将返回非零结束码\n     * \n     * The launcher's exit code (in the absence of calls to\n     * System.exit) will be non-zero if main threw an exception.\n     */\n    ret = (*env)->ExceptionOccurred(env) == NULL ? 0 : 1;\n\n    // 退出\n    LEAVE();\n}\n```\n\n可见`JavaMain()`是Java主程序的native调用。\n在该方法里会执行虚拟机的初始化，获取Java程序主类及main方法，然后通过JNI调用main方法，\n自此，整个JVM进程执行结束，最终退出。\n\n**值得注意的是:** \n该方法中调用的`InitializeJVM()`方法会执行一系列关于虚拟机的分配、挂载、初始化等工作，下篇文章我们继续详细深入介绍。\n\n","slug":"analysis-of-hotspot-jvm-startup-process-creation","published":1,"updated":"2018-05-20T16:54:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2f001j2zs6xas7gl0f","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>在之前的文章中已经介绍了如何在Mac上<a href=\"/post/2018/01/29/compile-openjdk10-source-code-on-mac/\">编译</a>及<a href=\"/post/2018/01/30/debug-openjdk10-source-code-on-mac-with-clion-ide/\">调试</a>OpenJDK10源码，</p>\n<p>那么，一个Java实例从开始运行至结束经历了什么？本文将从JVM源码角度一探究竟，深入剖析HotSpot其创建流程。</p>\n<a id=\"more\"></a>\n<h1 id=\"main-c-main\"><a href=\"#main-c-main\" class=\"headerlink\" title=\"main.c # main()\"></a>main.c # main()</h1><p>程序主入口位于<code>src/java.base/share/native/launcher/main.c</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> margc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>** margv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> jargc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>** jargv;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> jboolean const_javaw = JNI_FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* WIN32 */</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> JLI_Launch(margc, margv,</span><br><span class=\"line\">                   jargc, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>**) jargv,</span><br><span class=\"line\">                   <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">                   VERSION_STRING,</span><br><span class=\"line\">                   DOT_VERSION,</span><br><span class=\"line\">                   (const_progname != <span class=\"literal\">NULL</span>) ? const_progname : *margv,</span><br><span class=\"line\">                   (const_launcher != <span class=\"literal\">NULL</span>) ? const_launcher : *margv,</span><br><span class=\"line\">                   jargc &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">                   const_cpwildcard, const_javaw, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main返回了<code>JLI_Launch()</code>函数，位于<code>src/java.base/share/native/libjli/java.c</code></p>\n<h1 id=\"java-c-JLI-Launch\"><a href=\"#java-c-JLI-Launch\" class=\"headerlink\" title=\"java.c # JLI_Launch()\"></a>java.c # JLI_Launch()</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Entry point.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">JLI_Launch(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> ** argv,              <span class=\"comment\">/* main argc, argc */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> jargc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** jargv,          <span class=\"comment\">/* java args */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> appclassc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** appclassv,  <span class=\"comment\">/* app classpath */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* fullversion,                <span class=\"comment\">/* full version defined */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* dotversion,                 <span class=\"comment\">/* UNUSED dot version defined */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pname,                      <span class=\"comment\">/* program name */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* lname,                      <span class=\"comment\">/* launcher name */</span></span><br><span class=\"line\">        jboolean javaargs,                      <span class=\"comment\">/* JAVA_ARGS */</span></span><br><span class=\"line\">        jboolean cpwildcard,                    <span class=\"comment\">/* classpath wildcard*/</span></span><br><span class=\"line\">        jboolean javaw,                         <span class=\"comment\">/* windows-only javaw */</span></span><br><span class=\"line\">        jint ergo                               <span class=\"comment\">/* unused */</span></span><br><span class=\"line\">)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mode = LM_UNKNOWN;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *what = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *main_class = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">    InvocationFunctions ifn;</span><br><span class=\"line\">    jlong start, end;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> jvmpath[MAXPATHLEN];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> jrepath[MAXPATHLEN];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> jvmcfg[MAXPATHLEN];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 确保运行适当的JRE</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * SelectVersion() has several responsibilities:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  1) Disallow specification of another JRE.  With 1.9, another</span></span><br><span class=\"line\"><span class=\"comment\">     *     version of the JRE cannot be invoked.</span></span><br><span class=\"line\"><span class=\"comment\">     *  2) Allow for a JRE version to invoke JDK 1.9 or later.  Since</span></span><br><span class=\"line\"><span class=\"comment\">     *     all mJRE directives have been stripped from the request but</span></span><br><span class=\"line\"><span class=\"comment\">     *     the pre 1.9 JRE [ 1.6 thru 1.8 ], it is as if 1.9+ has been</span></span><br><span class=\"line\"><span class=\"comment\">     *     invoked from the command line.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SelectVersion(argc, argv, &amp;main_class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建运行环境，如检查系统使用的数据模型（32bit、64bit），获取使用的JRE路径，找到jvm.cfg解析已知的vm类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置新的LD_LIBRARY_PATH变量</span></span><br><span class=\"line\">    CreateExecutionEnvironment(&amp;argc, &amp;argv,</span><br><span class=\"line\">                               jrepath, <span class=\"keyword\">sizeof</span>(jrepath),</span><br><span class=\"line\">                               jvmpath, <span class=\"keyword\">sizeof</span>(jvmpath),</span><br><span class=\"line\">                               jvmcfg,  <span class=\"keyword\">sizeof</span>(jvmcfg));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加载JVM</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过jvmpath找到libjvm.so 返回以下方法</span></span><br><span class=\"line\">    <span class=\"comment\">// JNI_CreateJavaVM</span></span><br><span class=\"line\">    <span class=\"comment\">// JNI_GetDefaultJavaVMInitArgs</span></span><br><span class=\"line\">    <span class=\"comment\">// GetCreatedJavaVMs</span></span><br><span class=\"line\">    <span class=\"comment\">// 的符号地址返回，挂载到InvocationFunctions以便后续调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!LoadJavaVM(jvmpath, &amp;ifn)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (IsJavaArgs()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 转换命令行参数 如：javac -cp foo:foo/\"*\" -J-ms32m</span></span><br><span class=\"line\">        <span class=\"comment\">/* Preprocess wrapper arguments */</span></span><br><span class=\"line\">        TranslateApplicationArgs(jargc, jargv, &amp;argc, &amp;argv);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 添加了三个VM选项</span></span><br><span class=\"line\"><span class=\"comment\">         * -Denv.class.path 用户设置的CLASSPATH变量，如果CLASSPATH显式设置了tools.jar</span></span><br><span class=\"line\"><span class=\"comment\">         *  \t\t\t\t则可以反编译VM的工具类sun.tools.*</span></span><br><span class=\"line\"><span class=\"comment\">         * -Dapplication.home 应用程序目录</span></span><br><span class=\"line\"><span class=\"comment\">         * -Djava.class.path 应用程序的类文件目录</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!AddApplicationOptions(appclassc, appclassv)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Set default CLASSPATH */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span>* cpath = getenv(<span class=\"string\">\"CLASSPATH\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cpath != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            SetClassPath(cpath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 解析命令行参数-jar -cp、-version、-*path、-X*等参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Parse command line options; if the return value of</span></span><br><span class=\"line\"><span class=\"comment\">     * ParseArguments is false, the program should exit.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ParseArguments(&amp;argc, &amp;argv, &amp;mode, &amp;what, &amp;ret, jrepath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置classpath</span></span><br><span class=\"line\">    <span class=\"comment\">/* Override class path if -jar flag was specified */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mode == LM_JAR) &#123;</span><br><span class=\"line\">        SetClassPath(what);     <span class=\"comment\">/* Override class path */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> JVMInit(&amp;ifn, threadStackSize, argc, argv, mode, what, ret);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟进<code>JVMInit()</code>方法，位于<code>src/java.base/macosx/native/libjli/java_md_macosx.c</code>，</p>\n<blockquote>\n<p>注：<br>由于我的系统是Mac，所以对应的是java_md_macosx.c，<br>其他系统位于目录<code>src/java.base</code>对应操作系统类型下的java_md.c或java_md_xxx.c</p>\n</blockquote>\n<h1 id=\"java-md-macosx-c-JVMInit\"><a href=\"#java-md-macosx-c-JVMInit\" class=\"headerlink\" title=\"java_md_macosx.c # JVMInit()\"></a>java_md_macosx.c # JVMInit()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">JVMInit(InvocationFunctions* ifn, jlong threadStackSize,</span><br><span class=\"line\">                 <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv,</span><br><span class=\"line\">                 <span class=\"keyword\">int</span> mode, <span class=\"keyword\">char</span> *what, <span class=\"keyword\">int</span> ret) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sameThread) &#123;</span><br><span class=\"line\">        JLI_TraceLauncher(<span class=\"string\">\"In same thread\\n\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// need to block this thread against the main thread</span></span><br><span class=\"line\">        <span class=\"comment\">// so signals get caught correctly</span></span><br><span class=\"line\">        __block <span class=\"keyword\">int</span> rslt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock: ^&#123;</span><br><span class=\"line\">                JavaMainArgs args;</span><br><span class=\"line\">                args.argc = argc;</span><br><span class=\"line\">                args.argv = argv;</span><br><span class=\"line\">                args.mode = mode;</span><br><span class=\"line\">                args.what = what;</span><br><span class=\"line\">                args.ifn  = *ifn;</span><br><span class=\"line\">                rslt = JavaMain(&amp;args);</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * We cannot use dispatch_sync here, because it blocks the main dispatch queue.</span></span><br><span class=\"line\"><span class=\"comment\">             * Using the main NSRunLoop allows the dispatch queue to run properly once</span></span><br><span class=\"line\"><span class=\"comment\">             * SWT (or whatever toolkit this is needed for) kicks off it's own NSRunLoop</span></span><br><span class=\"line\"><span class=\"comment\">             * and starts running.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            [op performSelectorOnMainThread:@selector(start) withObject:nil waitUntilDone:YES];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        [pool drain];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rslt;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// block当前线程并且在新线程中继续执行</span></span><br><span class=\"line\">        <span class=\"comment\">// 至于为什么在新线程中创建JVM见引用https://bugs.openjdk.java.net/browse/JDK-6316197</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>JVMInit</code>方法紧接着又return回<code>java.c</code>的<code>ContinueInNewThread()</code>方法</p>\n<h1 id=\"java-c-ContinueInNewThread\"><a href=\"#java-c-ContinueInNewThread\" class=\"headerlink\" title=\"java.c # ContinueInNewThread()\"></a>java.c # ContinueInNewThread()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">ContinueInNewThread(InvocationFunctions* ifn, jlong threadStackSize,</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv,</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> mode, <span class=\"keyword\">char</span> *what, <span class=\"keyword\">int</span> ret)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定线程大小</span></span><br><span class=\"line\"><span class=\"comment\">     * If user doesn't specify stack size, check if VM has a preference.</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will</span></span><br><span class=\"line\"><span class=\"comment\">     * return its default stack size through the init args structure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (threadStackSize == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">JDK1_1InitArgs</span> <span class=\"title\">args1_1</span>;</span></span><br><span class=\"line\">      <span class=\"built_in\">memset</span>((<span class=\"keyword\">void</span>*)&amp;args1_1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(args1_1));</span><br><span class=\"line\">      args1_1.version = JNI_VERSION_1_1;</span><br><span class=\"line\">      ifn-&gt;GetDefaultJavaVMInitArgs(&amp;args1_1);  <span class=\"comment\">/* ignore return value */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args1_1.javaStackSize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         threadStackSize = args1_1.javaStackSize;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"comment\">/* Create a new thread to create JVM and invoke main method */</span></span><br><span class=\"line\">      JavaMainArgs args;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> rslt;</span><br><span class=\"line\"></span><br><span class=\"line\">      args.argc = argc;</span><br><span class=\"line\">      args.argv = argv;</span><br><span class=\"line\">      args.mode = mode;</span><br><span class=\"line\">      args.what = what;</span><br><span class=\"line\">      args.ifn = *ifn;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 在新线程中执行</span></span><br><span class=\"line\">      rslt = ContinueInNewThread0(JavaMain, threadStackSize, (<span class=\"keyword\">void</span>*)&amp;args);</span><br><span class=\"line\">      <span class=\"comment\">/* If the caller has deemed there is an error we</span></span><br><span class=\"line\"><span class=\"comment\">       * simply return that, otherwise we return the value of</span></span><br><span class=\"line\"><span class=\"comment\">       * the callee</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (ret != <span class=\"number\">0</span>) ? ret : rslt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ContinueInNewThread()</code>方法调用了执行方法<code>ContinueInNewThread0()</code></p>\n<h1 id=\"java-c-ContinueInNewThread0\"><a href=\"#java-c-ContinueInNewThread0\" class=\"headerlink\" title=\"java.c # ContinueInNewThread0()\"></a>java.c # ContinueInNewThread0()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Block current thread and continue execution in a new thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">ContinueInNewThread0(<span class=\"keyword\">int</span> (JNICALL *continuation)(<span class=\"keyword\">void</span> *), jlong stack_size, <span class=\"keyword\">void</span> * args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rslt;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> tid;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</span><br><span class=\"line\">    pthread_attr_init(&amp;attr);</span><br><span class=\"line\">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      pthread_attr_setstacksize(&amp;attr, stack_size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pthread_attr_setguardsize(&amp;attr, <span class=\"number\">0</span>); <span class=\"comment\">// no pthread guard page on java threads</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pthread_create(&amp;tid, &amp;attr, (<span class=\"keyword\">void</span> *(*)(<span class=\"keyword\">void</span>*))continuation, (<span class=\"keyword\">void</span>*)args) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> * tmp;</span><br><span class=\"line\">      pthread_join(tid, &amp;tmp);</span><br><span class=\"line\">      rslt = (<span class=\"keyword\">int</span>)(<span class=\"keyword\">intptr_t</span>)tmp;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      *  调用JNI_CreateJavaVM执行创建虚拟机</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * Continue execution in current thread if for some reason (e.g. out of</span></span><br><span class=\"line\"><span class=\"comment\">      * memory/LWP)  a new thread can't be created. This will likely fail</span></span><br><span class=\"line\"><span class=\"comment\">      * later in continuation as JNI_CreateJavaVM needs to create quite a</span></span><br><span class=\"line\"><span class=\"comment\">      * few new threads, anyway, just give it a try..</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      rslt = continuation(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_attr_destroy(&amp;attr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rslt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ContinueInNewThread0()</code>中最终执行了名为<code>continuation</code>的JNICALL，而这个的JNICALL正是上一步传过来的<code>JavaMain</code>，<br>单看<code>JavaMain</code>这个名字就好熟悉，有木有？接下来我们看看<code>JavaMain</code>的庐山真面目</p>\n<h1 id=\"java-c-JavaMain\"><a href=\"#java-c-JavaMain\" class=\"headerlink\" title=\"java.c # JavaMain()\"></a>java.c # JavaMain()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> JNICALL</span><br><span class=\"line\">JavaMain(<span class=\"keyword\">void</span> * _args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JavaMainArgs *args = (JavaMainArgs *)_args;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> argc = args-&gt;argc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> **argv = args-&gt;argv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mode = args-&gt;mode;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *what = args-&gt;what;</span><br><span class=\"line\">    InvocationFunctions ifn = args-&gt;ifn;</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaVM *vm = <span class=\"number\">0</span>;</span><br><span class=\"line\">    JNIEnv *env = <span class=\"number\">0</span>;</span><br><span class=\"line\">    jclass mainClass = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    jclass appClass = <span class=\"literal\">NULL</span>; <span class=\"comment\">// actual application class being launched</span></span><br><span class=\"line\">    jmethodID mainID;</span><br><span class=\"line\">    jobjectArray mainArgs;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    jlong start, end;</span><br><span class=\"line\"></span><br><span class=\"line\">    RegisterThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ================================</span></span><br><span class=\"line\">    <span class=\"comment\">//          初始化虚拟机</span></span><br><span class=\"line\">    <span class=\"comment\">// ================================</span></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize the virtual machine */</span></span><br><span class=\"line\">    start = CounterGet();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!InitializeJVM(&amp;vm, &amp;env, &amp;ifn)) &#123;</span><br><span class=\"line\">        JLI_ReportErrorMessage(JVM_ERROR1);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果输入了-version或-showversion参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printVersion || showVersion) &#123;</span><br><span class=\"line\">        PrintJavaVersion(env, showVersion);</span><br><span class=\"line\">        CHECK_EXCEPTION_LEAVE(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (printVersion) &#123;</span><br><span class=\"line\">            LEAVE();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果jar文件和类名均未指定则输出默认usage信息</span></span><br><span class=\"line\">    <span class=\"comment\">/* If the user specified neither a class name nor a JAR file */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printXUsage || printUsage || what == <span class=\"number\">0</span> || mode == LM_UNKNOWN) &#123;</span><br><span class=\"line\">        PrintUsage(env, printXUsage);</span><br><span class=\"line\">        CHECK_EXCEPTION_LEAVE(<span class=\"number\">1</span>);</span><br><span class=\"line\">        LEAVE();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    FreeKnownVMs(); <span class=\"comment\">/* after last possible PrintUsage */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 加载Java程序的main方法，如果没找到则退出</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Get the application's main class. It also checks if the main</span></span><br><span class=\"line\"><span class=\"comment\">     * method exists.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * See bugid 5030265.  The Main-Class name has already been parsed</span></span><br><span class=\"line\"><span class=\"comment\">     * from the manifest, but not parsed properly for UTF-8 support.</span></span><br><span class=\"line\"><span class=\"comment\">     * Hence the code here ignores the value previously extracted and</span></span><br><span class=\"line\"><span class=\"comment\">     * uses the pre-existing code to reextract the value.  This is</span></span><br><span class=\"line\"><span class=\"comment\">     * possibly an end of release cycle expedient.  However, it has</span></span><br><span class=\"line\"><span class=\"comment\">     * also been discovered that passing some character sets through</span></span><br><span class=\"line\"><span class=\"comment\">     * the environment has \"strange\" behavior on some variants of</span></span><br><span class=\"line\"><span class=\"comment\">     * Windows.  Hence, maybe the manifest parsing code local to the</span></span><br><span class=\"line\"><span class=\"comment\">     * launcher should never be enhanced.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Hence, future work should either:</span></span><br><span class=\"line\"><span class=\"comment\">     *     1)   Correct the local parsing code and verify that the</span></span><br><span class=\"line\"><span class=\"comment\">     *          Main-Class attribute gets properly passed through</span></span><br><span class=\"line\"><span class=\"comment\">     *          all environments,</span></span><br><span class=\"line\"><span class=\"comment\">     *     2)   Remove the vestages of maintaining main_class through</span></span><br><span class=\"line\"><span class=\"comment\">     *          the environment (and remove these comments).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * This method also correctly handles launching existing JavaFX</span></span><br><span class=\"line\"><span class=\"comment\">     * applications that may or may not have a Main-Class manifest entry.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    mainClass = LoadMainClass(env, mode, what);</span><br><span class=\"line\">    CHECK_EXCEPTION_NULL_LEAVE(mainClass);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取程序主类Class对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * In some cases when launching an application that needs a helper, e.g., a</span></span><br><span class=\"line\"><span class=\"comment\">     * JavaFX application with no main method, the mainClass will not be the</span></span><br><span class=\"line\"><span class=\"comment\">     * applications own main class but rather a helper class. To keep things</span></span><br><span class=\"line\"><span class=\"comment\">     * consistent in the UI we need to track and report the application main class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    appClass = GetApplicationClass(env);</span><br><span class=\"line\">    NULL_CHECK_RETURN_VALUE(appClass, <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建main方法参数列表</span></span><br><span class=\"line\">    <span class=\"comment\">/* Build platform specific argument array */</span></span><br><span class=\"line\">    mainArgs = CreateApplicationArgs(env, argv, argc);</span><br><span class=\"line\">    CHECK_EXCEPTION_NULL_LEAVE(mainArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dryRun) &#123;</span><br><span class=\"line\">        ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        LEAVE();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * PostJVMInit uses the class name as the application name for GUI purposes,</span></span><br><span class=\"line\"><span class=\"comment\">     * for example, on OSX this sets the application name in the menu bar for</span></span><br><span class=\"line\"><span class=\"comment\">     * both SWT and JavaFX. So we'll pass the actual application class here</span></span><br><span class=\"line\"><span class=\"comment\">     * instead of mainClass as that may be a launcher or helper class instead</span></span><br><span class=\"line\"><span class=\"comment\">     * of the application class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    PostJVMInit(env, appClass, vm);</span><br><span class=\"line\">    CHECK_EXCEPTION_LEAVE(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取main方法ID</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * The LoadMainClass not only loads the main class, it will also ensure</span></span><br><span class=\"line\"><span class=\"comment\">     * that the main method's signature is correct, therefore further checking</span></span><br><span class=\"line\"><span class=\"comment\">     * is not required. The main method is invoked here so that extraneous java</span></span><br><span class=\"line\"><span class=\"comment\">     * stacks are not in the application stack trace.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    mainID = (*env)-&gt;GetStaticMethodID(env, mainClass, <span class=\"string\">\"main\"</span>,</span><br><span class=\"line\">                                       <span class=\"string\">\"([Ljava/lang/String;)V\"</span>);</span><br><span class=\"line\">    CHECK_EXCEPTION_NULL_LEAVE(mainID);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用main方法</span></span><br><span class=\"line\">    <span class=\"comment\">/* Invoke main method. */</span></span><br><span class=\"line\">    (*env)-&gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果有异常抛出，程序将返回非零结束码</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * The launcher's exit code (in the absence of calls to</span></span><br><span class=\"line\"><span class=\"comment\">     * System.exit) will be non-zero if main threw an exception.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ret = (*env)-&gt;ExceptionOccurred(env) == <span class=\"literal\">NULL</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 退出</span></span><br><span class=\"line\">    LEAVE();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见<code>JavaMain()</code>是Java主程序的native调用。<br>在该方法里会执行虚拟机的初始化，获取Java程序主类及main方法，然后通过JNI调用main方法，<br>自此，整个JVM进程执行结束，最终退出。</p>\n<p><strong>值得注意的是:</strong><br>该方法中调用的<code>InitializeJVM()</code>方法会执行一系列关于虚拟机的分配、挂载、初始化等工作，下篇文章我们继续详细深入介绍。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>在之前的文章中已经介绍了如何在Mac上<a href=\"/post/2018/01/29/compile-openjdk10-source-code-on-mac/\">编译</a>及<a href=\"/post/2018/01/30/debug-openjdk10-source-code-on-mac-with-clion-ide/\">调试</a>OpenJDK10源码，</p>\n<p>那么，一个Java实例从开始运行至结束经历了什么？本文将从JVM源码角度一探究竟，深入剖析HotSpot其创建流程。</p>","more":"<h1 id=\"main-c-main\"><a href=\"#main-c-main\" class=\"headerlink\" title=\"main.c # main()\"></a>main.c # main()</h1><p>程序主入口位于<code>src/java.base/share/native/launcher/main.c</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> margc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>** margv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> jargc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>** jargv;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> jboolean const_javaw = JNI_FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* WIN32 */</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> JLI_Launch(margc, margv,</span><br><span class=\"line\">                   jargc, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>**) jargv,</span><br><span class=\"line\">                   <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">                   VERSION_STRING,</span><br><span class=\"line\">                   DOT_VERSION,</span><br><span class=\"line\">                   (const_progname != <span class=\"literal\">NULL</span>) ? const_progname : *margv,</span><br><span class=\"line\">                   (const_launcher != <span class=\"literal\">NULL</span>) ? const_launcher : *margv,</span><br><span class=\"line\">                   jargc &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">                   const_cpwildcard, const_javaw, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main返回了<code>JLI_Launch()</code>函数，位于<code>src/java.base/share/native/libjli/java.c</code></p>\n<h1 id=\"java-c-JLI-Launch\"><a href=\"#java-c-JLI-Launch\" class=\"headerlink\" title=\"java.c # JLI_Launch()\"></a>java.c # JLI_Launch()</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Entry point.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">JLI_Launch(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> ** argv,              <span class=\"comment\">/* main argc, argc */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> jargc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** jargv,          <span class=\"comment\">/* java args */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> appclassc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** appclassv,  <span class=\"comment\">/* app classpath */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* fullversion,                <span class=\"comment\">/* full version defined */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* dotversion,                 <span class=\"comment\">/* UNUSED dot version defined */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pname,                      <span class=\"comment\">/* program name */</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* lname,                      <span class=\"comment\">/* launcher name */</span></span><br><span class=\"line\">        jboolean javaargs,                      <span class=\"comment\">/* JAVA_ARGS */</span></span><br><span class=\"line\">        jboolean cpwildcard,                    <span class=\"comment\">/* classpath wildcard*/</span></span><br><span class=\"line\">        jboolean javaw,                         <span class=\"comment\">/* windows-only javaw */</span></span><br><span class=\"line\">        jint ergo                               <span class=\"comment\">/* unused */</span></span><br><span class=\"line\">)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mode = LM_UNKNOWN;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *what = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *main_class = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">    InvocationFunctions ifn;</span><br><span class=\"line\">    jlong start, end;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> jvmpath[MAXPATHLEN];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> jrepath[MAXPATHLEN];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> jvmcfg[MAXPATHLEN];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 确保运行适当的JRE</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * SelectVersion() has several responsibilities:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  1) Disallow specification of another JRE.  With 1.9, another</span></span><br><span class=\"line\"><span class=\"comment\">     *     version of the JRE cannot be invoked.</span></span><br><span class=\"line\"><span class=\"comment\">     *  2) Allow for a JRE version to invoke JDK 1.9 or later.  Since</span></span><br><span class=\"line\"><span class=\"comment\">     *     all mJRE directives have been stripped from the request but</span></span><br><span class=\"line\"><span class=\"comment\">     *     the pre 1.9 JRE [ 1.6 thru 1.8 ], it is as if 1.9+ has been</span></span><br><span class=\"line\"><span class=\"comment\">     *     invoked from the command line.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SelectVersion(argc, argv, &amp;main_class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建运行环境，如检查系统使用的数据模型（32bit、64bit），获取使用的JRE路径，找到jvm.cfg解析已知的vm类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置新的LD_LIBRARY_PATH变量</span></span><br><span class=\"line\">    CreateExecutionEnvironment(&amp;argc, &amp;argv,</span><br><span class=\"line\">                               jrepath, <span class=\"keyword\">sizeof</span>(jrepath),</span><br><span class=\"line\">                               jvmpath, <span class=\"keyword\">sizeof</span>(jvmpath),</span><br><span class=\"line\">                               jvmcfg,  <span class=\"keyword\">sizeof</span>(jvmcfg));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加载JVM</span></span><br><span class=\"line\">    <span class=\"comment\">// 通过jvmpath找到libjvm.so 返回以下方法</span></span><br><span class=\"line\">    <span class=\"comment\">// JNI_CreateJavaVM</span></span><br><span class=\"line\">    <span class=\"comment\">// JNI_GetDefaultJavaVMInitArgs</span></span><br><span class=\"line\">    <span class=\"comment\">// GetCreatedJavaVMs</span></span><br><span class=\"line\">    <span class=\"comment\">// 的符号地址返回，挂载到InvocationFunctions以便后续调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!LoadJavaVM(jvmpath, &amp;ifn)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (IsJavaArgs()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 转换命令行参数 如：javac -cp foo:foo/\"*\" -J-ms32m</span></span><br><span class=\"line\">        <span class=\"comment\">/* Preprocess wrapper arguments */</span></span><br><span class=\"line\">        TranslateApplicationArgs(jargc, jargv, &amp;argc, &amp;argv);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 添加了三个VM选项</span></span><br><span class=\"line\"><span class=\"comment\">         * -Denv.class.path 用户设置的CLASSPATH变量，如果CLASSPATH显式设置了tools.jar</span></span><br><span class=\"line\"><span class=\"comment\">         *  \t\t\t\t则可以反编译VM的工具类sun.tools.*</span></span><br><span class=\"line\"><span class=\"comment\">         * -Dapplication.home 应用程序目录</span></span><br><span class=\"line\"><span class=\"comment\">         * -Djava.class.path 应用程序的类文件目录</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!AddApplicationOptions(appclassc, appclassv)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Set default CLASSPATH */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span>* cpath = getenv(<span class=\"string\">\"CLASSPATH\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cpath != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            SetClassPath(cpath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 解析命令行参数-jar -cp、-version、-*path、-X*等参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Parse command line options; if the return value of</span></span><br><span class=\"line\"><span class=\"comment\">     * ParseArguments is false, the program should exit.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ParseArguments(&amp;argc, &amp;argv, &amp;mode, &amp;what, &amp;ret, jrepath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置classpath</span></span><br><span class=\"line\">    <span class=\"comment\">/* Override class path if -jar flag was specified */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mode == LM_JAR) &#123;</span><br><span class=\"line\">        SetClassPath(what);     <span class=\"comment\">/* Override class path */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> JVMInit(&amp;ifn, threadStackSize, argc, argv, mode, what, ret);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟进<code>JVMInit()</code>方法，位于<code>src/java.base/macosx/native/libjli/java_md_macosx.c</code>，</p>\n<blockquote>\n<p>注：<br>由于我的系统是Mac，所以对应的是java_md_macosx.c，<br>其他系统位于目录<code>src/java.base</code>对应操作系统类型下的java_md.c或java_md_xxx.c</p>\n</blockquote>\n<h1 id=\"java-md-macosx-c-JVMInit\"><a href=\"#java-md-macosx-c-JVMInit\" class=\"headerlink\" title=\"java_md_macosx.c # JVMInit()\"></a>java_md_macosx.c # JVMInit()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">JVMInit(InvocationFunctions* ifn, jlong threadStackSize,</span><br><span class=\"line\">                 <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv,</span><br><span class=\"line\">                 <span class=\"keyword\">int</span> mode, <span class=\"keyword\">char</span> *what, <span class=\"keyword\">int</span> ret) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sameThread) &#123;</span><br><span class=\"line\">        JLI_TraceLauncher(<span class=\"string\">\"In same thread\\n\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// need to block this thread against the main thread</span></span><br><span class=\"line\">        <span class=\"comment\">// so signals get caught correctly</span></span><br><span class=\"line\">        __block <span class=\"keyword\">int</span> rslt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock: ^&#123;</span><br><span class=\"line\">                JavaMainArgs args;</span><br><span class=\"line\">                args.argc = argc;</span><br><span class=\"line\">                args.argv = argv;</span><br><span class=\"line\">                args.mode = mode;</span><br><span class=\"line\">                args.what = what;</span><br><span class=\"line\">                args.ifn  = *ifn;</span><br><span class=\"line\">                rslt = JavaMain(&amp;args);</span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * We cannot use dispatch_sync here, because it blocks the main dispatch queue.</span></span><br><span class=\"line\"><span class=\"comment\">             * Using the main NSRunLoop allows the dispatch queue to run properly once</span></span><br><span class=\"line\"><span class=\"comment\">             * SWT (or whatever toolkit this is needed for) kicks off it's own NSRunLoop</span></span><br><span class=\"line\"><span class=\"comment\">             * and starts running.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            [op performSelectorOnMainThread:@selector(start) withObject:nil waitUntilDone:YES];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        [pool drain];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rslt;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// block当前线程并且在新线程中继续执行</span></span><br><span class=\"line\">        <span class=\"comment\">// 至于为什么在新线程中创建JVM见引用https://bugs.openjdk.java.net/browse/JDK-6316197</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>JVMInit</code>方法紧接着又return回<code>java.c</code>的<code>ContinueInNewThread()</code>方法</p>\n<h1 id=\"java-c-ContinueInNewThread\"><a href=\"#java-c-ContinueInNewThread\" class=\"headerlink\" title=\"java.c # ContinueInNewThread()\"></a>java.c # ContinueInNewThread()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">ContinueInNewThread(InvocationFunctions* ifn, jlong threadStackSize,</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv,</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> mode, <span class=\"keyword\">char</span> *what, <span class=\"keyword\">int</span> ret)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定线程大小</span></span><br><span class=\"line\"><span class=\"comment\">     * If user doesn't specify stack size, check if VM has a preference.</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will</span></span><br><span class=\"line\"><span class=\"comment\">     * return its default stack size through the init args structure.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (threadStackSize == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">JDK1_1InitArgs</span> <span class=\"title\">args1_1</span>;</span></span><br><span class=\"line\">      <span class=\"built_in\">memset</span>((<span class=\"keyword\">void</span>*)&amp;args1_1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(args1_1));</span><br><span class=\"line\">      args1_1.version = JNI_VERSION_1_1;</span><br><span class=\"line\">      ifn-&gt;GetDefaultJavaVMInitArgs(&amp;args1_1);  <span class=\"comment\">/* ignore return value */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (args1_1.javaStackSize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         threadStackSize = args1_1.javaStackSize;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123; <span class=\"comment\">/* Create a new thread to create JVM and invoke main method */</span></span><br><span class=\"line\">      JavaMainArgs args;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> rslt;</span><br><span class=\"line\"></span><br><span class=\"line\">      args.argc = argc;</span><br><span class=\"line\">      args.argv = argv;</span><br><span class=\"line\">      args.mode = mode;</span><br><span class=\"line\">      args.what = what;</span><br><span class=\"line\">      args.ifn = *ifn;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 在新线程中执行</span></span><br><span class=\"line\">      rslt = ContinueInNewThread0(JavaMain, threadStackSize, (<span class=\"keyword\">void</span>*)&amp;args);</span><br><span class=\"line\">      <span class=\"comment\">/* If the caller has deemed there is an error we</span></span><br><span class=\"line\"><span class=\"comment\">       * simply return that, otherwise we return the value of</span></span><br><span class=\"line\"><span class=\"comment\">       * the callee</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (ret != <span class=\"number\">0</span>) ? ret : rslt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ContinueInNewThread()</code>方法调用了执行方法<code>ContinueInNewThread0()</code></p>\n<h1 id=\"java-c-ContinueInNewThread0\"><a href=\"#java-c-ContinueInNewThread0\" class=\"headerlink\" title=\"java.c # ContinueInNewThread0()\"></a>java.c # ContinueInNewThread0()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Block current thread and continue execution in a new thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">ContinueInNewThread0(<span class=\"keyword\">int</span> (JNICALL *continuation)(<span class=\"keyword\">void</span> *), jlong stack_size, <span class=\"keyword\">void</span> * args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rslt;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_t</span> tid;</span><br><span class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</span><br><span class=\"line\">    pthread_attr_init(&amp;attr);</span><br><span class=\"line\">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      pthread_attr_setstacksize(&amp;attr, stack_size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pthread_attr_setguardsize(&amp;attr, <span class=\"number\">0</span>); <span class=\"comment\">// no pthread guard page on java threads</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pthread_create(&amp;tid, &amp;attr, (<span class=\"keyword\">void</span> *(*)(<span class=\"keyword\">void</span>*))continuation, (<span class=\"keyword\">void</span>*)args) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> * tmp;</span><br><span class=\"line\">      pthread_join(tid, &amp;tmp);</span><br><span class=\"line\">      rslt = (<span class=\"keyword\">int</span>)(<span class=\"keyword\">intptr_t</span>)tmp;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      *  调用JNI_CreateJavaVM执行创建虚拟机</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * Continue execution in current thread if for some reason (e.g. out of</span></span><br><span class=\"line\"><span class=\"comment\">      * memory/LWP)  a new thread can't be created. This will likely fail</span></span><br><span class=\"line\"><span class=\"comment\">      * later in continuation as JNI_CreateJavaVM needs to create quite a</span></span><br><span class=\"line\"><span class=\"comment\">      * few new threads, anyway, just give it a try..</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      rslt = continuation(args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_attr_destroy(&amp;attr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rslt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ContinueInNewThread0()</code>中最终执行了名为<code>continuation</code>的JNICALL，而这个的JNICALL正是上一步传过来的<code>JavaMain</code>，<br>单看<code>JavaMain</code>这个名字就好熟悉，有木有？接下来我们看看<code>JavaMain</code>的庐山真面目</p>\n<h1 id=\"java-c-JavaMain\"><a href=\"#java-c-JavaMain\" class=\"headerlink\" title=\"java.c # JavaMain()\"></a>java.c # JavaMain()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> JNICALL</span><br><span class=\"line\">JavaMain(<span class=\"keyword\">void</span> * _args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JavaMainArgs *args = (JavaMainArgs *)_args;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> argc = args-&gt;argc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> **argv = args-&gt;argv;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mode = args-&gt;mode;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *what = args-&gt;what;</span><br><span class=\"line\">    InvocationFunctions ifn = args-&gt;ifn;</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaVM *vm = <span class=\"number\">0</span>;</span><br><span class=\"line\">    JNIEnv *env = <span class=\"number\">0</span>;</span><br><span class=\"line\">    jclass mainClass = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    jclass appClass = <span class=\"literal\">NULL</span>; <span class=\"comment\">// actual application class being launched</span></span><br><span class=\"line\">    jmethodID mainID;</span><br><span class=\"line\">    jobjectArray mainArgs;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    jlong start, end;</span><br><span class=\"line\"></span><br><span class=\"line\">    RegisterThread();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ================================</span></span><br><span class=\"line\">    <span class=\"comment\">//          初始化虚拟机</span></span><br><span class=\"line\">    <span class=\"comment\">// ================================</span></span><br><span class=\"line\">    <span class=\"comment\">/* Initialize the virtual machine */</span></span><br><span class=\"line\">    start = CounterGet();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!InitializeJVM(&amp;vm, &amp;env, &amp;ifn)) &#123;</span><br><span class=\"line\">        JLI_ReportErrorMessage(JVM_ERROR1);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果输入了-version或-showversion参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printVersion || showVersion) &#123;</span><br><span class=\"line\">        PrintJavaVersion(env, showVersion);</span><br><span class=\"line\">        CHECK_EXCEPTION_LEAVE(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (printVersion) &#123;</span><br><span class=\"line\">            LEAVE();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果jar文件和类名均未指定则输出默认usage信息</span></span><br><span class=\"line\">    <span class=\"comment\">/* If the user specified neither a class name nor a JAR file */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printXUsage || printUsage || what == <span class=\"number\">0</span> || mode == LM_UNKNOWN) &#123;</span><br><span class=\"line\">        PrintUsage(env, printXUsage);</span><br><span class=\"line\">        CHECK_EXCEPTION_LEAVE(<span class=\"number\">1</span>);</span><br><span class=\"line\">        LEAVE();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    FreeKnownVMs(); <span class=\"comment\">/* after last possible PrintUsage */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ret = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 加载Java程序的main方法，如果没找到则退出</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Get the application's main class. It also checks if the main</span></span><br><span class=\"line\"><span class=\"comment\">     * method exists.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * See bugid 5030265.  The Main-Class name has already been parsed</span></span><br><span class=\"line\"><span class=\"comment\">     * from the manifest, but not parsed properly for UTF-8 support.</span></span><br><span class=\"line\"><span class=\"comment\">     * Hence the code here ignores the value previously extracted and</span></span><br><span class=\"line\"><span class=\"comment\">     * uses the pre-existing code to reextract the value.  This is</span></span><br><span class=\"line\"><span class=\"comment\">     * possibly an end of release cycle expedient.  However, it has</span></span><br><span class=\"line\"><span class=\"comment\">     * also been discovered that passing some character sets through</span></span><br><span class=\"line\"><span class=\"comment\">     * the environment has \"strange\" behavior on some variants of</span></span><br><span class=\"line\"><span class=\"comment\">     * Windows.  Hence, maybe the manifest parsing code local to the</span></span><br><span class=\"line\"><span class=\"comment\">     * launcher should never be enhanced.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Hence, future work should either:</span></span><br><span class=\"line\"><span class=\"comment\">     *     1)   Correct the local parsing code and verify that the</span></span><br><span class=\"line\"><span class=\"comment\">     *          Main-Class attribute gets properly passed through</span></span><br><span class=\"line\"><span class=\"comment\">     *          all environments,</span></span><br><span class=\"line\"><span class=\"comment\">     *     2)   Remove the vestages of maintaining main_class through</span></span><br><span class=\"line\"><span class=\"comment\">     *          the environment (and remove these comments).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * This method also correctly handles launching existing JavaFX</span></span><br><span class=\"line\"><span class=\"comment\">     * applications that may or may not have a Main-Class manifest entry.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    mainClass = LoadMainClass(env, mode, what);</span><br><span class=\"line\">    CHECK_EXCEPTION_NULL_LEAVE(mainClass);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取程序主类Class对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * In some cases when launching an application that needs a helper, e.g., a</span></span><br><span class=\"line\"><span class=\"comment\">     * JavaFX application with no main method, the mainClass will not be the</span></span><br><span class=\"line\"><span class=\"comment\">     * applications own main class but rather a helper class. To keep things</span></span><br><span class=\"line\"><span class=\"comment\">     * consistent in the UI we need to track and report the application main class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    appClass = GetApplicationClass(env);</span><br><span class=\"line\">    NULL_CHECK_RETURN_VALUE(appClass, <span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建main方法参数列表</span></span><br><span class=\"line\">    <span class=\"comment\">/* Build platform specific argument array */</span></span><br><span class=\"line\">    mainArgs = CreateApplicationArgs(env, argv, argc);</span><br><span class=\"line\">    CHECK_EXCEPTION_NULL_LEAVE(mainArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dryRun) &#123;</span><br><span class=\"line\">        ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">        LEAVE();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * PostJVMInit uses the class name as the application name for GUI purposes,</span></span><br><span class=\"line\"><span class=\"comment\">     * for example, on OSX this sets the application name in the menu bar for</span></span><br><span class=\"line\"><span class=\"comment\">     * both SWT and JavaFX. So we'll pass the actual application class here</span></span><br><span class=\"line\"><span class=\"comment\">     * instead of mainClass as that may be a launcher or helper class instead</span></span><br><span class=\"line\"><span class=\"comment\">     * of the application class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    PostJVMInit(env, appClass, vm);</span><br><span class=\"line\">    CHECK_EXCEPTION_LEAVE(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取main方法ID</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * The LoadMainClass not only loads the main class, it will also ensure</span></span><br><span class=\"line\"><span class=\"comment\">     * that the main method's signature is correct, therefore further checking</span></span><br><span class=\"line\"><span class=\"comment\">     * is not required. The main method is invoked here so that extraneous java</span></span><br><span class=\"line\"><span class=\"comment\">     * stacks are not in the application stack trace.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    mainID = (*env)-&gt;GetStaticMethodID(env, mainClass, <span class=\"string\">\"main\"</span>,</span><br><span class=\"line\">                                       <span class=\"string\">\"([Ljava/lang/String;)V\"</span>);</span><br><span class=\"line\">    CHECK_EXCEPTION_NULL_LEAVE(mainID);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用main方法</span></span><br><span class=\"line\">    <span class=\"comment\">/* Invoke main method. */</span></span><br><span class=\"line\">    (*env)-&gt;CallStaticVoidMethod(env, mainClass, mainID, mainArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果有异常抛出，程序将返回非零结束码</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * The launcher's exit code (in the absence of calls to</span></span><br><span class=\"line\"><span class=\"comment\">     * System.exit) will be non-zero if main threw an exception.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ret = (*env)-&gt;ExceptionOccurred(env) == <span class=\"literal\">NULL</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 退出</span></span><br><span class=\"line\">    LEAVE();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见<code>JavaMain()</code>是Java主程序的native调用。<br>在该方法里会执行虚拟机的初始化，获取Java程序主类及main方法，然后通过JNI调用main方法，<br>自此，整个JVM进程执行结束，最终退出。</p>\n<p><strong>值得注意的是:</strong><br>该方法中调用的<code>InitializeJVM()</code>方法会执行一系列关于虚拟机的分配、挂载、初始化等工作，下篇文章我们继续详细深入介绍。</p>"},{"title":"【JVM源码探秘】HotSpot启动流程分析-初始化","date":"2018-02-23T09:10:35.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n接[上篇](/post/2018/02/23/analysis-of-hotspot-jvm-startup-process-creation/)，HotSpot在启动流程完成了参数的解析、JNI入口的定位、环境变量的设置等一系列操作，\n\n最终在`JavaMain()`中调用了`InitializeJVM()`方法，用于完成虚拟机所需的内存申请、挂载和初始化，本文我们就一起一探究竟。\n\n<!-- more -->\n\n# java.c # InitializeJVM()\n\n```c\n/*\n * Initializes the Java Virtual Machine. Also frees options array when\n * finished.\n */\nstatic jboolean\nInitializeJVM(JavaVM **pvm, JNIEnv **penv, InvocationFunctions *ifn)\n{\n    JavaVMInitArgs args;\n    jint r;\n\n    memset(&args, 0, sizeof(args));\n    args.version  = JNI_VERSION_1_2;\n    args.nOptions = numOptions;\n    args.options  = options;\n    args.ignoreUnrecognized = JNI_FALSE;\n\n    if (JLI_IsTraceLauncher()) {\n        int i = 0;\n        printf(\"JavaVM args:\\n    \");\n        printf(\"version 0x%08lx, \", (long)args.version);\n        printf(\"ignoreUnrecognized is %s, \",\n               args.ignoreUnrecognized ? \"JNI_TRUE\" : \"JNI_FALSE\");\n        printf(\"nOptions is %ld\\n\", (long)args.nOptions);\n        for (i = 0; i < numOptions; i++)\n            printf(\"    option[%2d] = '%s'\\n\",\n                   i, args.options[i].optionString);\n    }\n\n    // 调用JNI_CreateJavaVM方法\n    r = ifn->CreateJavaVM(pvm, (void **)penv, &args);\n    JLI_MemFree(options);\n    return r == JNI_OK;\n}\n```\n# jni.cpp # JNI_CreateJavaVM()\n此处调用了之前加载的JNI_CreateJavaVM方法，位于`src/hotspot/share/prims/jni.cpp`\n\n\n```c\n_JNI_IMPORT_OR_EXPORT_ jint JNICALL JNI_CreateJavaVM(JavaVM **vm, void **penv, void *args) {\n  jint result = JNI_ERR;\n  // On Windows, let CreateJavaVM run with SEH protection\n#ifdef _WIN32\n  __try {\n#endif\n    result = JNI_CreateJavaVM_inner(vm, penv, args);\n#ifdef _WIN32\n  } __except(topLevelExceptionFilter((_EXCEPTION_POINTERS*)_exception_info())) {\n    // Nothing to do.\n  }\n#endif\n  return result;\n}\n```\n\n# jni.cpp # JNI_CreateJavaVM_inner()\n`JNI_CreateJavaVM()`调用了内部方法`JNI_CreateJavaVM_inner()`\n\n\n```c\nstatic jint JNI_CreateJavaVM_inner(JavaVM **vm, void **penv, void *args) {\n  HOTSPOT_JNI_CREATEJAVAVM_ENTRY((void **) vm, penv, args);\n\n  /**\n   * Certain errors during initialization are recoverable and do not\n   * prevent this method from being called again at a later time\n   * (perhaps with different arguments).  However, at a certain\n   * point during initialization if an error occurs we cannot allow\n   * this function to be called again (or it will crash).  In those\n   * situations, the 'canTryAgain' flag is set to false, which atomically\n   * sets safe_to_recreate_vm to 1, such that any new call to\n   * JNI_CreateJavaVM will immediately fail using the above logic.\n   */\n  bool can_try_again = true;\n\n  // =================================\n  //           创建虚拟机\n  // =================================\n  result = Threads::create_vm((JavaVMInitArgs*) args, &can_try_again);\n  \n  // 如果创建成功\n  if (result == JNI_OK) {\n    JavaThread *thread = JavaThread::current();\n    assert(!thread->has_pending_exception(), \"should have returned not OK\");\n    /* thread is thread_in_vm here */\n    *vm = (JavaVM *)(&main_vm);\n    *(JNIEnv**)penv = thread->jni_environment();\n\n    // Tracks the time application was running before GC\n    RuntimeService::record_application_start();\n\n    // Notify JVMTI\n    if (JvmtiExport::should_post_thread_life()) {\n       JvmtiExport::post_thread_start(thread);\n    }\n\n    EventThreadStart event;\n    if (event.should_commit()) {\n      event.set_thread(THREAD_TRACE_ID(thread));\n      event.commit();\n    }\n\n    // Since this is not a JVM_ENTRY we have to set the thread state manually before leaving.\n    ThreadStateTransition::transition_and_fence(thread, _thread_in_vm, _thread_in_native);\n  } \n  // 如果未创建成功\n  else {\n    \n    ....\n    \n  }\n\n  return result;\n\n}\n```\n\n# thread.cpp # Threads::create_vm()\n`Threads::create_vm()`方法位于`src/hotspot/share/runtime/thread.cpp`中\n\n\n\n```c\njint Threads::create_vm(JavaVMInitArgs* args, bool* canTryAgain) {\n  extern void JDK_Version_init();\n\n  // 版本信息初始化\n  VM_Version::early_initialize();\n\n  // 检查JNI版本\n  if (!is_supported_jni_version(args->version)) return JNI_EVERSION;\n\n  // 初始化TLS\n  // Initialize library-based TLS\n  ThreadLocalStorage::init();\n\n  // 初始化系统输出流模块\n  // Initialize the output stream module\n  ostream_init();\n\n  // 处理Java启动参数，如-Dsun.java.launcher*\n  // Process java launcher properties.\n  Arguments::process_sun_java_launcher_properties(args);\n\n  // 初始化操作系统模块，如页大小，处理器数量，系统时钟等\n  // Initialize the os module\n  os::init();\n\n  // 启动VM创建计时器\n  // Record VM creation timing statistics\n  TraceVmCreationTime create_vm_timer;\n  create_vm_timer.start();\n\n  // 初始化系统属性，其中分为【可读属性】和【可读写属性】\n  // 可读属性：\n  // java.vm.specification.name\n  // java.vm.version\n  // java.vm.name\n  // java.vm.info\n  // 可读写属性：\n  // java.ext.dirs\n  // java.endorsed.dirs\n  // sun.boot.library.path\n  // java.library.path\n  // java.home\n  // sun.boot.class.path\n  // java.class.path\n  // Initialize system properties.\n  Arguments::init_system_properties();\n\n  // JDK版本初始化\n  // So that JDK version can be used as a discriminator when parsing arguments\n  JDK_Version_init();\n\n  // 设置java.vm.specification.vendor\n  // java.vm.specification.version和java.vm.vendor属性\n  // Update/Initialize System properties after JDK version number is known\n  Arguments::init_version_specific_system_properties();\n\n  // 初始化日志配置\n  // Make sure to initialize log configuration *before* parsing arguments\n  LogConfiguration::initialize(create_vm_timer.begin_time());\n\n  // 解析启动参数，如-XX:Flags=、-XX:+PrintVMOptions、-XX:+PrintFlagsInitial etc.\n  // Parse arguments\n  jint parse_result = Arguments::parse(args);\n  if (parse_result != JNI_OK) return parse_result;\n\n  os::init_before_ergo();\n\n  // 初始化GC日志输出流，用来处理-Xloggc参数\n  // Initialize output stream logging\n  ostream_init_log();\n\n  // Convert -Xrun to -agentlib: if there is no JVM_OnLoad\n  // Must be before create_vm_init_agents()\n  if (Arguments::init_libraries_at_startup()) {\n    convert_vm_init_libraries_to_agents();\n  }\n\n  // 初始化agent\n  // Launch -agentlib/-agentpath and converted -Xrun agents\n  if (Arguments::init_agents_at_startup()) {\n    create_vm_init_agents();\n  }\n\n  // Initialize Threads state\n  _thread_list = NULL;\n  _number_of_threads = 0;\n  _number_of_non_daemon_threads = 0;\n\n  /*\n   * ========================================\n   * 初始化VM全局数据结构及系统类\n   * ========================================\n   * 初始化Java基础类型\n   * 初始化对象OOP大小\n   * 初始化锁\n   * 初始化chunkpool\n   * 初始化性能数据统计模块\n   * ========================================\n   */\n  // Initialize global data structures and create system classes in heap\n  vm_init_globals();\n\n  // 初始化Java级别的对象同步器子系统\n  // Initialize Java-Level synchronization subsystem\n  ObjectMonitor::Initialize();\n\n  /*\n   * 初始化全局模块\n   * ========================================\n   * 1. 初始化management模块\n   * 2. 初始化字节码/操作符表\n   * 3. 初始化ClassLoader\n   * 4. 根据命令行参数决定编译策略\n   * 5. 代码缓存初始化\n   * 6. 虚拟机版本初始化\n   * 7. OS全局初始化\n   * ....\n   *\n   * ========================================\n   */\n  jint status = init_globals();\n  if (status != JNI_OK) {\n    delete main_thread;\n    *canTryAgain = false; // don't let caller call JNI_CreateJavaVM again\n    return status;\n  }\n\n  if (TRACE_INITIALIZE() != JNI_OK) {\n    vm_exit_during_initialization(\"Failed to initialize tracing backend\");\n  }\n\n  // Should be done after the heap is fully created\n  main_thread->cache_global_variables();\n\n  HandleMark hm;\n\n  { MutexLocker mu(Threads_lock);\n    Threads::add(main_thread);\n  }\n\n  Thread* THREAD = Thread::current();\n\n  // Always call even when there are not JVMTI environments yet, since environments\n  // may be attached late and JVMTI must track phases of VM execution\n  JvmtiExport::enter_early_start_phase();\n\n  // Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.\n  JvmtiExport::post_early_vm_start();\n\n  // 初始化Java的lang包\n  initialize_java_lang_classes(main_thread, CHECK_JNI_ERR);\n\n  // We need this for ClassDataSharing - the initial vm.info property is set\n  // with the default value of CDS \"sharing\" which may be reset through\n  // command line options.\n  reset_vm_info_property(CHECK_JNI_ERR);\n\n  quicken_jni_functions();\n\n  // No more stub generation allowed after that point.\n  StubCodeDesc::freeze();\n\n  // Set flag that basic initialization has completed. Used by exceptions and various\n  // debug stuff, that does not work until all basic classes have been initialized.\n  set_init_completed();\n\n  LogConfiguration::post_initialize();\n  Metaspace::post_initialize();\n\n  HOTSPOT_VM_INIT_END();\n\n  // record VM initialization completion time\n#if INCLUDE_MANAGEMENT\n  Management::record_vm_init_completed();\n#endif // INCLUDE_MANAGEMENT\n\n  // 启动一个叫做“信号分发器”的线程用来处理进程间的信号\n  // 比如通过jstack获取一个jvm实例的栈信息\n  // Signal Dispatcher needs to be started before VMInit event is posted\n  os::signal_init(CHECK_JNI_ERR);\n\n  // Start Attach Listener if +StartAttachListener or it can't be started lazily\n  if (!DisableAttachMechanism) {\n    AttachListener::vm_start();\n    if (StartAttachListener || AttachListener::init_at_startup()) {\n      AttachListener::init();\n    }\n  }\n\n  // Launch -Xrun agents\n  // Must be done in the JVMTI live phase so that for backward compatibility the JDWP\n  // back-end can launch with -Xdebug -Xrunjdwp.\n  if (!EagerXrunInit && Arguments::init_libraries_at_startup()) {\n    create_vm_init_libraries();\n  }\n\n  // 通知JVMTI agents虚拟机初始化开始\n  // Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.\n  JvmtiExport::post_vm_start();\n\n  // Final system initialization including security manager and system class loader\n  call_initPhase3(CHECK_JNI_ERR);\n\n  // cache the system class loader\n  SystemDictionary::compute_java_system_loader(CHECK_(JNI_ERR));\n\n\n  if (MemProfiling)                   MemProfiler::engage();\n  StatSampler::engage();\n  if (CheckJNICalls)                  JniPeriodicChecker::engage();\n\n  // 初始化偏向锁\n  BiasedLocking::init();\n\n  return JNI_OK;\n}\n```\n\n# init.cpp # init_globals()\n`init_globals()`方法用于初始化虚拟机全局模块，位于调用了`src/hotspot/share/runtime/init.cpp`\n\n\n```c\njint init_globals() {\n  HandleMark hm;\n  // 初始化各子系统的监控及管理服务\n  // JMX、线程和同步子系统、类加载子系统的监控和管理\n  management_init();\n  // 初始化字节码表，如istore、iload、iadd\n  bytecodes_init();\n  // 类加载器初始化\n  classLoader_init1();\n  // 初始化编译策略（根据启动参数决定编译策略）\n  compilationPolicy_init();\n  // 代码缓存池初始化\n  codeCache_init();\n  // 虚拟机版本初始化\n  VM_Version_init();\n  // OS全局初始化\n  os_init_globals();\n  stubRoutines_init1();\n  // ============================\n  // 初始化堆以及决定所使用GC策略\n  // ============================\n  jint status = universe_init();  // dependent on codeCache_init and\n                                  // stubRoutines_init1 and metaspace_init.\n  if (status != JNI_OK)\n    return status;\n\n  // 初始化解析器\n  interpreter_init();  // before any methods loaded\n  // 初始化动作触发器\n  invocationCounter_init();  // before any methods loaded\n  // 初始化MarkSweep\n  marksweep_init();\n  // 初始化访问标识\n  accessFlags_init();\n  // 初始化操作码模板表\n  templateTable_init();\n  // 接口支持提供了VM_LEAF_BASE和VM_ENTRY_BASE宏\n  InterfaceSupport_init();\n  SharedRuntime::generate_stubs();\n  // 初始化语法表及系统字典等\n  universe2_init();  // dependent on codeCache_init and stubRoutines_init1\n  // 初始化软引用时间戳表并设定软引用清除策略\n  referenceProcessor_init();\n  jni_handles_init();\n#if INCLUDE_VM_STRUCTS\n  // 代码数据结构的必要性检查（仅限debug版本）\n  vmStructs_init();\n#endif // INCLUDE_VM_STRUCTS\n\n  vtableStubs_init();\n  InlineCacheBuffer_init();\n  // oracle编译器初始化（oracle编译器是一个编译器开关接口）\n  compilerOracle_init();\n  dependencyContext_init();\n\n  if (!compileBroker_init()) {\n    return JNI_EINVAL;\n  }\n  VMRegImpl::set_regName();\n  // 执行初始化\n  if (!universe_post_init()) {\n    return JNI_ERR;\n  }\n  javaClasses_init();   // must happen after vtable initialization\n  stubRoutines_init2(); // note: StubRoutines need 2-phase init\n  MethodHandles::generate_adapters();\n\n#if INCLUDE_NMT\n  // Solaris stack is walkable only after stubRoutines are set up.\n  // On Other platforms, the stack is always walkable.\n  NMT_stack_walkable = true;\n#endif // INCLUDE_NMT\n\n  // All the flags that get adjusted by VM_Version_init and os::init_2\n  // have been set so dump the flags now.\n  if (PrintFlagsFinal || PrintFlagsRanges) {\n    CommandLineFlags::printFlags(tty, false, PrintFlagsRanges);\n  }\n\n  return JNI_OK;\n}\n```\n\n# universe.cpp # universe_init()\n`universe_init()`方法初始化堆以及决定所使用GC策略，位于`src/hotspot/share/memory/universe.cpp`\n\n```c\njint universe_init() {\n  assert(!Universe::_fully_initialized, \"called after initialize_vtables\");\n  guarantee(1 << LogHeapWordSize == sizeof(HeapWord),\n         \"LogHeapWordSize is incorrect.\");\n  guarantee(sizeof(oop) >= sizeof(HeapWord), \"HeapWord larger than oop?\");\n  guarantee(sizeof(oop) % sizeof(HeapWord) == 0,\n            \"oop size is not not a multiple of HeapWord size\");\n\n  TraceTime timer(\"Genesis\", TRACETIME_LOG(Info, startuptime));\n\n  JavaClasses::compute_hard_coded_offsets();\n\n  /*\n   * ==============================================================\n   *                  初始化堆空间\n   * ==============================================================\n   * 在JDK7以前的版本中默认使用CMS收集器，这里会创建及初始化各分区代，设定空间比例大小，回收策略等\n   * 流程：根据启动参数决定使用的回收策略，初始化回收策略时会指定所使用的代规范，\n   * \t  最后根据规范创建对应类型的回收堆。\n   *      i.e. arguments -> policy -> spec -> heap\n   *\n   * 在最新的JDK10中默认使用G1作为默认收集器，在JEP248里就提议，参见http://openjdk.java.net/jeps/248，\n   * 虽然也采用分代算法，但由连续内存的年轻（老）代改为非连续的小块region（单个region连续）\n   * ==============================================================\n   */\n  jint status = Universe::initialize_heap();\n  if (status != JNI_OK) {\n    return status;\n  }\n\n  // 初始化元数据空间\n  // 在JDK8里移除了PermGen，就是加入了它\n  Metaspace::global_initialize();\n\n  // 初始化AOT loader\n  AOTLoader::universe_init();\n\n  // Checks 'AfterMemoryInit' constraints.\n  if (!CommandLineFlagConstraintList::check_constraints(CommandLineFlagConstraint::AfterMemoryInit)) {\n    return JNI_EINVAL;\n  }\n\n  // 为元数据申请内存空间\n  // Create memory for metadata.  Must be after initializing heap for\n  // DumpSharedSpaces.\n  ClassLoaderData::init_null_class_loader_data();\n\n  // We have a heap so create the Method* caches before\n  // Metaspace::initialize_shared_spaces() tries to populate them.\n  Universe::_finalizer_register_cache = new LatestMethodCache();\n  Universe::_loader_addClass_cache    = new LatestMethodCache();\n  Universe::_pd_implies_cache         = new LatestMethodCache();\n  Universe::_throw_illegal_access_error_cache = new LatestMethodCache();\n  Universe::_do_stack_walk_cache = new LatestMethodCache();\n\n#if INCLUDE_CDS\n  if (UseSharedSpaces) {\n    // Read the data structures supporting the shared spaces (shared\n    // system dictionary, symbol table, etc.).  After that, access to\n    // the file (other than the mapped regions) is no longer needed, and\n    // the file is closed. Closing the file does not affect the\n    // currently mapped regions.\n    MetaspaceShared::initialize_shared_spaces();\n    StringTable::create_table();\n  } else\n#endif\n  {\n    // 创建符号表\n    SymbolTable::create_table();\n    // 创建字符串缓存池\n    StringTable::create_table();\n\n#if INCLUDE_CDS\n    if (DumpSharedSpaces) {\n      MetaspaceShared::prepare_for_dumping();\n    }\n#endif\n  }\n  if (strlen(VerifySubSet) > 0) {\n    Universe::initialize_verify_flags();\n  }\n\n  // 创建方法表\n  ResolvedMethodTable::create_table();\n\n  return JNI_OK;\n}\n```\n\n# universe.cpp # initialize_heap()\n`initialize_heap()`方法用于初始化堆空间，位于`src/hotspot/share/memory/universe.cpp`\n```c\n// Choose the heap base address and oop encoding mode\n// when compressed oops are used:\n// Unscaled  - Use 32-bits oops without encoding when\n//     NarrowOopHeapBaseMin + heap_size < 4Gb\n// ZeroBased - Use zero based compressed oops with encoding when\n//     NarrowOopHeapBaseMin + heap_size < 32Gb\n// HeapBased - Use compressed oops with heap base + encoding.\n\njint Universe::initialize_heap() {\n  jint status = JNI_ERR;\n\n\n  // 根据GC策略创建堆空间\n  _collectedHeap = create_heap_ext();\n  if (_collectedHeap == NULL) {\n    _collectedHeap = create_heap();\n  }\n\n  /*\n   * ==========================================\n   *        初始化堆空间\n   * ==========================================\n   * 这里会调用G1CollectedHeap::initialize()方法，\n   * 真正向操作系统申请内存\n   * ==========================================\n   */\n  status = _collectedHeap->initialize();\n  if (status != JNI_OK) {\n    return status;\n  }\n  log_info(gc)(\"Using %s\", _collectedHeap->name());\n\n  ThreadLocalAllocBuffer::set_max_size(Universe::heap()->max_tlab_size());\n\n#ifdef _LP64\n  // 在LP64数据模型下是否开启对象指针压缩\n  if (UseCompressedOops) {\n    // Subtract a page because something can get allocated at heap base.\n    // This also makes implicit null checking work, because the\n    // memory+1 page below heap_base needs to cause a signal.\n    // See needs_explicit_null_check.\n    // Only set the heap base for compressed oops because it indicates\n    // compressed oops for pstack code.\n    if ((uint64_t)Universe::heap()->reserved_region().end() > UnscaledOopHeapMax) {\n      // Didn't reserve heap below 4Gb.  Must shift.\n      Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);\n    }\n    if ((uint64_t)Universe::heap()->reserved_region().end() <= OopEncodingHeapMax) {\n      // Did reserve heap below 32Gb. Can use base == 0;\n      Universe::set_narrow_oop_base(0);\n    }\n\n    Universe::set_narrow_ptrs_base(Universe::narrow_oop_base());\n\n    LogTarget(Info, gc, heap, coops) lt;\n    if (lt.is_enabled()) {\n      ResourceMark rm;\n      LogStream ls(lt);\n      Universe::print_compressed_oops_mode(&ls);\n    }\n\n    // Tell tests in which mode we run.\n    Arguments::PropertyList_add(new SystemProperty(\"java.vm.compressedOopsMode\",\n                                                   narrow_oop_mode_to_string(narrow_oop_mode()),\n                                                   false));\n  }\n  // Universe::narrow_oop_base() is one page below the heap.\n  assert((intptr_t)Universe::narrow_oop_base() <= (intptr_t)(Universe::heap()->base() -\n         os::vm_page_size()) ||\n         Universe::narrow_oop_base() == NULL, \"invalid value\");\n  assert(Universe::narrow_oop_shift() == LogMinObjAlignmentInBytes ||\n         Universe::narrow_oop_shift() == 0, \"invalid value\");\n#endif\n\n  // We will never reach the CATCH below since Exceptions::_throw will cause\n  // the VM to exit if an exception is thrown during initialization\n  // 如果使用TLAB\n  if (UseTLAB) {\n    assert(Universe::heap()->supports_tlab_allocation(),\n           \"Should support thread-local allocation buffers\");\n    ThreadLocalAllocBuffer::startup_initialization();\n  }\n  return JNI_OK;\n}\n```\n# universe.cpp # create_heap()\n`create_heap()`用于根据GC策略创建堆空间，位于`src/hotspot/share/memory/universe.cpp`\n\n```c\nCollectedHeap* Universe::create_heap() {\n  assert(_collectedHeap == NULL, \"Heap already created\");\n#if !INCLUDE_ALL_GCS\n  if (UseParallelGC) {\n    fatal(\"UseParallelGC not supported in this VM.\");\n  } else if (UseG1GC) {\n    fatal(\"UseG1GC not supported in this VM.\");\n  } else if (UseConcMarkSweepGC) {\n    fatal(\"UseConcMarkSweepGC not supported in this VM.\");\n#else\n  if (UseParallelGC) {\n    return Universe::create_heap_with_policy<ParallelScavengeHeap, GenerationSizer>();\n  } else if (UseG1GC) {\n    // 此处默认使用G1\n    return Universe::create_heap_with_policy<G1CollectedHeap, G1CollectorPolicy>();\n  } else if (UseConcMarkSweepGC) {\n    return Universe::create_heap_with_policy<GenCollectedHeap, ConcurrentMarkSweepPolicy>();\n#endif\n  } else if (UseSerialGC) {\n    return Universe::create_heap_with_policy<GenCollectedHeap, MarkSweepPolicy>();\n  }\n\n  ShouldNotReachHere();\n  return NULL;\n}\n```\n\n# g1CollectedHeap.cpp # G1CollectedHeap::initialize()\n\n堆空间创建完毕，接下来是初始化，从上面`return Universe::create_heap_with_policy<G1CollectedHeap, G1CollectorPolicy>();`可以看出，\n`_collectedHeap`对应的堆实现是`G1CollectedHeap`，位于`src/hotspot/share/gc/g1/g1CollectedHeap.cpp`，\n对应上面的`_collectedHeap->initialize()`，\n\n```c\n// G1CollectedHeap初始化\njint G1CollectedHeap::initialize() {\n  CollectedHeap::pre_initialize();\n  os::enable_vtime();\n\n  // Necessary to satisfy locking discipline assertions.\n\n  MutexLocker x(Heap_lock);\n\n  size_t init_byte_size = collector_policy()->initial_heap_byte_size();\n  size_t max_byte_size = collector_policy()->max_heap_byte_size();\n  size_t heap_alignment = collector_policy()->heap_alignment();\n\n  // 申请Java堆内存及确定CompressedOops模式\n  ReservedSpace heap_rs = Universe::reserve_heap(max_byte_size,\n                                                 heap_alignment);\n\n  // 初始化申请的内存区域\n  initialize_reserved_region((HeapWord*)heap_rs.base(), (HeapWord*)(heap_rs.base() + heap_rs.size()));\n\n  // 为整个保留区域创建barrier\n  // Create the barrier set for the entire reserved region.\n  G1SATBCardTableLoggingModRefBS* bs\n    = new G1SATBCardTableLoggingModRefBS(reserved_region());\n  bs->initialize();\n  assert(bs->is_a(BarrierSet::G1SATBCTLogging), \"sanity\");\n  set_barrier_set(bs);\n\n  // 创建热卡缓存\n  // Create the hot card cache.\n  _hot_card_cache = new G1HotCardCache(this);\n\n  // Carve out the G1 part of the heap.\n  ReservedSpace g1_rs = heap_rs.first_part(max_byte_size);\n  size_t page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();\n  // 创建mapper\n  G1RegionToSpaceMapper* heap_storage =\n    G1RegionToSpaceMapper::create_mapper(g1_rs,\n                                         g1_rs.size(),\n                                         page_size,\n                                         HeapRegion::GrainBytes,\n                                         1,\n                                         mtJavaHeap);\n  os::trace_page_sizes(\"Heap\",\n                       collector_policy()->min_heap_byte_size(),\n                       max_byte_size,\n                       page_size,\n                       heap_rs.base(),\n                       heap_rs.size());\n  heap_storage->set_mapping_changed_listener(&_listener);\n\n  FreeRegionList::set_unrealistically_long_length(max_regions() + 1);\n\n  _bot = new G1BlockOffsetTable(reserved_region(), bot_storage);\n\n  {\n    HeapWord* start = _hrm.reserved().start();\n    HeapWord* end = _hrm.reserved().end();\n    size_t granularity = HeapRegion::GrainBytes;\n\n    _in_cset_fast_test.initialize(start, end, granularity);\n    _humongous_reclaim_candidates.initialize(start, end, granularity);\n  }\n\n  // 创建G1ConcurrentMark数据结构和线程\n  // Create the G1ConcurrentMark data structure and thread.\n  // (Must do this late, so that \"max_regions\" is defined.)\n  _cm = new G1ConcurrentMark(this, prev_bitmap_storage, next_bitmap_storage);\n  if (_cm == NULL || !_cm->completed_initialization()) {\n    vm_shutdown_during_initialization(\"Could not create/initialize G1ConcurrentMark\");\n    return JNI_ENOMEM;\n  }\n  _cmThread = _cm->cmThread();\n\n  // Now expand into the initial heap size.\n  if (!expand(init_byte_size, _workers)) {\n    vm_shutdown_during_initialization(\"Failed to allocate initial heap.\");\n    return JNI_ENOMEM;\n  }\n\n  // 执行委托给内存（G1）策略的所有初始化操作\n  // Perform any initialization actions delegated to the policy.\n  g1_policy()->init(this, &_collection_set);\n\n  JavaThread::satb_mark_queue_set().initialize(SATB_Q_CBL_mon,\n                                               SATB_Q_FL_lock,\n                                               G1SATBProcessCompletedThreshold,\n                                               Shared_SATB_Q_lock);\n\n  jint ecode = initialize_concurrent_refinement();\n  if (ecode != JNI_OK) {\n    return ecode;\n  }\n\n  JavaThread::dirty_card_queue_set().initialize(DirtyCardQ_CBL_mon,\n                                                DirtyCardQ_FL_lock,\n                                                (int)concurrent_g1_refine()->yellow_zone(),\n                                                (int)concurrent_g1_refine()->red_zone(),\n                                                Shared_DirtyCardQ_lock,\n                                                NULL,  // fl_owner\n                                                true); // init_free_ids\n\n  dirty_card_queue_set().initialize(DirtyCardQ_CBL_mon,\n                                    DirtyCardQ_FL_lock,\n                                    -1, // never trigger processing\n                                    -1, // no limit on length\n                                    Shared_DirtyCardQ_lock,\n                                    &JavaThread::dirty_card_queue_set());\n\n  // Here we allocate the dummy HeapRegion that is required by the\n  // G1AllocRegion class.\n  HeapRegion* dummy_region = _hrm.get_dummy_region();\n\n  // We'll re-use the same region whether the alloc region will\n  // require BOT updates or not and, if it doesn't, then a non-young\n  // region will complain that it cannot support allocations without\n  // BOT updates. So we'll tag the dummy region as eden to avoid that.\n  dummy_region->set_eden();\n  // Make sure it's full.\n  dummy_region->set_top(dummy_region->end());\n  G1AllocRegion::setup(this, dummy_region);\n\n  _allocator->init_mutator_alloc_region();\n\n  // Do create of the monitoring and management support so that\n  // values in the heap have been properly initialized.\n  _g1mm = new G1MonitoringSupport(this);\n\n  G1StringDedup::initialize();\n\n  _preserved_marks_set.init(ParallelGCThreads);\n\n  _collection_set.initialize(max_regions());\n\n  return JNI_OK;\n}\n```\n\n\n至此，JVM的整个初始化工作完成，关于GC策略的空间分配具体细节在以后的文章中再详细介绍。\n\n","source":"_posts/2018/02/23/analysis-of-hotspot-jvm-startup-process-initialization.md","raw":"---\ntitle: 【JVM源码探秘】HotSpot启动流程分析-初始化\ndate: 2018-02-23 17:10:35\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n接[上篇](/post/2018/02/23/analysis-of-hotspot-jvm-startup-process-creation/)，HotSpot在启动流程完成了参数的解析、JNI入口的定位、环境变量的设置等一系列操作，\n\n最终在`JavaMain()`中调用了`InitializeJVM()`方法，用于完成虚拟机所需的内存申请、挂载和初始化，本文我们就一起一探究竟。\n\n<!-- more -->\n\n# java.c # InitializeJVM()\n\n```c\n/*\n * Initializes the Java Virtual Machine. Also frees options array when\n * finished.\n */\nstatic jboolean\nInitializeJVM(JavaVM **pvm, JNIEnv **penv, InvocationFunctions *ifn)\n{\n    JavaVMInitArgs args;\n    jint r;\n\n    memset(&args, 0, sizeof(args));\n    args.version  = JNI_VERSION_1_2;\n    args.nOptions = numOptions;\n    args.options  = options;\n    args.ignoreUnrecognized = JNI_FALSE;\n\n    if (JLI_IsTraceLauncher()) {\n        int i = 0;\n        printf(\"JavaVM args:\\n    \");\n        printf(\"version 0x%08lx, \", (long)args.version);\n        printf(\"ignoreUnrecognized is %s, \",\n               args.ignoreUnrecognized ? \"JNI_TRUE\" : \"JNI_FALSE\");\n        printf(\"nOptions is %ld\\n\", (long)args.nOptions);\n        for (i = 0; i < numOptions; i++)\n            printf(\"    option[%2d] = '%s'\\n\",\n                   i, args.options[i].optionString);\n    }\n\n    // 调用JNI_CreateJavaVM方法\n    r = ifn->CreateJavaVM(pvm, (void **)penv, &args);\n    JLI_MemFree(options);\n    return r == JNI_OK;\n}\n```\n# jni.cpp # JNI_CreateJavaVM()\n此处调用了之前加载的JNI_CreateJavaVM方法，位于`src/hotspot/share/prims/jni.cpp`\n\n\n```c\n_JNI_IMPORT_OR_EXPORT_ jint JNICALL JNI_CreateJavaVM(JavaVM **vm, void **penv, void *args) {\n  jint result = JNI_ERR;\n  // On Windows, let CreateJavaVM run with SEH protection\n#ifdef _WIN32\n  __try {\n#endif\n    result = JNI_CreateJavaVM_inner(vm, penv, args);\n#ifdef _WIN32\n  } __except(topLevelExceptionFilter((_EXCEPTION_POINTERS*)_exception_info())) {\n    // Nothing to do.\n  }\n#endif\n  return result;\n}\n```\n\n# jni.cpp # JNI_CreateJavaVM_inner()\n`JNI_CreateJavaVM()`调用了内部方法`JNI_CreateJavaVM_inner()`\n\n\n```c\nstatic jint JNI_CreateJavaVM_inner(JavaVM **vm, void **penv, void *args) {\n  HOTSPOT_JNI_CREATEJAVAVM_ENTRY((void **) vm, penv, args);\n\n  /**\n   * Certain errors during initialization are recoverable and do not\n   * prevent this method from being called again at a later time\n   * (perhaps with different arguments).  However, at a certain\n   * point during initialization if an error occurs we cannot allow\n   * this function to be called again (or it will crash).  In those\n   * situations, the 'canTryAgain' flag is set to false, which atomically\n   * sets safe_to_recreate_vm to 1, such that any new call to\n   * JNI_CreateJavaVM will immediately fail using the above logic.\n   */\n  bool can_try_again = true;\n\n  // =================================\n  //           创建虚拟机\n  // =================================\n  result = Threads::create_vm((JavaVMInitArgs*) args, &can_try_again);\n  \n  // 如果创建成功\n  if (result == JNI_OK) {\n    JavaThread *thread = JavaThread::current();\n    assert(!thread->has_pending_exception(), \"should have returned not OK\");\n    /* thread is thread_in_vm here */\n    *vm = (JavaVM *)(&main_vm);\n    *(JNIEnv**)penv = thread->jni_environment();\n\n    // Tracks the time application was running before GC\n    RuntimeService::record_application_start();\n\n    // Notify JVMTI\n    if (JvmtiExport::should_post_thread_life()) {\n       JvmtiExport::post_thread_start(thread);\n    }\n\n    EventThreadStart event;\n    if (event.should_commit()) {\n      event.set_thread(THREAD_TRACE_ID(thread));\n      event.commit();\n    }\n\n    // Since this is not a JVM_ENTRY we have to set the thread state manually before leaving.\n    ThreadStateTransition::transition_and_fence(thread, _thread_in_vm, _thread_in_native);\n  } \n  // 如果未创建成功\n  else {\n    \n    ....\n    \n  }\n\n  return result;\n\n}\n```\n\n# thread.cpp # Threads::create_vm()\n`Threads::create_vm()`方法位于`src/hotspot/share/runtime/thread.cpp`中\n\n\n\n```c\njint Threads::create_vm(JavaVMInitArgs* args, bool* canTryAgain) {\n  extern void JDK_Version_init();\n\n  // 版本信息初始化\n  VM_Version::early_initialize();\n\n  // 检查JNI版本\n  if (!is_supported_jni_version(args->version)) return JNI_EVERSION;\n\n  // 初始化TLS\n  // Initialize library-based TLS\n  ThreadLocalStorage::init();\n\n  // 初始化系统输出流模块\n  // Initialize the output stream module\n  ostream_init();\n\n  // 处理Java启动参数，如-Dsun.java.launcher*\n  // Process java launcher properties.\n  Arguments::process_sun_java_launcher_properties(args);\n\n  // 初始化操作系统模块，如页大小，处理器数量，系统时钟等\n  // Initialize the os module\n  os::init();\n\n  // 启动VM创建计时器\n  // Record VM creation timing statistics\n  TraceVmCreationTime create_vm_timer;\n  create_vm_timer.start();\n\n  // 初始化系统属性，其中分为【可读属性】和【可读写属性】\n  // 可读属性：\n  // java.vm.specification.name\n  // java.vm.version\n  // java.vm.name\n  // java.vm.info\n  // 可读写属性：\n  // java.ext.dirs\n  // java.endorsed.dirs\n  // sun.boot.library.path\n  // java.library.path\n  // java.home\n  // sun.boot.class.path\n  // java.class.path\n  // Initialize system properties.\n  Arguments::init_system_properties();\n\n  // JDK版本初始化\n  // So that JDK version can be used as a discriminator when parsing arguments\n  JDK_Version_init();\n\n  // 设置java.vm.specification.vendor\n  // java.vm.specification.version和java.vm.vendor属性\n  // Update/Initialize System properties after JDK version number is known\n  Arguments::init_version_specific_system_properties();\n\n  // 初始化日志配置\n  // Make sure to initialize log configuration *before* parsing arguments\n  LogConfiguration::initialize(create_vm_timer.begin_time());\n\n  // 解析启动参数，如-XX:Flags=、-XX:+PrintVMOptions、-XX:+PrintFlagsInitial etc.\n  // Parse arguments\n  jint parse_result = Arguments::parse(args);\n  if (parse_result != JNI_OK) return parse_result;\n\n  os::init_before_ergo();\n\n  // 初始化GC日志输出流，用来处理-Xloggc参数\n  // Initialize output stream logging\n  ostream_init_log();\n\n  // Convert -Xrun to -agentlib: if there is no JVM_OnLoad\n  // Must be before create_vm_init_agents()\n  if (Arguments::init_libraries_at_startup()) {\n    convert_vm_init_libraries_to_agents();\n  }\n\n  // 初始化agent\n  // Launch -agentlib/-agentpath and converted -Xrun agents\n  if (Arguments::init_agents_at_startup()) {\n    create_vm_init_agents();\n  }\n\n  // Initialize Threads state\n  _thread_list = NULL;\n  _number_of_threads = 0;\n  _number_of_non_daemon_threads = 0;\n\n  /*\n   * ========================================\n   * 初始化VM全局数据结构及系统类\n   * ========================================\n   * 初始化Java基础类型\n   * 初始化对象OOP大小\n   * 初始化锁\n   * 初始化chunkpool\n   * 初始化性能数据统计模块\n   * ========================================\n   */\n  // Initialize global data structures and create system classes in heap\n  vm_init_globals();\n\n  // 初始化Java级别的对象同步器子系统\n  // Initialize Java-Level synchronization subsystem\n  ObjectMonitor::Initialize();\n\n  /*\n   * 初始化全局模块\n   * ========================================\n   * 1. 初始化management模块\n   * 2. 初始化字节码/操作符表\n   * 3. 初始化ClassLoader\n   * 4. 根据命令行参数决定编译策略\n   * 5. 代码缓存初始化\n   * 6. 虚拟机版本初始化\n   * 7. OS全局初始化\n   * ....\n   *\n   * ========================================\n   */\n  jint status = init_globals();\n  if (status != JNI_OK) {\n    delete main_thread;\n    *canTryAgain = false; // don't let caller call JNI_CreateJavaVM again\n    return status;\n  }\n\n  if (TRACE_INITIALIZE() != JNI_OK) {\n    vm_exit_during_initialization(\"Failed to initialize tracing backend\");\n  }\n\n  // Should be done after the heap is fully created\n  main_thread->cache_global_variables();\n\n  HandleMark hm;\n\n  { MutexLocker mu(Threads_lock);\n    Threads::add(main_thread);\n  }\n\n  Thread* THREAD = Thread::current();\n\n  // Always call even when there are not JVMTI environments yet, since environments\n  // may be attached late and JVMTI must track phases of VM execution\n  JvmtiExport::enter_early_start_phase();\n\n  // Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.\n  JvmtiExport::post_early_vm_start();\n\n  // 初始化Java的lang包\n  initialize_java_lang_classes(main_thread, CHECK_JNI_ERR);\n\n  // We need this for ClassDataSharing - the initial vm.info property is set\n  // with the default value of CDS \"sharing\" which may be reset through\n  // command line options.\n  reset_vm_info_property(CHECK_JNI_ERR);\n\n  quicken_jni_functions();\n\n  // No more stub generation allowed after that point.\n  StubCodeDesc::freeze();\n\n  // Set flag that basic initialization has completed. Used by exceptions and various\n  // debug stuff, that does not work until all basic classes have been initialized.\n  set_init_completed();\n\n  LogConfiguration::post_initialize();\n  Metaspace::post_initialize();\n\n  HOTSPOT_VM_INIT_END();\n\n  // record VM initialization completion time\n#if INCLUDE_MANAGEMENT\n  Management::record_vm_init_completed();\n#endif // INCLUDE_MANAGEMENT\n\n  // 启动一个叫做“信号分发器”的线程用来处理进程间的信号\n  // 比如通过jstack获取一个jvm实例的栈信息\n  // Signal Dispatcher needs to be started before VMInit event is posted\n  os::signal_init(CHECK_JNI_ERR);\n\n  // Start Attach Listener if +StartAttachListener or it can't be started lazily\n  if (!DisableAttachMechanism) {\n    AttachListener::vm_start();\n    if (StartAttachListener || AttachListener::init_at_startup()) {\n      AttachListener::init();\n    }\n  }\n\n  // Launch -Xrun agents\n  // Must be done in the JVMTI live phase so that for backward compatibility the JDWP\n  // back-end can launch with -Xdebug -Xrunjdwp.\n  if (!EagerXrunInit && Arguments::init_libraries_at_startup()) {\n    create_vm_init_libraries();\n  }\n\n  // 通知JVMTI agents虚拟机初始化开始\n  // Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.\n  JvmtiExport::post_vm_start();\n\n  // Final system initialization including security manager and system class loader\n  call_initPhase3(CHECK_JNI_ERR);\n\n  // cache the system class loader\n  SystemDictionary::compute_java_system_loader(CHECK_(JNI_ERR));\n\n\n  if (MemProfiling)                   MemProfiler::engage();\n  StatSampler::engage();\n  if (CheckJNICalls)                  JniPeriodicChecker::engage();\n\n  // 初始化偏向锁\n  BiasedLocking::init();\n\n  return JNI_OK;\n}\n```\n\n# init.cpp # init_globals()\n`init_globals()`方法用于初始化虚拟机全局模块，位于调用了`src/hotspot/share/runtime/init.cpp`\n\n\n```c\njint init_globals() {\n  HandleMark hm;\n  // 初始化各子系统的监控及管理服务\n  // JMX、线程和同步子系统、类加载子系统的监控和管理\n  management_init();\n  // 初始化字节码表，如istore、iload、iadd\n  bytecodes_init();\n  // 类加载器初始化\n  classLoader_init1();\n  // 初始化编译策略（根据启动参数决定编译策略）\n  compilationPolicy_init();\n  // 代码缓存池初始化\n  codeCache_init();\n  // 虚拟机版本初始化\n  VM_Version_init();\n  // OS全局初始化\n  os_init_globals();\n  stubRoutines_init1();\n  // ============================\n  // 初始化堆以及决定所使用GC策略\n  // ============================\n  jint status = universe_init();  // dependent on codeCache_init and\n                                  // stubRoutines_init1 and metaspace_init.\n  if (status != JNI_OK)\n    return status;\n\n  // 初始化解析器\n  interpreter_init();  // before any methods loaded\n  // 初始化动作触发器\n  invocationCounter_init();  // before any methods loaded\n  // 初始化MarkSweep\n  marksweep_init();\n  // 初始化访问标识\n  accessFlags_init();\n  // 初始化操作码模板表\n  templateTable_init();\n  // 接口支持提供了VM_LEAF_BASE和VM_ENTRY_BASE宏\n  InterfaceSupport_init();\n  SharedRuntime::generate_stubs();\n  // 初始化语法表及系统字典等\n  universe2_init();  // dependent on codeCache_init and stubRoutines_init1\n  // 初始化软引用时间戳表并设定软引用清除策略\n  referenceProcessor_init();\n  jni_handles_init();\n#if INCLUDE_VM_STRUCTS\n  // 代码数据结构的必要性检查（仅限debug版本）\n  vmStructs_init();\n#endif // INCLUDE_VM_STRUCTS\n\n  vtableStubs_init();\n  InlineCacheBuffer_init();\n  // oracle编译器初始化（oracle编译器是一个编译器开关接口）\n  compilerOracle_init();\n  dependencyContext_init();\n\n  if (!compileBroker_init()) {\n    return JNI_EINVAL;\n  }\n  VMRegImpl::set_regName();\n  // 执行初始化\n  if (!universe_post_init()) {\n    return JNI_ERR;\n  }\n  javaClasses_init();   // must happen after vtable initialization\n  stubRoutines_init2(); // note: StubRoutines need 2-phase init\n  MethodHandles::generate_adapters();\n\n#if INCLUDE_NMT\n  // Solaris stack is walkable only after stubRoutines are set up.\n  // On Other platforms, the stack is always walkable.\n  NMT_stack_walkable = true;\n#endif // INCLUDE_NMT\n\n  // All the flags that get adjusted by VM_Version_init and os::init_2\n  // have been set so dump the flags now.\n  if (PrintFlagsFinal || PrintFlagsRanges) {\n    CommandLineFlags::printFlags(tty, false, PrintFlagsRanges);\n  }\n\n  return JNI_OK;\n}\n```\n\n# universe.cpp # universe_init()\n`universe_init()`方法初始化堆以及决定所使用GC策略，位于`src/hotspot/share/memory/universe.cpp`\n\n```c\njint universe_init() {\n  assert(!Universe::_fully_initialized, \"called after initialize_vtables\");\n  guarantee(1 << LogHeapWordSize == sizeof(HeapWord),\n         \"LogHeapWordSize is incorrect.\");\n  guarantee(sizeof(oop) >= sizeof(HeapWord), \"HeapWord larger than oop?\");\n  guarantee(sizeof(oop) % sizeof(HeapWord) == 0,\n            \"oop size is not not a multiple of HeapWord size\");\n\n  TraceTime timer(\"Genesis\", TRACETIME_LOG(Info, startuptime));\n\n  JavaClasses::compute_hard_coded_offsets();\n\n  /*\n   * ==============================================================\n   *                  初始化堆空间\n   * ==============================================================\n   * 在JDK7以前的版本中默认使用CMS收集器，这里会创建及初始化各分区代，设定空间比例大小，回收策略等\n   * 流程：根据启动参数决定使用的回收策略，初始化回收策略时会指定所使用的代规范，\n   * \t  最后根据规范创建对应类型的回收堆。\n   *      i.e. arguments -> policy -> spec -> heap\n   *\n   * 在最新的JDK10中默认使用G1作为默认收集器，在JEP248里就提议，参见http://openjdk.java.net/jeps/248，\n   * 虽然也采用分代算法，但由连续内存的年轻（老）代改为非连续的小块region（单个region连续）\n   * ==============================================================\n   */\n  jint status = Universe::initialize_heap();\n  if (status != JNI_OK) {\n    return status;\n  }\n\n  // 初始化元数据空间\n  // 在JDK8里移除了PermGen，就是加入了它\n  Metaspace::global_initialize();\n\n  // 初始化AOT loader\n  AOTLoader::universe_init();\n\n  // Checks 'AfterMemoryInit' constraints.\n  if (!CommandLineFlagConstraintList::check_constraints(CommandLineFlagConstraint::AfterMemoryInit)) {\n    return JNI_EINVAL;\n  }\n\n  // 为元数据申请内存空间\n  // Create memory for metadata.  Must be after initializing heap for\n  // DumpSharedSpaces.\n  ClassLoaderData::init_null_class_loader_data();\n\n  // We have a heap so create the Method* caches before\n  // Metaspace::initialize_shared_spaces() tries to populate them.\n  Universe::_finalizer_register_cache = new LatestMethodCache();\n  Universe::_loader_addClass_cache    = new LatestMethodCache();\n  Universe::_pd_implies_cache         = new LatestMethodCache();\n  Universe::_throw_illegal_access_error_cache = new LatestMethodCache();\n  Universe::_do_stack_walk_cache = new LatestMethodCache();\n\n#if INCLUDE_CDS\n  if (UseSharedSpaces) {\n    // Read the data structures supporting the shared spaces (shared\n    // system dictionary, symbol table, etc.).  After that, access to\n    // the file (other than the mapped regions) is no longer needed, and\n    // the file is closed. Closing the file does not affect the\n    // currently mapped regions.\n    MetaspaceShared::initialize_shared_spaces();\n    StringTable::create_table();\n  } else\n#endif\n  {\n    // 创建符号表\n    SymbolTable::create_table();\n    // 创建字符串缓存池\n    StringTable::create_table();\n\n#if INCLUDE_CDS\n    if (DumpSharedSpaces) {\n      MetaspaceShared::prepare_for_dumping();\n    }\n#endif\n  }\n  if (strlen(VerifySubSet) > 0) {\n    Universe::initialize_verify_flags();\n  }\n\n  // 创建方法表\n  ResolvedMethodTable::create_table();\n\n  return JNI_OK;\n}\n```\n\n# universe.cpp # initialize_heap()\n`initialize_heap()`方法用于初始化堆空间，位于`src/hotspot/share/memory/universe.cpp`\n```c\n// Choose the heap base address and oop encoding mode\n// when compressed oops are used:\n// Unscaled  - Use 32-bits oops without encoding when\n//     NarrowOopHeapBaseMin + heap_size < 4Gb\n// ZeroBased - Use zero based compressed oops with encoding when\n//     NarrowOopHeapBaseMin + heap_size < 32Gb\n// HeapBased - Use compressed oops with heap base + encoding.\n\njint Universe::initialize_heap() {\n  jint status = JNI_ERR;\n\n\n  // 根据GC策略创建堆空间\n  _collectedHeap = create_heap_ext();\n  if (_collectedHeap == NULL) {\n    _collectedHeap = create_heap();\n  }\n\n  /*\n   * ==========================================\n   *        初始化堆空间\n   * ==========================================\n   * 这里会调用G1CollectedHeap::initialize()方法，\n   * 真正向操作系统申请内存\n   * ==========================================\n   */\n  status = _collectedHeap->initialize();\n  if (status != JNI_OK) {\n    return status;\n  }\n  log_info(gc)(\"Using %s\", _collectedHeap->name());\n\n  ThreadLocalAllocBuffer::set_max_size(Universe::heap()->max_tlab_size());\n\n#ifdef _LP64\n  // 在LP64数据模型下是否开启对象指针压缩\n  if (UseCompressedOops) {\n    // Subtract a page because something can get allocated at heap base.\n    // This also makes implicit null checking work, because the\n    // memory+1 page below heap_base needs to cause a signal.\n    // See needs_explicit_null_check.\n    // Only set the heap base for compressed oops because it indicates\n    // compressed oops for pstack code.\n    if ((uint64_t)Universe::heap()->reserved_region().end() > UnscaledOopHeapMax) {\n      // Didn't reserve heap below 4Gb.  Must shift.\n      Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);\n    }\n    if ((uint64_t)Universe::heap()->reserved_region().end() <= OopEncodingHeapMax) {\n      // Did reserve heap below 32Gb. Can use base == 0;\n      Universe::set_narrow_oop_base(0);\n    }\n\n    Universe::set_narrow_ptrs_base(Universe::narrow_oop_base());\n\n    LogTarget(Info, gc, heap, coops) lt;\n    if (lt.is_enabled()) {\n      ResourceMark rm;\n      LogStream ls(lt);\n      Universe::print_compressed_oops_mode(&ls);\n    }\n\n    // Tell tests in which mode we run.\n    Arguments::PropertyList_add(new SystemProperty(\"java.vm.compressedOopsMode\",\n                                                   narrow_oop_mode_to_string(narrow_oop_mode()),\n                                                   false));\n  }\n  // Universe::narrow_oop_base() is one page below the heap.\n  assert((intptr_t)Universe::narrow_oop_base() <= (intptr_t)(Universe::heap()->base() -\n         os::vm_page_size()) ||\n         Universe::narrow_oop_base() == NULL, \"invalid value\");\n  assert(Universe::narrow_oop_shift() == LogMinObjAlignmentInBytes ||\n         Universe::narrow_oop_shift() == 0, \"invalid value\");\n#endif\n\n  // We will never reach the CATCH below since Exceptions::_throw will cause\n  // the VM to exit if an exception is thrown during initialization\n  // 如果使用TLAB\n  if (UseTLAB) {\n    assert(Universe::heap()->supports_tlab_allocation(),\n           \"Should support thread-local allocation buffers\");\n    ThreadLocalAllocBuffer::startup_initialization();\n  }\n  return JNI_OK;\n}\n```\n# universe.cpp # create_heap()\n`create_heap()`用于根据GC策略创建堆空间，位于`src/hotspot/share/memory/universe.cpp`\n\n```c\nCollectedHeap* Universe::create_heap() {\n  assert(_collectedHeap == NULL, \"Heap already created\");\n#if !INCLUDE_ALL_GCS\n  if (UseParallelGC) {\n    fatal(\"UseParallelGC not supported in this VM.\");\n  } else if (UseG1GC) {\n    fatal(\"UseG1GC not supported in this VM.\");\n  } else if (UseConcMarkSweepGC) {\n    fatal(\"UseConcMarkSweepGC not supported in this VM.\");\n#else\n  if (UseParallelGC) {\n    return Universe::create_heap_with_policy<ParallelScavengeHeap, GenerationSizer>();\n  } else if (UseG1GC) {\n    // 此处默认使用G1\n    return Universe::create_heap_with_policy<G1CollectedHeap, G1CollectorPolicy>();\n  } else if (UseConcMarkSweepGC) {\n    return Universe::create_heap_with_policy<GenCollectedHeap, ConcurrentMarkSweepPolicy>();\n#endif\n  } else if (UseSerialGC) {\n    return Universe::create_heap_with_policy<GenCollectedHeap, MarkSweepPolicy>();\n  }\n\n  ShouldNotReachHere();\n  return NULL;\n}\n```\n\n# g1CollectedHeap.cpp # G1CollectedHeap::initialize()\n\n堆空间创建完毕，接下来是初始化，从上面`return Universe::create_heap_with_policy<G1CollectedHeap, G1CollectorPolicy>();`可以看出，\n`_collectedHeap`对应的堆实现是`G1CollectedHeap`，位于`src/hotspot/share/gc/g1/g1CollectedHeap.cpp`，\n对应上面的`_collectedHeap->initialize()`，\n\n```c\n// G1CollectedHeap初始化\njint G1CollectedHeap::initialize() {\n  CollectedHeap::pre_initialize();\n  os::enable_vtime();\n\n  // Necessary to satisfy locking discipline assertions.\n\n  MutexLocker x(Heap_lock);\n\n  size_t init_byte_size = collector_policy()->initial_heap_byte_size();\n  size_t max_byte_size = collector_policy()->max_heap_byte_size();\n  size_t heap_alignment = collector_policy()->heap_alignment();\n\n  // 申请Java堆内存及确定CompressedOops模式\n  ReservedSpace heap_rs = Universe::reserve_heap(max_byte_size,\n                                                 heap_alignment);\n\n  // 初始化申请的内存区域\n  initialize_reserved_region((HeapWord*)heap_rs.base(), (HeapWord*)(heap_rs.base() + heap_rs.size()));\n\n  // 为整个保留区域创建barrier\n  // Create the barrier set for the entire reserved region.\n  G1SATBCardTableLoggingModRefBS* bs\n    = new G1SATBCardTableLoggingModRefBS(reserved_region());\n  bs->initialize();\n  assert(bs->is_a(BarrierSet::G1SATBCTLogging), \"sanity\");\n  set_barrier_set(bs);\n\n  // 创建热卡缓存\n  // Create the hot card cache.\n  _hot_card_cache = new G1HotCardCache(this);\n\n  // Carve out the G1 part of the heap.\n  ReservedSpace g1_rs = heap_rs.first_part(max_byte_size);\n  size_t page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();\n  // 创建mapper\n  G1RegionToSpaceMapper* heap_storage =\n    G1RegionToSpaceMapper::create_mapper(g1_rs,\n                                         g1_rs.size(),\n                                         page_size,\n                                         HeapRegion::GrainBytes,\n                                         1,\n                                         mtJavaHeap);\n  os::trace_page_sizes(\"Heap\",\n                       collector_policy()->min_heap_byte_size(),\n                       max_byte_size,\n                       page_size,\n                       heap_rs.base(),\n                       heap_rs.size());\n  heap_storage->set_mapping_changed_listener(&_listener);\n\n  FreeRegionList::set_unrealistically_long_length(max_regions() + 1);\n\n  _bot = new G1BlockOffsetTable(reserved_region(), bot_storage);\n\n  {\n    HeapWord* start = _hrm.reserved().start();\n    HeapWord* end = _hrm.reserved().end();\n    size_t granularity = HeapRegion::GrainBytes;\n\n    _in_cset_fast_test.initialize(start, end, granularity);\n    _humongous_reclaim_candidates.initialize(start, end, granularity);\n  }\n\n  // 创建G1ConcurrentMark数据结构和线程\n  // Create the G1ConcurrentMark data structure and thread.\n  // (Must do this late, so that \"max_regions\" is defined.)\n  _cm = new G1ConcurrentMark(this, prev_bitmap_storage, next_bitmap_storage);\n  if (_cm == NULL || !_cm->completed_initialization()) {\n    vm_shutdown_during_initialization(\"Could not create/initialize G1ConcurrentMark\");\n    return JNI_ENOMEM;\n  }\n  _cmThread = _cm->cmThread();\n\n  // Now expand into the initial heap size.\n  if (!expand(init_byte_size, _workers)) {\n    vm_shutdown_during_initialization(\"Failed to allocate initial heap.\");\n    return JNI_ENOMEM;\n  }\n\n  // 执行委托给内存（G1）策略的所有初始化操作\n  // Perform any initialization actions delegated to the policy.\n  g1_policy()->init(this, &_collection_set);\n\n  JavaThread::satb_mark_queue_set().initialize(SATB_Q_CBL_mon,\n                                               SATB_Q_FL_lock,\n                                               G1SATBProcessCompletedThreshold,\n                                               Shared_SATB_Q_lock);\n\n  jint ecode = initialize_concurrent_refinement();\n  if (ecode != JNI_OK) {\n    return ecode;\n  }\n\n  JavaThread::dirty_card_queue_set().initialize(DirtyCardQ_CBL_mon,\n                                                DirtyCardQ_FL_lock,\n                                                (int)concurrent_g1_refine()->yellow_zone(),\n                                                (int)concurrent_g1_refine()->red_zone(),\n                                                Shared_DirtyCardQ_lock,\n                                                NULL,  // fl_owner\n                                                true); // init_free_ids\n\n  dirty_card_queue_set().initialize(DirtyCardQ_CBL_mon,\n                                    DirtyCardQ_FL_lock,\n                                    -1, // never trigger processing\n                                    -1, // no limit on length\n                                    Shared_DirtyCardQ_lock,\n                                    &JavaThread::dirty_card_queue_set());\n\n  // Here we allocate the dummy HeapRegion that is required by the\n  // G1AllocRegion class.\n  HeapRegion* dummy_region = _hrm.get_dummy_region();\n\n  // We'll re-use the same region whether the alloc region will\n  // require BOT updates or not and, if it doesn't, then a non-young\n  // region will complain that it cannot support allocations without\n  // BOT updates. So we'll tag the dummy region as eden to avoid that.\n  dummy_region->set_eden();\n  // Make sure it's full.\n  dummy_region->set_top(dummy_region->end());\n  G1AllocRegion::setup(this, dummy_region);\n\n  _allocator->init_mutator_alloc_region();\n\n  // Do create of the monitoring and management support so that\n  // values in the heap have been properly initialized.\n  _g1mm = new G1MonitoringSupport(this);\n\n  G1StringDedup::initialize();\n\n  _preserved_marks_set.init(ParallelGCThreads);\n\n  _collection_set.initialize(max_regions());\n\n  return JNI_OK;\n}\n```\n\n\n至此，JVM的整个初始化工作完成，关于GC策略的空间分配具体细节在以后的文章中再详细介绍。\n\n","slug":"analysis-of-hotspot-jvm-startup-process-initialization","published":1,"updated":"2018-05-20T16:55:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2h001m2zs6e6lligic","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>接<a href=\"/post/2018/02/23/analysis-of-hotspot-jvm-startup-process-creation/\">上篇</a>，HotSpot在启动流程完成了参数的解析、JNI入口的定位、环境变量的设置等一系列操作，</p>\n<p>最终在<code>JavaMain()</code>中调用了<code>InitializeJVM()</code>方法，用于完成虚拟机所需的内存申请、挂载和初始化，本文我们就一起一探究竟。</p>\n<a id=\"more\"></a>\n<h1 id=\"java-c-InitializeJVM\"><a href=\"#java-c-InitializeJVM\" class=\"headerlink\" title=\"java.c # InitializeJVM()\"></a>java.c # InitializeJVM()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Initializes the Java Virtual Machine. Also frees options array when</span></span><br><span class=\"line\"><span class=\"comment\"> * finished.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> jboolean</span><br><span class=\"line\">InitializeJVM(JavaVM **pvm, JNIEnv **penv, InvocationFunctions *ifn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JavaVMInitArgs args;</span><br><span class=\"line\">    jint r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;args, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(args));</span><br><span class=\"line\">    args.version  = JNI_VERSION_1_2;</span><br><span class=\"line\">    args.nOptions = numOptions;</span><br><span class=\"line\">    args.options  = options;</span><br><span class=\"line\">    args.ignoreUnrecognized = JNI_FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"JavaVM args:\\n    \"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"version 0x%08lx, \"</span>, (<span class=\"keyword\">long</span>)args.version);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"ignoreUnrecognized is %s, \"</span>,</span><br><span class=\"line\">               args.ignoreUnrecognized ? <span class=\"string\">\"JNI_TRUE\"</span> : <span class=\"string\">\"JNI_FALSE\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"nOptions is %ld\\n\"</span>, (<span class=\"keyword\">long</span>)args.nOptions);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; numOptions; i++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"    option[%2d] = '%s'\\n\"</span>,</span><br><span class=\"line\">                   i, args.options[i].optionString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用JNI_CreateJavaVM方法</span></span><br><span class=\"line\">    r = ifn-&gt;CreateJavaVM(pvm, (<span class=\"keyword\">void</span> **)penv, &amp;args);</span><br><span class=\"line\">    JLI_MemFree(options);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r == JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jni-cpp-JNI-CreateJavaVM\"><a href=\"#jni-cpp-JNI-CreateJavaVM\" class=\"headerlink\" title=\"jni.cpp # JNI_CreateJavaVM()\"></a>jni.cpp # JNI_CreateJavaVM()</h1><p>此处调用了之前加载的JNI_CreateJavaVM方法，位于<code>src/hotspot/share/prims/jni.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"function\">JNI_IMPORT_OR_EXPORT_ jint JNICALL <span class=\"title\">JNI_CreateJavaVM</span><span class=\"params\">(JavaVM **vm, <span class=\"keyword\">void</span> **penv, <span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">  jint result = JNI_ERR;</span><br><span class=\"line\">  <span class=\"comment\">// On Windows, let CreateJavaVM run with SEH protection</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN32</span></span><br><span class=\"line\">  __try &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    result = JNI_CreateJavaVM_inner(vm, penv, args);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN32</span></span><br><span class=\"line\">  &#125; __except(topLevelExceptionFilter((_EXCEPTION_POINTERS*)_exception_info())) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Nothing to do.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jni-cpp-JNI-CreateJavaVM-inner\"><a href=\"#jni-cpp-JNI-CreateJavaVM-inner\" class=\"headerlink\" title=\"jni.cpp # JNI_CreateJavaVM_inner()\"></a>jni.cpp # JNI_CreateJavaVM_inner()</h1><p><code>JNI_CreateJavaVM()</code>调用了内部方法<code>JNI_CreateJavaVM_inner()</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> jint <span class=\"title\">JNI_CreateJavaVM_inner</span><span class=\"params\">(JavaVM **vm, <span class=\"keyword\">void</span> **penv, <span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">  HOTSPOT_JNI_CREATEJAVAVM_ENTRY((<span class=\"keyword\">void</span> **) vm, penv, args);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Certain errors during initialization are recoverable and do not</span></span><br><span class=\"line\"><span class=\"comment\">   * prevent this method from being called again at a later time</span></span><br><span class=\"line\"><span class=\"comment\">   * (perhaps with different arguments).  However, at a certain</span></span><br><span class=\"line\"><span class=\"comment\">   * point during initialization if an error occurs we cannot allow</span></span><br><span class=\"line\"><span class=\"comment\">   * this function to be called again (or it will crash).  In those</span></span><br><span class=\"line\"><span class=\"comment\">   * situations, the 'canTryAgain' flag is set to false, which atomically</span></span><br><span class=\"line\"><span class=\"comment\">   * sets safe_to_recreate_vm to 1, such that any new call to</span></span><br><span class=\"line\"><span class=\"comment\">   * JNI_CreateJavaVM will immediately fail using the above logic.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> can_try_again = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// =================================</span></span><br><span class=\"line\">  <span class=\"comment\">//           创建虚拟机</span></span><br><span class=\"line\">  <span class=\"comment\">// =================================</span></span><br><span class=\"line\">  result = Threads::create_vm((JavaVMInitArgs*) args, &amp;can_try_again);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 如果创建成功</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result == JNI_OK) &#123;</span><br><span class=\"line\">    JavaThread *thread = JavaThread::current();</span><br><span class=\"line\">    assert(!thread-&gt;has_pending_exception(), <span class=\"string\">\"should have returned not OK\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* thread is thread_in_vm here */</span></span><br><span class=\"line\">    *vm = (JavaVM *)(&amp;main_vm);</span><br><span class=\"line\">    *(JNIEnv**)penv = thread-&gt;jni_environment();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Tracks the time application was running before GC</span></span><br><span class=\"line\">    RuntimeService::record_application_start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Notify JVMTI</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JvmtiExport::should_post_thread_life()) &#123;</span><br><span class=\"line\">       JvmtiExport::post_thread_start(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    EventThreadStart event;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.should_commit()) &#123;</span><br><span class=\"line\">      event.set_thread(THREAD_TRACE_ID(thread));</span><br><span class=\"line\">      event.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Since this is not a JVM_ENTRY we have to set the thread state manually before leaving.</span></span><br><span class=\"line\">    ThreadStateTransition::transition_and_fence(thread, _thread_in_vm, _thread_in_native);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">// 如果未创建成功</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"thread-cpp-Threads-create-vm\"><a href=\"#thread-cpp-Threads-create-vm\" class=\"headerlink\" title=\"thread.cpp # Threads::create_vm()\"></a>thread.cpp # Threads::create_vm()</h1><p><code>Threads::create_vm()</code>方法位于<code>src/hotspot/share/runtime/thread.cpp</code>中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint Threads::create_vm(JavaVMInitArgs* args, <span class=\"keyword\">bool</span>* canTryAgain) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">JDK_Version_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 版本信息初始化</span></span><br><span class=\"line\">  VM_Version::early_initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查JNI版本</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!is_supported_jni_version(args-&gt;version)) <span class=\"keyword\">return</span> JNI_EVERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化TLS</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize library-based TLS</span></span><br><span class=\"line\">  ThreadLocalStorage::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化系统输出流模块</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the output stream module</span></span><br><span class=\"line\">  ostream_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理Java启动参数，如-Dsun.java.launcher*</span></span><br><span class=\"line\">  <span class=\"comment\">// Process java launcher properties.</span></span><br><span class=\"line\">  Arguments::process_sun_java_launcher_properties(args);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化操作系统模块，如页大小，处理器数量，系统时钟等</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the os module</span></span><br><span class=\"line\">  os::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 启动VM创建计时器</span></span><br><span class=\"line\">  <span class=\"comment\">// Record VM creation timing statistics</span></span><br><span class=\"line\">  TraceVmCreationTime create_vm_timer;</span><br><span class=\"line\">  create_vm_timer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化系统属性，其中分为【可读属性】和【可读写属性】</span></span><br><span class=\"line\">  <span class=\"comment\">// 可读属性：</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.specification.name</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.version</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.name</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.info</span></span><br><span class=\"line\">  <span class=\"comment\">// 可读写属性：</span></span><br><span class=\"line\">  <span class=\"comment\">// java.ext.dirs</span></span><br><span class=\"line\">  <span class=\"comment\">// java.endorsed.dirs</span></span><br><span class=\"line\">  <span class=\"comment\">// sun.boot.library.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.library.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.home</span></span><br><span class=\"line\">  <span class=\"comment\">// sun.boot.class.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.class.path</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize system properties.</span></span><br><span class=\"line\">  Arguments::init_system_properties();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// JDK版本初始化</span></span><br><span class=\"line\">  <span class=\"comment\">// So that JDK version can be used as a discriminator when parsing arguments</span></span><br><span class=\"line\">  JDK_Version_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置java.vm.specification.vendor</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.specification.version和java.vm.vendor属性</span></span><br><span class=\"line\">  <span class=\"comment\">// Update/Initialize System properties after JDK version number is known</span></span><br><span class=\"line\">  Arguments::init_version_specific_system_properties();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化日志配置</span></span><br><span class=\"line\">  <span class=\"comment\">// Make sure to initialize log configuration *before* parsing arguments</span></span><br><span class=\"line\">  LogConfiguration::initialize(create_vm_timer.begin_time());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析启动参数，如-XX:Flags=、-XX:+PrintVMOptions、-XX:+PrintFlagsInitial etc.</span></span><br><span class=\"line\">  <span class=\"comment\">// Parse arguments</span></span><br><span class=\"line\">  jint parse_result = Arguments::parse(args);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parse_result != JNI_OK) <span class=\"keyword\">return</span> parse_result;</span><br><span class=\"line\"></span><br><span class=\"line\">  os::init_before_ergo();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化GC日志输出流，用来处理-Xloggc参数</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize output stream logging</span></span><br><span class=\"line\">  ostream_init_log();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Convert -Xrun to -agentlib: if there is no JVM_OnLoad</span></span><br><span class=\"line\">  <span class=\"comment\">// Must be before create_vm_init_agents()</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">    convert_vm_init_libraries_to_agents();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化agent</span></span><br><span class=\"line\">  <span class=\"comment\">// Launch -agentlib/-agentpath and converted -Xrun agents</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::init_agents_at_startup()) &#123;</span><br><span class=\"line\">    create_vm_init_agents();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize Threads state</span></span><br><span class=\"line\">  _thread_list = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  _number_of_threads = <span class=\"number\">0</span>;</span><br><span class=\"line\">  _number_of_non_daemon_threads = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化VM全局数据结构及系统类</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化Java基础类型</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化对象OOP大小</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化锁</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化chunkpool</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化性能数据统计模块</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize global data structures and create system classes in heap</span></span><br><span class=\"line\">  vm_init_globals();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化Java级别的对象同步器子系统</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize Java-Level synchronization subsystem</span></span><br><span class=\"line\">  ObjectMonitor::Initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化全局模块</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 1. 初始化management模块</span></span><br><span class=\"line\"><span class=\"comment\">   * 2. 初始化字节码/操作符表</span></span><br><span class=\"line\"><span class=\"comment\">   * 3. 初始化ClassLoader</span></span><br><span class=\"line\"><span class=\"comment\">   * 4. 根据命令行参数决定编译策略</span></span><br><span class=\"line\"><span class=\"comment\">   * 5. 代码缓存初始化</span></span><br><span class=\"line\"><span class=\"comment\">   * 6. 虚拟机版本初始化</span></span><br><span class=\"line\"><span class=\"comment\">   * 7. OS全局初始化</span></span><br><span class=\"line\"><span class=\"comment\">   * ....</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  jint status = init_globals();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> main_thread;</span><br><span class=\"line\">    *canTryAgain = <span class=\"literal\">false</span>; <span class=\"comment\">// don't let caller call JNI_CreateJavaVM again</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (TRACE_INITIALIZE() != JNI_OK) &#123;</span><br><span class=\"line\">    vm_exit_during_initialization(<span class=\"string\">\"Failed to initialize tracing backend\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Should be done after the heap is fully created</span></span><br><span class=\"line\">  main_thread-&gt;cache_global_variables();</span><br><span class=\"line\"></span><br><span class=\"line\">  HandleMark hm;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123; <span class=\"function\">MutexLocker <span class=\"title\">mu</span><span class=\"params\">(Threads_lock)</span></span>;</span><br><span class=\"line\">    Threads::add(main_thread);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Thread* THREAD = Thread::current();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Always call even when there are not JVMTI environments yet, since environments</span></span><br><span class=\"line\">  <span class=\"comment\">// may be attached late and JVMTI must track phases of VM execution</span></span><br><span class=\"line\">  JvmtiExport::enter_early_start_phase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.</span></span><br><span class=\"line\">  JvmtiExport::post_early_vm_start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化Java的lang包</span></span><br><span class=\"line\">  initialize_java_lang_classes(main_thread, CHECK_JNI_ERR);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We need this for ClassDataSharing - the initial vm.info property is set</span></span><br><span class=\"line\">  <span class=\"comment\">// with the default value of CDS \"sharing\" which may be reset through</span></span><br><span class=\"line\">  <span class=\"comment\">// command line options.</span></span><br><span class=\"line\">  reset_vm_info_property(CHECK_JNI_ERR);</span><br><span class=\"line\"></span><br><span class=\"line\">  quicken_jni_functions();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// No more stub generation allowed after that point.</span></span><br><span class=\"line\">  StubCodeDesc::freeze();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Set flag that basic initialization has completed. Used by exceptions and various</span></span><br><span class=\"line\">  <span class=\"comment\">// debug stuff, that does not work until all basic classes have been initialized.</span></span><br><span class=\"line\">  set_init_completed();</span><br><span class=\"line\"></span><br><span class=\"line\">  LogConfiguration::post_initialize();</span><br><span class=\"line\">  Metaspace::post_initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  HOTSPOT_VM_INIT_END();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// record VM initialization completion time</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_MANAGEMENT</span></span><br><span class=\"line\">  Management::record_vm_init_completed();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// INCLUDE_MANAGEMENT</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 启动一个叫做“信号分发器”的线程用来处理进程间的信号</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如通过jstack获取一个jvm实例的栈信息</span></span><br><span class=\"line\">  <span class=\"comment\">// Signal Dispatcher needs to be started before VMInit event is posted</span></span><br><span class=\"line\">  os::signal_init(CHECK_JNI_ERR);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Start Attach Listener if +StartAttachListener or it can't be started lazily</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!DisableAttachMechanism) &#123;</span><br><span class=\"line\">    AttachListener::vm_start();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StartAttachListener || AttachListener::init_at_startup()) &#123;</span><br><span class=\"line\">      AttachListener::init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Launch -Xrun agents</span></span><br><span class=\"line\">  <span class=\"comment\">// Must be done in the JVMTI live phase so that for backward compatibility the JDWP</span></span><br><span class=\"line\">  <span class=\"comment\">// back-end can launch with -Xdebug -Xrunjdwp.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!EagerXrunInit &amp;&amp; Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">    create_vm_init_libraries();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通知JVMTI agents虚拟机初始化开始</span></span><br><span class=\"line\">  <span class=\"comment\">// Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.</span></span><br><span class=\"line\">  JvmtiExport::post_vm_start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Final system initialization including security manager and system class loader</span></span><br><span class=\"line\">  call_initPhase3(CHECK_JNI_ERR);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cache the system class loader</span></span><br><span class=\"line\">  SystemDictionary::compute_java_system_loader(CHECK_(JNI_ERR));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (MemProfiling)                   MemProfiler::engage();</span><br><span class=\"line\">  StatSampler::engage();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (CheckJNICalls)                  JniPeriodicChecker::engage();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化偏向锁</span></span><br><span class=\"line\">  BiasedLocking::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"init-cpp-init-globals\"><a href=\"#init-cpp-init-globals\" class=\"headerlink\" title=\"init.cpp # init_globals()\"></a>init.cpp # init_globals()</h1><p><code>init_globals()</code>方法用于初始化虚拟机全局模块，位于调用了<code>src/hotspot/share/runtime/init.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jint <span class=\"title\">init_globals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  HandleMark hm;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化各子系统的监控及管理服务</span></span><br><span class=\"line\">  <span class=\"comment\">// JMX、线程和同步子系统、类加载子系统的监控和管理</span></span><br><span class=\"line\">  management_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化字节码表，如istore、iload、iadd</span></span><br><span class=\"line\">  bytecodes_init();</span><br><span class=\"line\">  <span class=\"comment\">// 类加载器初始化</span></span><br><span class=\"line\">  classLoader_init1();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化编译策略（根据启动参数决定编译策略）</span></span><br><span class=\"line\">  compilationPolicy_init();</span><br><span class=\"line\">  <span class=\"comment\">// 代码缓存池初始化</span></span><br><span class=\"line\">  codeCache_init();</span><br><span class=\"line\">  <span class=\"comment\">// 虚拟机版本初始化</span></span><br><span class=\"line\">  VM_Version_init();</span><br><span class=\"line\">  <span class=\"comment\">// OS全局初始化</span></span><br><span class=\"line\">  os_init_globals();</span><br><span class=\"line\">  stubRoutines_init1();</span><br><span class=\"line\">  <span class=\"comment\">// ============================</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化堆以及决定所使用GC策略</span></span><br><span class=\"line\">  <span class=\"comment\">// ============================</span></span><br><span class=\"line\">  jint status = universe_init();  <span class=\"comment\">// dependent on codeCache_init and</span></span><br><span class=\"line\">                                  <span class=\"comment\">// stubRoutines_init1 and metaspace_init.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化解析器</span></span><br><span class=\"line\">  interpreter_init();  <span class=\"comment\">// before any methods loaded</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化动作触发器</span></span><br><span class=\"line\">  invocationCounter_init();  <span class=\"comment\">// before any methods loaded</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化MarkSweep</span></span><br><span class=\"line\">  marksweep_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化访问标识</span></span><br><span class=\"line\">  accessFlags_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化操作码模板表</span></span><br><span class=\"line\">  templateTable_init();</span><br><span class=\"line\">  <span class=\"comment\">// 接口支持提供了VM_LEAF_BASE和VM_ENTRY_BASE宏</span></span><br><span class=\"line\">  InterfaceSupport_init();</span><br><span class=\"line\">  SharedRuntime::generate_stubs();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化语法表及系统字典等</span></span><br><span class=\"line\">  universe2_init();  <span class=\"comment\">// dependent on codeCache_init and stubRoutines_init1</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化软引用时间戳表并设定软引用清除策略</span></span><br><span class=\"line\">  referenceProcessor_init();</span><br><span class=\"line\">  jni_handles_init();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_VM_STRUCTS</span></span><br><span class=\"line\">  <span class=\"comment\">// 代码数据结构的必要性检查（仅限debug版本）</span></span><br><span class=\"line\">  vmStructs_init();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// INCLUDE_VM_STRUCTS</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  vtableStubs_init();</span><br><span class=\"line\">  InlineCacheBuffer_init();</span><br><span class=\"line\">  <span class=\"comment\">// oracle编译器初始化（oracle编译器是一个编译器开关接口）</span></span><br><span class=\"line\">  compilerOracle_init();</span><br><span class=\"line\">  dependencyContext_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!compileBroker_init()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_EINVAL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  VMRegImpl::set_regName();</span><br><span class=\"line\">  <span class=\"comment\">// 执行初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!universe_post_init()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ERR;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  javaClasses_init();   <span class=\"comment\">// must happen after vtable initialization</span></span><br><span class=\"line\">  stubRoutines_init2(); <span class=\"comment\">// note: StubRoutines need 2-phase init</span></span><br><span class=\"line\">  MethodHandles::generate_adapters();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_NMT</span></span><br><span class=\"line\">  <span class=\"comment\">// Solaris stack is walkable only after stubRoutines are set up.</span></span><br><span class=\"line\">  <span class=\"comment\">// On Other platforms, the stack is always walkable.</span></span><br><span class=\"line\">  NMT_stack_walkable = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// INCLUDE_NMT</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All the flags that get adjusted by VM_Version_init and os::init_2</span></span><br><span class=\"line\">  <span class=\"comment\">// have been set so dump the flags now.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (PrintFlagsFinal || PrintFlagsRanges) &#123;</span><br><span class=\"line\">    CommandLineFlags::printFlags(tty, <span class=\"literal\">false</span>, PrintFlagsRanges);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"universe-cpp-universe-init\"><a href=\"#universe-cpp-universe-init\" class=\"headerlink\" title=\"universe.cpp # universe_init()\"></a>universe.cpp # universe_init()</h1><p><code>universe_init()</code>方法初始化堆以及决定所使用GC策略，位于<code>src/hotspot/share/memory/universe.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jint <span class=\"title\">universe_init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  assert(!Universe::_fully_initialized, <span class=\"string\">\"called after initialize_vtables\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"number\">1</span> &lt;&lt; LogHeapWordSize == <span class=\"keyword\">sizeof</span>(HeapWord),</span><br><span class=\"line\">         <span class=\"string\">\"LogHeapWordSize is incorrect.\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"keyword\">sizeof</span>(oop) &gt;= <span class=\"keyword\">sizeof</span>(HeapWord), <span class=\"string\">\"HeapWord larger than oop?\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"keyword\">sizeof</span>(oop) % <span class=\"keyword\">sizeof</span>(HeapWord) == <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"oop size is not not a multiple of HeapWord size\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  TraceTime timer(\"Genesis\", TRACETIME_LOG(Info, startuptime));</span><br><span class=\"line\"></span><br><span class=\"line\">  JavaClasses::compute_hard_coded_offsets();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * ==============================================================</span></span><br><span class=\"line\"><span class=\"comment\">   *                  初始化堆空间</span></span><br><span class=\"line\"><span class=\"comment\">   * ==============================================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 在JDK7以前的版本中默认使用CMS收集器，这里会创建及初始化各分区代，设定空间比例大小，回收策略等</span></span><br><span class=\"line\"><span class=\"comment\">   * 流程：根据启动参数决定使用的回收策略，初始化回收策略时会指定所使用的代规范，</span></span><br><span class=\"line\"><span class=\"comment\">   * \t  最后根据规范创建对应类型的回收堆。</span></span><br><span class=\"line\"><span class=\"comment\">   *      i.e. arguments -&gt; policy -&gt; spec -&gt; heap</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * 在最新的JDK10中默认使用G1作为默认收集器，在JEP248里就提议，参见http://openjdk.java.net/jeps/248，</span></span><br><span class=\"line\"><span class=\"comment\">   * 虽然也采用分代算法，但由连续内存的年轻（老）代改为非连续的小块region（单个region连续）</span></span><br><span class=\"line\"><span class=\"comment\">   * ==============================================================</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  jint status = Universe::initialize_heap();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化元数据空间</span></span><br><span class=\"line\">  <span class=\"comment\">// 在JDK8里移除了PermGen，就是加入了它</span></span><br><span class=\"line\">  Metaspace::global_initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化AOT loader</span></span><br><span class=\"line\">  AOTLoader::universe_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Checks 'AfterMemoryInit' constraints.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!CommandLineFlagConstraintList::check_constraints(CommandLineFlagConstraint::AfterMemoryInit)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_EINVAL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 为元数据申请内存空间</span></span><br><span class=\"line\">  <span class=\"comment\">// Create memory for metadata.  Must be after initializing heap for</span></span><br><span class=\"line\">  <span class=\"comment\">// DumpSharedSpaces.</span></span><br><span class=\"line\">  ClassLoaderData::init_null_class_loader_data();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We have a heap so create the Method* caches before</span></span><br><span class=\"line\">  <span class=\"comment\">// Metaspace::initialize_shared_spaces() tries to populate them.</span></span><br><span class=\"line\">  Universe::_finalizer_register_cache = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\">  Universe::_loader_addClass_cache    = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\">  Universe::_pd_implies_cache         = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\">  Universe::_throw_illegal_access_error_cache = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\">  Universe::_do_stack_walk_cache = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_CDS</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseSharedSpaces) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Read the data structures supporting the shared spaces (shared</span></span><br><span class=\"line\">    <span class=\"comment\">// system dictionary, symbol table, etc.).  After that, access to</span></span><br><span class=\"line\">    <span class=\"comment\">// the file (other than the mapped regions) is no longer needed, and</span></span><br><span class=\"line\">    <span class=\"comment\">// the file is closed. Closing the file does not affect the</span></span><br><span class=\"line\">    <span class=\"comment\">// currently mapped regions.</span></span><br><span class=\"line\">    MetaspaceShared::initialize_shared_spaces();</span><br><span class=\"line\">    StringTable::create_table();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">#endif</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建符号表</span></span><br><span class=\"line\">    SymbolTable::create_table();</span><br><span class=\"line\">    <span class=\"comment\">// 创建字符串缓存池</span></span><br><span class=\"line\">    StringTable::create_table();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_CDS</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DumpSharedSpaces) &#123;</span><br><span class=\"line\">      MetaspaceShared::prepare_for_dumping();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(VerifySubSet) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    Universe::initialize_verify_flags();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建方法表</span></span><br><span class=\"line\">  ResolvedMethodTable::create_table();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"universe-cpp-initialize-heap\"><a href=\"#universe-cpp-initialize-heap\" class=\"headerlink\" title=\"universe.cpp # initialize_heap()\"></a>universe.cpp # initialize_heap()</h1><p><code>initialize_heap()</code>方法用于初始化堆空间，位于<code>src/hotspot/share/memory/universe.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Choose the heap base address and oop encoding mode</span></span><br><span class=\"line\"><span class=\"comment\">// when compressed oops are used:</span></span><br><span class=\"line\"><span class=\"comment\">// Unscaled  - Use 32-bits oops without encoding when</span></span><br><span class=\"line\"><span class=\"comment\">//     NarrowOopHeapBaseMin + heap_size &lt; 4Gb</span></span><br><span class=\"line\"><span class=\"comment\">// ZeroBased - Use zero based compressed oops with encoding when</span></span><br><span class=\"line\"><span class=\"comment\">//     NarrowOopHeapBaseMin + heap_size &lt; 32Gb</span></span><br><span class=\"line\"><span class=\"comment\">// HeapBased - Use compressed oops with heap base + encoding.</span></span><br><span class=\"line\"></span><br><span class=\"line\">jint Universe::initialize_heap() &#123;</span><br><span class=\"line\">  jint status = JNI_ERR;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据GC策略创建堆空间</span></span><br><span class=\"line\">  _collectedHeap = create_heap_ext();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_collectedHeap == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    _collectedHeap = create_heap();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * ==========================================</span></span><br><span class=\"line\"><span class=\"comment\">   *        初始化堆空间</span></span><br><span class=\"line\"><span class=\"comment\">   * ==========================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 这里会调用G1CollectedHeap::initialize()方法，</span></span><br><span class=\"line\"><span class=\"comment\">   * 真正向操作系统申请内存</span></span><br><span class=\"line\"><span class=\"comment\">   * ==========================================</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  status = _collectedHeap-&gt;initialize();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log_info(gc)(<span class=\"string\">\"Using %s\"</span>, _collectedHeap-&gt;name());</span><br><span class=\"line\"></span><br><span class=\"line\">  ThreadLocalAllocBuffer::set_max_size(Universe::heap()-&gt;max_tlab_size());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _LP64</span></span><br><span class=\"line\">  <span class=\"comment\">// 在LP64数据模型下是否开启对象指针压缩</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseCompressedOops) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Subtract a page because something can get allocated at heap base.</span></span><br><span class=\"line\">    <span class=\"comment\">// This also makes implicit null checking work, because the</span></span><br><span class=\"line\">    <span class=\"comment\">// memory+1 page below heap_base needs to cause a signal.</span></span><br><span class=\"line\">    <span class=\"comment\">// See needs_explicit_null_check.</span></span><br><span class=\"line\">    <span class=\"comment\">// Only set the heap base for compressed oops because it indicates</span></span><br><span class=\"line\">    <span class=\"comment\">// compressed oops for pstack code.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">uint64_t</span>)Universe::heap()-&gt;reserved_region().end() &gt; UnscaledOopHeapMax) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Didn't reserve heap below 4Gb.  Must shift.</span></span><br><span class=\"line\">      Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">uint64_t</span>)Universe::heap()-&gt;reserved_region().end() &lt;= OopEncodingHeapMax) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Did reserve heap below 32Gb. Can use base == 0;</span></span><br><span class=\"line\">      Universe::set_narrow_oop_base(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Universe::set_narrow_ptrs_base(Universe::narrow_oop_base());</span><br><span class=\"line\"></span><br><span class=\"line\">    LogTarget(Info, gc, heap, coops) lt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lt.is_enabled()) &#123;</span><br><span class=\"line\">      ResourceMark rm;</span><br><span class=\"line\">      <span class=\"function\">LogStream <span class=\"title\">ls</span><span class=\"params\">(lt)</span></span>;</span><br><span class=\"line\">      Universe::print_compressed_oops_mode(&amp;ls);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Tell tests in which mode we run.</span></span><br><span class=\"line\">    Arguments::PropertyList_add(<span class=\"keyword\">new</span> SystemProperty(<span class=\"string\">\"java.vm.compressedOopsMode\"</span>,</span><br><span class=\"line\">                                                   narrow_oop_mode_to_string(narrow_oop_mode()),</span><br><span class=\"line\">                                                   <span class=\"literal\">false</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Universe::narrow_oop_base() is one page below the heap.</span></span><br><span class=\"line\">  assert((<span class=\"keyword\">intptr_t</span>)Universe::narrow_oop_base() &lt;= (<span class=\"keyword\">intptr_t</span>)(Universe::heap()-&gt;base() -</span><br><span class=\"line\">         os::vm_page_size()) ||</span><br><span class=\"line\">         Universe::narrow_oop_base() == <span class=\"literal\">NULL</span>, <span class=\"string\">\"invalid value\"</span>);</span><br><span class=\"line\">  assert(Universe::narrow_oop_shift() == LogMinObjAlignmentInBytes ||</span><br><span class=\"line\">         Universe::narrow_oop_shift() == <span class=\"number\">0</span>, <span class=\"string\">\"invalid value\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We will never reach the CATCH below since Exceptions::_throw will cause</span></span><br><span class=\"line\">  <span class=\"comment\">// the VM to exit if an exception is thrown during initialization</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果使用TLAB</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseTLAB) &#123;</span><br><span class=\"line\">    assert(Universe::heap()-&gt;supports_tlab_allocation(),</span><br><span class=\"line\">           <span class=\"string\">\"Should support thread-local allocation buffers\"</span>);</span><br><span class=\"line\">    ThreadLocalAllocBuffer::startup_initialization();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"universe-cpp-create-heap\"><a href=\"#universe-cpp-create-heap\" class=\"headerlink\" title=\"universe.cpp # create_heap()\"></a>universe.cpp # create_heap()</h1><p><code>create_heap()</code>用于根据GC策略创建堆空间，位于<code>src/hotspot/share/memory/universe.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CollectedHeap* Universe::create_heap() &#123;</span><br><span class=\"line\">  assert(_collectedHeap == <span class=\"literal\">NULL</span>, <span class=\"string\">\"Heap already created\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !INCLUDE_ALL_GCS</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseParallelGC) &#123;</span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseParallelGC not supported in this VM.\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseG1GC) &#123;</span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseG1GC not supported in this VM.\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseConcMarkSweepGC not supported in this VM.\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseParallelGC) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Universe::create_heap_with_policy&lt;ParallelScavengeHeap, GenerationSizer&gt;();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseG1GC) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处默认使用G1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Universe::create_heap_with_policy&lt;G1CollectedHeap, G1CollectorPolicy&gt;();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Universe::create_heap_with_policy&lt;GenCollectedHeap, ConcurrentMarkSweepPolicy&gt;();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseSerialGC) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Universe::create_heap_with_policy&lt;GenCollectedHeap, MarkSweepPolicy&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ShouldNotReachHere();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"g1CollectedHeap-cpp-G1CollectedHeap-initialize\"><a href=\"#g1CollectedHeap-cpp-G1CollectedHeap-initialize\" class=\"headerlink\" title=\"g1CollectedHeap.cpp # G1CollectedHeap::initialize()\"></a>g1CollectedHeap.cpp # G1CollectedHeap::initialize()</h1><p>堆空间创建完毕，接下来是初始化，从上面<code>return Universe::create_heap_with_policy&lt;G1CollectedHeap, G1CollectorPolicy&gt;();</code>可以看出，<br><code>_collectedHeap</code>对应的堆实现是<code>G1CollectedHeap</code>，位于<code>src/hotspot/share/gc/g1/g1CollectedHeap.cpp</code>，<br>对应上面的<code>_collectedHeap-&gt;initialize()</code>，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// G1CollectedHeap初始化</span></span><br><span class=\"line\">jint G1CollectedHeap::initialize() &#123;</span><br><span class=\"line\">  CollectedHeap::pre_initialize();</span><br><span class=\"line\">  os::enable_vtime();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Necessary to satisfy locking discipline assertions.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">MutexLocker <span class=\"title\">x</span><span class=\"params\">(Heap_lock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> init_byte_size = collector_policy()-&gt;initial_heap_byte_size();</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> max_byte_size = collector_policy()-&gt;max_heap_byte_size();</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> heap_alignment = collector_policy()-&gt;heap_alignment();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 申请Java堆内存及确定CompressedOops模式</span></span><br><span class=\"line\">  ReservedSpace heap_rs = Universe::reserve_heap(max_byte_size,</span><br><span class=\"line\">                                                 heap_alignment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化申请的内存区域</span></span><br><span class=\"line\">  initialize_reserved_region((HeapWord*)heap_rs.base(), (HeapWord*)(heap_rs.base() + heap_rs.size()));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 为整个保留区域创建barrier</span></span><br><span class=\"line\">  <span class=\"comment\">// Create the barrier set for the entire reserved region.</span></span><br><span class=\"line\">  G1SATBCardTableLoggingModRefBS* bs</span><br><span class=\"line\">    = <span class=\"keyword\">new</span> G1SATBCardTableLoggingModRefBS(reserved_region());</span><br><span class=\"line\">  bs-&gt;initialize();</span><br><span class=\"line\">  assert(bs-&gt;is_a(BarrierSet::G1SATBCTLogging), <span class=\"string\">\"sanity\"</span>);</span><br><span class=\"line\">  set_barrier_set(bs);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建热卡缓存</span></span><br><span class=\"line\">  <span class=\"comment\">// Create the hot card cache.</span></span><br><span class=\"line\">  _hot_card_cache = <span class=\"keyword\">new</span> G1HotCardCache(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Carve out the G1 part of the heap.</span></span><br><span class=\"line\">  ReservedSpace g1_rs = heap_rs.first_part(max_byte_size);</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();</span><br><span class=\"line\">  <span class=\"comment\">// 创建mapper</span></span><br><span class=\"line\">  G1RegionToSpaceMapper* heap_storage =</span><br><span class=\"line\">    G1RegionToSpaceMapper::create_mapper(g1_rs,</span><br><span class=\"line\">                                         g1_rs.size(),</span><br><span class=\"line\">                                         page_size,</span><br><span class=\"line\">                                         HeapRegion::GrainBytes,</span><br><span class=\"line\">                                         <span class=\"number\">1</span>,</span><br><span class=\"line\">                                         mtJavaHeap);</span><br><span class=\"line\">  os::trace_page_sizes(<span class=\"string\">\"Heap\"</span>,</span><br><span class=\"line\">                       collector_policy()-&gt;min_heap_byte_size(),</span><br><span class=\"line\">                       max_byte_size,</span><br><span class=\"line\">                       page_size,</span><br><span class=\"line\">                       heap_rs.base(),</span><br><span class=\"line\">                       heap_rs.size());</span><br><span class=\"line\">  heap_storage-&gt;set_mapping_changed_listener(&amp;_listener);</span><br><span class=\"line\"></span><br><span class=\"line\">  FreeRegionList::set_unrealistically_long_length(max_regions() + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  _bot = <span class=\"keyword\">new</span> G1BlockOffsetTable(reserved_region(), bot_storage);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    HeapWord* start = _hrm.reserved().start();</span><br><span class=\"line\">    HeapWord* end = _hrm.reserved().end();</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> granularity = HeapRegion::GrainBytes;</span><br><span class=\"line\"></span><br><span class=\"line\">    _in_cset_fast_test.initialize(start, end, granularity);</span><br><span class=\"line\">    _humongous_reclaim_candidates.initialize(start, end, granularity);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建G1ConcurrentMark数据结构和线程</span></span><br><span class=\"line\">  <span class=\"comment\">// Create the G1ConcurrentMark data structure and thread.</span></span><br><span class=\"line\">  <span class=\"comment\">// (Must do this late, so that \"max_regions\" is defined.)</span></span><br><span class=\"line\">  _cm = <span class=\"keyword\">new</span> G1ConcurrentMark(<span class=\"keyword\">this</span>, prev_bitmap_storage, next_bitmap_storage);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_cm == <span class=\"literal\">NULL</span> || !_cm-&gt;completed_initialization()) &#123;</span><br><span class=\"line\">    vm_shutdown_during_initialization(<span class=\"string\">\"Could not create/initialize G1ConcurrentMark\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _cmThread = _cm-&gt;cmThread();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Now expand into the initial heap size.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!expand(init_byte_size, _workers)) &#123;</span><br><span class=\"line\">    vm_shutdown_during_initialization(<span class=\"string\">\"Failed to allocate initial heap.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行委托给内存（G1）策略的所有初始化操作</span></span><br><span class=\"line\">  <span class=\"comment\">// Perform any initialization actions delegated to the policy.</span></span><br><span class=\"line\">  g1_policy()-&gt;init(<span class=\"keyword\">this</span>, &amp;_collection_set);</span><br><span class=\"line\"></span><br><span class=\"line\">  JavaThread::satb_mark_queue_set().initialize(SATB_Q_CBL_mon,</span><br><span class=\"line\">                                               SATB_Q_FL_lock,</span><br><span class=\"line\">                                               G1SATBProcessCompletedThreshold,</span><br><span class=\"line\">                                               Shared_SATB_Q_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">  jint ecode = initialize_concurrent_refinement();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ecode != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ecode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  JavaThread::dirty_card_queue_set().initialize(DirtyCardQ_CBL_mon,</span><br><span class=\"line\">                                                DirtyCardQ_FL_lock,</span><br><span class=\"line\">                                                (<span class=\"keyword\">int</span>)concurrent_g1_refine()-&gt;yellow_zone(),</span><br><span class=\"line\">                                                (<span class=\"keyword\">int</span>)concurrent_g1_refine()-&gt;red_zone(),</span><br><span class=\"line\">                                                Shared_DirtyCardQ_lock,</span><br><span class=\"line\">                                                <span class=\"literal\">NULL</span>,  <span class=\"comment\">// fl_owner</span></span><br><span class=\"line\">                                                <span class=\"literal\">true</span>); <span class=\"comment\">// init_free_ids</span></span><br><span class=\"line\"></span><br><span class=\"line\">  dirty_card_queue_set().initialize(DirtyCardQ_CBL_mon,</span><br><span class=\"line\">                                    DirtyCardQ_FL_lock,</span><br><span class=\"line\">                                    <span class=\"number\">-1</span>, <span class=\"comment\">// never trigger processing</span></span><br><span class=\"line\">                                    <span class=\"number\">-1</span>, <span class=\"comment\">// no limit on length</span></span><br><span class=\"line\">                                    Shared_DirtyCardQ_lock,</span><br><span class=\"line\">                                    &amp;JavaThread::dirty_card_queue_set());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Here we allocate the dummy HeapRegion that is required by the</span></span><br><span class=\"line\">  <span class=\"comment\">// G1AllocRegion class.</span></span><br><span class=\"line\">  HeapRegion* dummy_region = _hrm.get_dummy_region();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We'll re-use the same region whether the alloc region will</span></span><br><span class=\"line\">  <span class=\"comment\">// require BOT updates or not and, if it doesn't, then a non-young</span></span><br><span class=\"line\">  <span class=\"comment\">// region will complain that it cannot support allocations without</span></span><br><span class=\"line\">  <span class=\"comment\">// BOT updates. So we'll tag the dummy region as eden to avoid that.</span></span><br><span class=\"line\">  dummy_region-&gt;set_eden();</span><br><span class=\"line\">  <span class=\"comment\">// Make sure it's full.</span></span><br><span class=\"line\">  dummy_region-&gt;set_top(dummy_region-&gt;end());</span><br><span class=\"line\">  G1AllocRegion::setup(<span class=\"keyword\">this</span>, dummy_region);</span><br><span class=\"line\"></span><br><span class=\"line\">  _allocator-&gt;init_mutator_alloc_region();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Do create of the monitoring and management support so that</span></span><br><span class=\"line\">  <span class=\"comment\">// values in the heap have been properly initialized.</span></span><br><span class=\"line\">  _g1mm = <span class=\"keyword\">new</span> G1MonitoringSupport(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  G1StringDedup::initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  _preserved_marks_set.init(ParallelGCThreads);</span><br><span class=\"line\"></span><br><span class=\"line\">  _collection_set.initialize(max_regions());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，JVM的整个初始化工作完成，关于GC策略的空间分配具体细节在以后的文章中再详细介绍。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>接<a href=\"/post/2018/02/23/analysis-of-hotspot-jvm-startup-process-creation/\">上篇</a>，HotSpot在启动流程完成了参数的解析、JNI入口的定位、环境变量的设置等一系列操作，</p>\n<p>最终在<code>JavaMain()</code>中调用了<code>InitializeJVM()</code>方法，用于完成虚拟机所需的内存申请、挂载和初始化，本文我们就一起一探究竟。</p>","more":"<h1 id=\"java-c-InitializeJVM\"><a href=\"#java-c-InitializeJVM\" class=\"headerlink\" title=\"java.c # InitializeJVM()\"></a>java.c # InitializeJVM()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Initializes the Java Virtual Machine. Also frees options array when</span></span><br><span class=\"line\"><span class=\"comment\"> * finished.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> jboolean</span><br><span class=\"line\">InitializeJVM(JavaVM **pvm, JNIEnv **penv, InvocationFunctions *ifn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JavaVMInitArgs args;</span><br><span class=\"line\">    jint r;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;args, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(args));</span><br><span class=\"line\">    args.version  = JNI_VERSION_1_2;</span><br><span class=\"line\">    args.nOptions = numOptions;</span><br><span class=\"line\">    args.options  = options;</span><br><span class=\"line\">    args.ignoreUnrecognized = JNI_FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JLI_IsTraceLauncher()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"JavaVM args:\\n    \"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"version 0x%08lx, \"</span>, (<span class=\"keyword\">long</span>)args.version);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"ignoreUnrecognized is %s, \"</span>,</span><br><span class=\"line\">               args.ignoreUnrecognized ? <span class=\"string\">\"JNI_TRUE\"</span> : <span class=\"string\">\"JNI_FALSE\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"nOptions is %ld\\n\"</span>, (<span class=\"keyword\">long</span>)args.nOptions);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; numOptions; i++)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"    option[%2d] = '%s'\\n\"</span>,</span><br><span class=\"line\">                   i, args.options[i].optionString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用JNI_CreateJavaVM方法</span></span><br><span class=\"line\">    r = ifn-&gt;CreateJavaVM(pvm, (<span class=\"keyword\">void</span> **)penv, &amp;args);</span><br><span class=\"line\">    JLI_MemFree(options);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r == JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jni-cpp-JNI-CreateJavaVM\"><a href=\"#jni-cpp-JNI-CreateJavaVM\" class=\"headerlink\" title=\"jni.cpp # JNI_CreateJavaVM()\"></a>jni.cpp # JNI_CreateJavaVM()</h1><p>此处调用了之前加载的JNI_CreateJavaVM方法，位于<code>src/hotspot/share/prims/jni.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_<span class=\"function\">JNI_IMPORT_OR_EXPORT_ jint JNICALL <span class=\"title\">JNI_CreateJavaVM</span><span class=\"params\">(JavaVM **vm, <span class=\"keyword\">void</span> **penv, <span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">  jint result = JNI_ERR;</span><br><span class=\"line\">  <span class=\"comment\">// On Windows, let CreateJavaVM run with SEH protection</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN32</span></span><br><span class=\"line\">  __try &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    result = JNI_CreateJavaVM_inner(vm, penv, args);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _WIN32</span></span><br><span class=\"line\">  &#125; __except(topLevelExceptionFilter((_EXCEPTION_POINTERS*)_exception_info())) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Nothing to do.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jni-cpp-JNI-CreateJavaVM-inner\"><a href=\"#jni-cpp-JNI-CreateJavaVM-inner\" class=\"headerlink\" title=\"jni.cpp # JNI_CreateJavaVM_inner()\"></a>jni.cpp # JNI_CreateJavaVM_inner()</h1><p><code>JNI_CreateJavaVM()</code>调用了内部方法<code>JNI_CreateJavaVM_inner()</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> jint <span class=\"title\">JNI_CreateJavaVM_inner</span><span class=\"params\">(JavaVM **vm, <span class=\"keyword\">void</span> **penv, <span class=\"keyword\">void</span> *args)</span> </span>&#123;</span><br><span class=\"line\">  HOTSPOT_JNI_CREATEJAVAVM_ENTRY((<span class=\"keyword\">void</span> **) vm, penv, args);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Certain errors during initialization are recoverable and do not</span></span><br><span class=\"line\"><span class=\"comment\">   * prevent this method from being called again at a later time</span></span><br><span class=\"line\"><span class=\"comment\">   * (perhaps with different arguments).  However, at a certain</span></span><br><span class=\"line\"><span class=\"comment\">   * point during initialization if an error occurs we cannot allow</span></span><br><span class=\"line\"><span class=\"comment\">   * this function to be called again (or it will crash).  In those</span></span><br><span class=\"line\"><span class=\"comment\">   * situations, the 'canTryAgain' flag is set to false, which atomically</span></span><br><span class=\"line\"><span class=\"comment\">   * sets safe_to_recreate_vm to 1, such that any new call to</span></span><br><span class=\"line\"><span class=\"comment\">   * JNI_CreateJavaVM will immediately fail using the above logic.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> can_try_again = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// =================================</span></span><br><span class=\"line\">  <span class=\"comment\">//           创建虚拟机</span></span><br><span class=\"line\">  <span class=\"comment\">// =================================</span></span><br><span class=\"line\">  result = Threads::create_vm((JavaVMInitArgs*) args, &amp;can_try_again);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 如果创建成功</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result == JNI_OK) &#123;</span><br><span class=\"line\">    JavaThread *thread = JavaThread::current();</span><br><span class=\"line\">    assert(!thread-&gt;has_pending_exception(), <span class=\"string\">\"should have returned not OK\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* thread is thread_in_vm here */</span></span><br><span class=\"line\">    *vm = (JavaVM *)(&amp;main_vm);</span><br><span class=\"line\">    *(JNIEnv**)penv = thread-&gt;jni_environment();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Tracks the time application was running before GC</span></span><br><span class=\"line\">    RuntimeService::record_application_start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Notify JVMTI</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (JvmtiExport::should_post_thread_life()) &#123;</span><br><span class=\"line\">       JvmtiExport::post_thread_start(thread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    EventThreadStart event;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.should_commit()) &#123;</span><br><span class=\"line\">      event.set_thread(THREAD_TRACE_ID(thread));</span><br><span class=\"line\">      event.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Since this is not a JVM_ENTRY we have to set the thread state manually before leaving.</span></span><br><span class=\"line\">    ThreadStateTransition::transition_and_fence(thread, _thread_in_vm, _thread_in_native);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">// 如果未创建成功</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ....</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"thread-cpp-Threads-create-vm\"><a href=\"#thread-cpp-Threads-create-vm\" class=\"headerlink\" title=\"thread.cpp # Threads::create_vm()\"></a>thread.cpp # Threads::create_vm()</h1><p><code>Threads::create_vm()</code>方法位于<code>src/hotspot/share/runtime/thread.cpp</code>中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jint Threads::create_vm(JavaVMInitArgs* args, <span class=\"keyword\">bool</span>* canTryAgain) &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">JDK_Version_init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 版本信息初始化</span></span><br><span class=\"line\">  VM_Version::early_initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 检查JNI版本</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!is_supported_jni_version(args-&gt;version)) <span class=\"keyword\">return</span> JNI_EVERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化TLS</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize library-based TLS</span></span><br><span class=\"line\">  ThreadLocalStorage::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化系统输出流模块</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the output stream module</span></span><br><span class=\"line\">  ostream_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理Java启动参数，如-Dsun.java.launcher*</span></span><br><span class=\"line\">  <span class=\"comment\">// Process java launcher properties.</span></span><br><span class=\"line\">  Arguments::process_sun_java_launcher_properties(args);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化操作系统模块，如页大小，处理器数量，系统时钟等</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the os module</span></span><br><span class=\"line\">  os::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 启动VM创建计时器</span></span><br><span class=\"line\">  <span class=\"comment\">// Record VM creation timing statistics</span></span><br><span class=\"line\">  TraceVmCreationTime create_vm_timer;</span><br><span class=\"line\">  create_vm_timer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化系统属性，其中分为【可读属性】和【可读写属性】</span></span><br><span class=\"line\">  <span class=\"comment\">// 可读属性：</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.specification.name</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.version</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.name</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.info</span></span><br><span class=\"line\">  <span class=\"comment\">// 可读写属性：</span></span><br><span class=\"line\">  <span class=\"comment\">// java.ext.dirs</span></span><br><span class=\"line\">  <span class=\"comment\">// java.endorsed.dirs</span></span><br><span class=\"line\">  <span class=\"comment\">// sun.boot.library.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.library.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.home</span></span><br><span class=\"line\">  <span class=\"comment\">// sun.boot.class.path</span></span><br><span class=\"line\">  <span class=\"comment\">// java.class.path</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize system properties.</span></span><br><span class=\"line\">  Arguments::init_system_properties();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// JDK版本初始化</span></span><br><span class=\"line\">  <span class=\"comment\">// So that JDK version can be used as a discriminator when parsing arguments</span></span><br><span class=\"line\">  JDK_Version_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置java.vm.specification.vendor</span></span><br><span class=\"line\">  <span class=\"comment\">// java.vm.specification.version和java.vm.vendor属性</span></span><br><span class=\"line\">  <span class=\"comment\">// Update/Initialize System properties after JDK version number is known</span></span><br><span class=\"line\">  Arguments::init_version_specific_system_properties();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化日志配置</span></span><br><span class=\"line\">  <span class=\"comment\">// Make sure to initialize log configuration *before* parsing arguments</span></span><br><span class=\"line\">  LogConfiguration::initialize(create_vm_timer.begin_time());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 解析启动参数，如-XX:Flags=、-XX:+PrintVMOptions、-XX:+PrintFlagsInitial etc.</span></span><br><span class=\"line\">  <span class=\"comment\">// Parse arguments</span></span><br><span class=\"line\">  jint parse_result = Arguments::parse(args);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parse_result != JNI_OK) <span class=\"keyword\">return</span> parse_result;</span><br><span class=\"line\"></span><br><span class=\"line\">  os::init_before_ergo();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化GC日志输出流，用来处理-Xloggc参数</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize output stream logging</span></span><br><span class=\"line\">  ostream_init_log();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Convert -Xrun to -agentlib: if there is no JVM_OnLoad</span></span><br><span class=\"line\">  <span class=\"comment\">// Must be before create_vm_init_agents()</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">    convert_vm_init_libraries_to_agents();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化agent</span></span><br><span class=\"line\">  <span class=\"comment\">// Launch -agentlib/-agentpath and converted -Xrun agents</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Arguments::init_agents_at_startup()) &#123;</span><br><span class=\"line\">    create_vm_init_agents();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize Threads state</span></span><br><span class=\"line\">  _thread_list = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  _number_of_threads = <span class=\"number\">0</span>;</span><br><span class=\"line\">  _number_of_non_daemon_threads = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化VM全局数据结构及系统类</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化Java基础类型</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化对象OOP大小</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化锁</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化chunkpool</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化性能数据统计模块</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize global data structures and create system classes in heap</span></span><br><span class=\"line\">  vm_init_globals();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化Java级别的对象同步器子系统</span></span><br><span class=\"line\">  <span class=\"comment\">// Initialize Java-Level synchronization subsystem</span></span><br><span class=\"line\">  ObjectMonitor::Initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * 初始化全局模块</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 1. 初始化management模块</span></span><br><span class=\"line\"><span class=\"comment\">   * 2. 初始化字节码/操作符表</span></span><br><span class=\"line\"><span class=\"comment\">   * 3. 初始化ClassLoader</span></span><br><span class=\"line\"><span class=\"comment\">   * 4. 根据命令行参数决定编译策略</span></span><br><span class=\"line\"><span class=\"comment\">   * 5. 代码缓存初始化</span></span><br><span class=\"line\"><span class=\"comment\">   * 6. 虚拟机版本初始化</span></span><br><span class=\"line\"><span class=\"comment\">   * 7. OS全局初始化</span></span><br><span class=\"line\"><span class=\"comment\">   * ....</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * ========================================</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  jint status = init_globals();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> main_thread;</span><br><span class=\"line\">    *canTryAgain = <span class=\"literal\">false</span>; <span class=\"comment\">// don't let caller call JNI_CreateJavaVM again</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (TRACE_INITIALIZE() != JNI_OK) &#123;</span><br><span class=\"line\">    vm_exit_during_initialization(<span class=\"string\">\"Failed to initialize tracing backend\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Should be done after the heap is fully created</span></span><br><span class=\"line\">  main_thread-&gt;cache_global_variables();</span><br><span class=\"line\"></span><br><span class=\"line\">  HandleMark hm;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123; <span class=\"function\">MutexLocker <span class=\"title\">mu</span><span class=\"params\">(Threads_lock)</span></span>;</span><br><span class=\"line\">    Threads::add(main_thread);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Thread* THREAD = Thread::current();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Always call even when there are not JVMTI environments yet, since environments</span></span><br><span class=\"line\">  <span class=\"comment\">// may be attached late and JVMTI must track phases of VM execution</span></span><br><span class=\"line\">  JvmtiExport::enter_early_start_phase();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.</span></span><br><span class=\"line\">  JvmtiExport::post_early_vm_start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化Java的lang包</span></span><br><span class=\"line\">  initialize_java_lang_classes(main_thread, CHECK_JNI_ERR);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We need this for ClassDataSharing - the initial vm.info property is set</span></span><br><span class=\"line\">  <span class=\"comment\">// with the default value of CDS \"sharing\" which may be reset through</span></span><br><span class=\"line\">  <span class=\"comment\">// command line options.</span></span><br><span class=\"line\">  reset_vm_info_property(CHECK_JNI_ERR);</span><br><span class=\"line\"></span><br><span class=\"line\">  quicken_jni_functions();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// No more stub generation allowed after that point.</span></span><br><span class=\"line\">  StubCodeDesc::freeze();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Set flag that basic initialization has completed. Used by exceptions and various</span></span><br><span class=\"line\">  <span class=\"comment\">// debug stuff, that does not work until all basic classes have been initialized.</span></span><br><span class=\"line\">  set_init_completed();</span><br><span class=\"line\"></span><br><span class=\"line\">  LogConfiguration::post_initialize();</span><br><span class=\"line\">  Metaspace::post_initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  HOTSPOT_VM_INIT_END();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// record VM initialization completion time</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_MANAGEMENT</span></span><br><span class=\"line\">  Management::record_vm_init_completed();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// INCLUDE_MANAGEMENT</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 启动一个叫做“信号分发器”的线程用来处理进程间的信号</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如通过jstack获取一个jvm实例的栈信息</span></span><br><span class=\"line\">  <span class=\"comment\">// Signal Dispatcher needs to be started before VMInit event is posted</span></span><br><span class=\"line\">  os::signal_init(CHECK_JNI_ERR);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Start Attach Listener if +StartAttachListener or it can't be started lazily</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!DisableAttachMechanism) &#123;</span><br><span class=\"line\">    AttachListener::vm_start();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StartAttachListener || AttachListener::init_at_startup()) &#123;</span><br><span class=\"line\">      AttachListener::init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Launch -Xrun agents</span></span><br><span class=\"line\">  <span class=\"comment\">// Must be done in the JVMTI live phase so that for backward compatibility the JDWP</span></span><br><span class=\"line\">  <span class=\"comment\">// back-end can launch with -Xdebug -Xrunjdwp.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!EagerXrunInit &amp;&amp; Arguments::init_libraries_at_startup()) &#123;</span><br><span class=\"line\">    create_vm_init_libraries();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 通知JVMTI agents虚拟机初始化开始</span></span><br><span class=\"line\">  <span class=\"comment\">// Notify JVMTI agents that VM has started (JNI is up) - nop if no agents.</span></span><br><span class=\"line\">  JvmtiExport::post_vm_start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Final system initialization including security manager and system class loader</span></span><br><span class=\"line\">  call_initPhase3(CHECK_JNI_ERR);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cache the system class loader</span></span><br><span class=\"line\">  SystemDictionary::compute_java_system_loader(CHECK_(JNI_ERR));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (MemProfiling)                   MemProfiler::engage();</span><br><span class=\"line\">  StatSampler::engage();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (CheckJNICalls)                  JniPeriodicChecker::engage();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化偏向锁</span></span><br><span class=\"line\">  BiasedLocking::init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"init-cpp-init-globals\"><a href=\"#init-cpp-init-globals\" class=\"headerlink\" title=\"init.cpp # init_globals()\"></a>init.cpp # init_globals()</h1><p><code>init_globals()</code>方法用于初始化虚拟机全局模块，位于调用了<code>src/hotspot/share/runtime/init.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jint <span class=\"title\">init_globals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  HandleMark hm;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化各子系统的监控及管理服务</span></span><br><span class=\"line\">  <span class=\"comment\">// JMX、线程和同步子系统、类加载子系统的监控和管理</span></span><br><span class=\"line\">  management_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化字节码表，如istore、iload、iadd</span></span><br><span class=\"line\">  bytecodes_init();</span><br><span class=\"line\">  <span class=\"comment\">// 类加载器初始化</span></span><br><span class=\"line\">  classLoader_init1();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化编译策略（根据启动参数决定编译策略）</span></span><br><span class=\"line\">  compilationPolicy_init();</span><br><span class=\"line\">  <span class=\"comment\">// 代码缓存池初始化</span></span><br><span class=\"line\">  codeCache_init();</span><br><span class=\"line\">  <span class=\"comment\">// 虚拟机版本初始化</span></span><br><span class=\"line\">  VM_Version_init();</span><br><span class=\"line\">  <span class=\"comment\">// OS全局初始化</span></span><br><span class=\"line\">  os_init_globals();</span><br><span class=\"line\">  stubRoutines_init1();</span><br><span class=\"line\">  <span class=\"comment\">// ============================</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化堆以及决定所使用GC策略</span></span><br><span class=\"line\">  <span class=\"comment\">// ============================</span></span><br><span class=\"line\">  jint status = universe_init();  <span class=\"comment\">// dependent on codeCache_init and</span></span><br><span class=\"line\">                                  <span class=\"comment\">// stubRoutines_init1 and metaspace_init.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化解析器</span></span><br><span class=\"line\">  interpreter_init();  <span class=\"comment\">// before any methods loaded</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化动作触发器</span></span><br><span class=\"line\">  invocationCounter_init();  <span class=\"comment\">// before any methods loaded</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化MarkSweep</span></span><br><span class=\"line\">  marksweep_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化访问标识</span></span><br><span class=\"line\">  accessFlags_init();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化操作码模板表</span></span><br><span class=\"line\">  templateTable_init();</span><br><span class=\"line\">  <span class=\"comment\">// 接口支持提供了VM_LEAF_BASE和VM_ENTRY_BASE宏</span></span><br><span class=\"line\">  InterfaceSupport_init();</span><br><span class=\"line\">  SharedRuntime::generate_stubs();</span><br><span class=\"line\">  <span class=\"comment\">// 初始化语法表及系统字典等</span></span><br><span class=\"line\">  universe2_init();  <span class=\"comment\">// dependent on codeCache_init and stubRoutines_init1</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化软引用时间戳表并设定软引用清除策略</span></span><br><span class=\"line\">  referenceProcessor_init();</span><br><span class=\"line\">  jni_handles_init();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_VM_STRUCTS</span></span><br><span class=\"line\">  <span class=\"comment\">// 代码数据结构的必要性检查（仅限debug版本）</span></span><br><span class=\"line\">  vmStructs_init();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// INCLUDE_VM_STRUCTS</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  vtableStubs_init();</span><br><span class=\"line\">  InlineCacheBuffer_init();</span><br><span class=\"line\">  <span class=\"comment\">// oracle编译器初始化（oracle编译器是一个编译器开关接口）</span></span><br><span class=\"line\">  compilerOracle_init();</span><br><span class=\"line\">  dependencyContext_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!compileBroker_init()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_EINVAL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  VMRegImpl::set_regName();</span><br><span class=\"line\">  <span class=\"comment\">// 执行初始化</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!universe_post_init()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ERR;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  javaClasses_init();   <span class=\"comment\">// must happen after vtable initialization</span></span><br><span class=\"line\">  stubRoutines_init2(); <span class=\"comment\">// note: StubRoutines need 2-phase init</span></span><br><span class=\"line\">  MethodHandles::generate_adapters();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_NMT</span></span><br><span class=\"line\">  <span class=\"comment\">// Solaris stack is walkable only after stubRoutines are set up.</span></span><br><span class=\"line\">  <span class=\"comment\">// On Other platforms, the stack is always walkable.</span></span><br><span class=\"line\">  NMT_stack_walkable = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// INCLUDE_NMT</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All the flags that get adjusted by VM_Version_init and os::init_2</span></span><br><span class=\"line\">  <span class=\"comment\">// have been set so dump the flags now.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (PrintFlagsFinal || PrintFlagsRanges) &#123;</span><br><span class=\"line\">    CommandLineFlags::printFlags(tty, <span class=\"literal\">false</span>, PrintFlagsRanges);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"universe-cpp-universe-init\"><a href=\"#universe-cpp-universe-init\" class=\"headerlink\" title=\"universe.cpp # universe_init()\"></a>universe.cpp # universe_init()</h1><p><code>universe_init()</code>方法初始化堆以及决定所使用GC策略，位于<code>src/hotspot/share/memory/universe.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">jint <span class=\"title\">universe_init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  assert(!Universe::_fully_initialized, <span class=\"string\">\"called after initialize_vtables\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"number\">1</span> &lt;&lt; LogHeapWordSize == <span class=\"keyword\">sizeof</span>(HeapWord),</span><br><span class=\"line\">         <span class=\"string\">\"LogHeapWordSize is incorrect.\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"keyword\">sizeof</span>(oop) &gt;= <span class=\"keyword\">sizeof</span>(HeapWord), <span class=\"string\">\"HeapWord larger than oop?\"</span>);</span><br><span class=\"line\">  guarantee(<span class=\"keyword\">sizeof</span>(oop) % <span class=\"keyword\">sizeof</span>(HeapWord) == <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"oop size is not not a multiple of HeapWord size\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  TraceTime timer(\"Genesis\", TRACETIME_LOG(Info, startuptime));</span><br><span class=\"line\"></span><br><span class=\"line\">  JavaClasses::compute_hard_coded_offsets();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * ==============================================================</span></span><br><span class=\"line\"><span class=\"comment\">   *                  初始化堆空间</span></span><br><span class=\"line\"><span class=\"comment\">   * ==============================================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 在JDK7以前的版本中默认使用CMS收集器，这里会创建及初始化各分区代，设定空间比例大小，回收策略等</span></span><br><span class=\"line\"><span class=\"comment\">   * 流程：根据启动参数决定使用的回收策略，初始化回收策略时会指定所使用的代规范，</span></span><br><span class=\"line\"><span class=\"comment\">   * \t  最后根据规范创建对应类型的回收堆。</span></span><br><span class=\"line\"><span class=\"comment\">   *      i.e. arguments -&gt; policy -&gt; spec -&gt; heap</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * 在最新的JDK10中默认使用G1作为默认收集器，在JEP248里就提议，参见http://openjdk.java.net/jeps/248，</span></span><br><span class=\"line\"><span class=\"comment\">   * 虽然也采用分代算法，但由连续内存的年轻（老）代改为非连续的小块region（单个region连续）</span></span><br><span class=\"line\"><span class=\"comment\">   * ==============================================================</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  jint status = Universe::initialize_heap();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化元数据空间</span></span><br><span class=\"line\">  <span class=\"comment\">// 在JDK8里移除了PermGen，就是加入了它</span></span><br><span class=\"line\">  Metaspace::global_initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化AOT loader</span></span><br><span class=\"line\">  AOTLoader::universe_init();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Checks 'AfterMemoryInit' constraints.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!CommandLineFlagConstraintList::check_constraints(CommandLineFlagConstraint::AfterMemoryInit)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_EINVAL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 为元数据申请内存空间</span></span><br><span class=\"line\">  <span class=\"comment\">// Create memory for metadata.  Must be after initializing heap for</span></span><br><span class=\"line\">  <span class=\"comment\">// DumpSharedSpaces.</span></span><br><span class=\"line\">  ClassLoaderData::init_null_class_loader_data();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We have a heap so create the Method* caches before</span></span><br><span class=\"line\">  <span class=\"comment\">// Metaspace::initialize_shared_spaces() tries to populate them.</span></span><br><span class=\"line\">  Universe::_finalizer_register_cache = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\">  Universe::_loader_addClass_cache    = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\">  Universe::_pd_implies_cache         = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\">  Universe::_throw_illegal_access_error_cache = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\">  Universe::_do_stack_walk_cache = <span class=\"keyword\">new</span> LatestMethodCache();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_CDS</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseSharedSpaces) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Read the data structures supporting the shared spaces (shared</span></span><br><span class=\"line\">    <span class=\"comment\">// system dictionary, symbol table, etc.).  After that, access to</span></span><br><span class=\"line\">    <span class=\"comment\">// the file (other than the mapped regions) is no longer needed, and</span></span><br><span class=\"line\">    <span class=\"comment\">// the file is closed. Closing the file does not affect the</span></span><br><span class=\"line\">    <span class=\"comment\">// currently mapped regions.</span></span><br><span class=\"line\">    MetaspaceShared::initialize_shared_spaces();</span><br><span class=\"line\">    StringTable::create_table();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">#endif</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建符号表</span></span><br><span class=\"line\">    SymbolTable::create_table();</span><br><span class=\"line\">    <span class=\"comment\">// 创建字符串缓存池</span></span><br><span class=\"line\">    StringTable::create_table();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_CDS</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DumpSharedSpaces) &#123;</span><br><span class=\"line\">      MetaspaceShared::prepare_for_dumping();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(VerifySubSet) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    Universe::initialize_verify_flags();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建方法表</span></span><br><span class=\"line\">  ResolvedMethodTable::create_table();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"universe-cpp-initialize-heap\"><a href=\"#universe-cpp-initialize-heap\" class=\"headerlink\" title=\"universe.cpp # initialize_heap()\"></a>universe.cpp # initialize_heap()</h1><p><code>initialize_heap()</code>方法用于初始化堆空间，位于<code>src/hotspot/share/memory/universe.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Choose the heap base address and oop encoding mode</span></span><br><span class=\"line\"><span class=\"comment\">// when compressed oops are used:</span></span><br><span class=\"line\"><span class=\"comment\">// Unscaled  - Use 32-bits oops without encoding when</span></span><br><span class=\"line\"><span class=\"comment\">//     NarrowOopHeapBaseMin + heap_size &lt; 4Gb</span></span><br><span class=\"line\"><span class=\"comment\">// ZeroBased - Use zero based compressed oops with encoding when</span></span><br><span class=\"line\"><span class=\"comment\">//     NarrowOopHeapBaseMin + heap_size &lt; 32Gb</span></span><br><span class=\"line\"><span class=\"comment\">// HeapBased - Use compressed oops with heap base + encoding.</span></span><br><span class=\"line\"></span><br><span class=\"line\">jint Universe::initialize_heap() &#123;</span><br><span class=\"line\">  jint status = JNI_ERR;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据GC策略创建堆空间</span></span><br><span class=\"line\">  _collectedHeap = create_heap_ext();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_collectedHeap == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    _collectedHeap = create_heap();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * ==========================================</span></span><br><span class=\"line\"><span class=\"comment\">   *        初始化堆空间</span></span><br><span class=\"line\"><span class=\"comment\">   * ==========================================</span></span><br><span class=\"line\"><span class=\"comment\">   * 这里会调用G1CollectedHeap::initialize()方法，</span></span><br><span class=\"line\"><span class=\"comment\">   * 真正向操作系统申请内存</span></span><br><span class=\"line\"><span class=\"comment\">   * ==========================================</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  status = _collectedHeap-&gt;initialize();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (status != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log_info(gc)(<span class=\"string\">\"Using %s\"</span>, _collectedHeap-&gt;name());</span><br><span class=\"line\"></span><br><span class=\"line\">  ThreadLocalAllocBuffer::set_max_size(Universe::heap()-&gt;max_tlab_size());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _LP64</span></span><br><span class=\"line\">  <span class=\"comment\">// 在LP64数据模型下是否开启对象指针压缩</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseCompressedOops) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Subtract a page because something can get allocated at heap base.</span></span><br><span class=\"line\">    <span class=\"comment\">// This also makes implicit null checking work, because the</span></span><br><span class=\"line\">    <span class=\"comment\">// memory+1 page below heap_base needs to cause a signal.</span></span><br><span class=\"line\">    <span class=\"comment\">// See needs_explicit_null_check.</span></span><br><span class=\"line\">    <span class=\"comment\">// Only set the heap base for compressed oops because it indicates</span></span><br><span class=\"line\">    <span class=\"comment\">// compressed oops for pstack code.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">uint64_t</span>)Universe::heap()-&gt;reserved_region().end() &gt; UnscaledOopHeapMax) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Didn't reserve heap below 4Gb.  Must shift.</span></span><br><span class=\"line\">      Universe::set_narrow_oop_shift(LogMinObjAlignmentInBytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">uint64_t</span>)Universe::heap()-&gt;reserved_region().end() &lt;= OopEncodingHeapMax) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Did reserve heap below 32Gb. Can use base == 0;</span></span><br><span class=\"line\">      Universe::set_narrow_oop_base(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Universe::set_narrow_ptrs_base(Universe::narrow_oop_base());</span><br><span class=\"line\"></span><br><span class=\"line\">    LogTarget(Info, gc, heap, coops) lt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lt.is_enabled()) &#123;</span><br><span class=\"line\">      ResourceMark rm;</span><br><span class=\"line\">      <span class=\"function\">LogStream <span class=\"title\">ls</span><span class=\"params\">(lt)</span></span>;</span><br><span class=\"line\">      Universe::print_compressed_oops_mode(&amp;ls);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Tell tests in which mode we run.</span></span><br><span class=\"line\">    Arguments::PropertyList_add(<span class=\"keyword\">new</span> SystemProperty(<span class=\"string\">\"java.vm.compressedOopsMode\"</span>,</span><br><span class=\"line\">                                                   narrow_oop_mode_to_string(narrow_oop_mode()),</span><br><span class=\"line\">                                                   <span class=\"literal\">false</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Universe::narrow_oop_base() is one page below the heap.</span></span><br><span class=\"line\">  assert((<span class=\"keyword\">intptr_t</span>)Universe::narrow_oop_base() &lt;= (<span class=\"keyword\">intptr_t</span>)(Universe::heap()-&gt;base() -</span><br><span class=\"line\">         os::vm_page_size()) ||</span><br><span class=\"line\">         Universe::narrow_oop_base() == <span class=\"literal\">NULL</span>, <span class=\"string\">\"invalid value\"</span>);</span><br><span class=\"line\">  assert(Universe::narrow_oop_shift() == LogMinObjAlignmentInBytes ||</span><br><span class=\"line\">         Universe::narrow_oop_shift() == <span class=\"number\">0</span>, <span class=\"string\">\"invalid value\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We will never reach the CATCH below since Exceptions::_throw will cause</span></span><br><span class=\"line\">  <span class=\"comment\">// the VM to exit if an exception is thrown during initialization</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果使用TLAB</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseTLAB) &#123;</span><br><span class=\"line\">    assert(Universe::heap()-&gt;supports_tlab_allocation(),</span><br><span class=\"line\">           <span class=\"string\">\"Should support thread-local allocation buffers\"</span>);</span><br><span class=\"line\">    ThreadLocalAllocBuffer::startup_initialization();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"universe-cpp-create-heap\"><a href=\"#universe-cpp-create-heap\" class=\"headerlink\" title=\"universe.cpp # create_heap()\"></a>universe.cpp # create_heap()</h1><p><code>create_heap()</code>用于根据GC策略创建堆空间，位于<code>src/hotspot/share/memory/universe.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CollectedHeap* Universe::create_heap() &#123;</span><br><span class=\"line\">  assert(_collectedHeap == <span class=\"literal\">NULL</span>, <span class=\"string\">\"Heap already created\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> !INCLUDE_ALL_GCS</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseParallelGC) &#123;</span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseParallelGC not supported in this VM.\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseG1GC) &#123;</span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseG1GC not supported in this VM.\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class=\"line\">    fatal(<span class=\"string\">\"UseConcMarkSweepGC not supported in this VM.\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (UseParallelGC) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Universe::create_heap_with_policy&lt;ParallelScavengeHeap, GenerationSizer&gt;();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseG1GC) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此处默认使用G1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Universe::create_heap_with_policy&lt;G1CollectedHeap, G1CollectorPolicy&gt;();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseConcMarkSweepGC) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Universe::create_heap_with_policy&lt;GenCollectedHeap, ConcurrentMarkSweepPolicy&gt;();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UseSerialGC) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Universe::create_heap_with_policy&lt;GenCollectedHeap, MarkSweepPolicy&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ShouldNotReachHere();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"g1CollectedHeap-cpp-G1CollectedHeap-initialize\"><a href=\"#g1CollectedHeap-cpp-G1CollectedHeap-initialize\" class=\"headerlink\" title=\"g1CollectedHeap.cpp # G1CollectedHeap::initialize()\"></a>g1CollectedHeap.cpp # G1CollectedHeap::initialize()</h1><p>堆空间创建完毕，接下来是初始化，从上面<code>return Universe::create_heap_with_policy&lt;G1CollectedHeap, G1CollectorPolicy&gt;();</code>可以看出，<br><code>_collectedHeap</code>对应的堆实现是<code>G1CollectedHeap</code>，位于<code>src/hotspot/share/gc/g1/g1CollectedHeap.cpp</code>，<br>对应上面的<code>_collectedHeap-&gt;initialize()</code>，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// G1CollectedHeap初始化</span></span><br><span class=\"line\">jint G1CollectedHeap::initialize() &#123;</span><br><span class=\"line\">  CollectedHeap::pre_initialize();</span><br><span class=\"line\">  os::enable_vtime();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Necessary to satisfy locking discipline assertions.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">MutexLocker <span class=\"title\">x</span><span class=\"params\">(Heap_lock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> init_byte_size = collector_policy()-&gt;initial_heap_byte_size();</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> max_byte_size = collector_policy()-&gt;max_heap_byte_size();</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> heap_alignment = collector_policy()-&gt;heap_alignment();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 申请Java堆内存及确定CompressedOops模式</span></span><br><span class=\"line\">  ReservedSpace heap_rs = Universe::reserve_heap(max_byte_size,</span><br><span class=\"line\">                                                 heap_alignment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化申请的内存区域</span></span><br><span class=\"line\">  initialize_reserved_region((HeapWord*)heap_rs.base(), (HeapWord*)(heap_rs.base() + heap_rs.size()));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 为整个保留区域创建barrier</span></span><br><span class=\"line\">  <span class=\"comment\">// Create the barrier set for the entire reserved region.</span></span><br><span class=\"line\">  G1SATBCardTableLoggingModRefBS* bs</span><br><span class=\"line\">    = <span class=\"keyword\">new</span> G1SATBCardTableLoggingModRefBS(reserved_region());</span><br><span class=\"line\">  bs-&gt;initialize();</span><br><span class=\"line\">  assert(bs-&gt;is_a(BarrierSet::G1SATBCTLogging), <span class=\"string\">\"sanity\"</span>);</span><br><span class=\"line\">  set_barrier_set(bs);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建热卡缓存</span></span><br><span class=\"line\">  <span class=\"comment\">// Create the hot card cache.</span></span><br><span class=\"line\">  _hot_card_cache = <span class=\"keyword\">new</span> G1HotCardCache(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Carve out the G1 part of the heap.</span></span><br><span class=\"line\">  ReservedSpace g1_rs = heap_rs.first_part(max_byte_size);</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> page_size = UseLargePages ? os::large_page_size() : os::vm_page_size();</span><br><span class=\"line\">  <span class=\"comment\">// 创建mapper</span></span><br><span class=\"line\">  G1RegionToSpaceMapper* heap_storage =</span><br><span class=\"line\">    G1RegionToSpaceMapper::create_mapper(g1_rs,</span><br><span class=\"line\">                                         g1_rs.size(),</span><br><span class=\"line\">                                         page_size,</span><br><span class=\"line\">                                         HeapRegion::GrainBytes,</span><br><span class=\"line\">                                         <span class=\"number\">1</span>,</span><br><span class=\"line\">                                         mtJavaHeap);</span><br><span class=\"line\">  os::trace_page_sizes(<span class=\"string\">\"Heap\"</span>,</span><br><span class=\"line\">                       collector_policy()-&gt;min_heap_byte_size(),</span><br><span class=\"line\">                       max_byte_size,</span><br><span class=\"line\">                       page_size,</span><br><span class=\"line\">                       heap_rs.base(),</span><br><span class=\"line\">                       heap_rs.size());</span><br><span class=\"line\">  heap_storage-&gt;set_mapping_changed_listener(&amp;_listener);</span><br><span class=\"line\"></span><br><span class=\"line\">  FreeRegionList::set_unrealistically_long_length(max_regions() + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  _bot = <span class=\"keyword\">new</span> G1BlockOffsetTable(reserved_region(), bot_storage);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    HeapWord* start = _hrm.reserved().start();</span><br><span class=\"line\">    HeapWord* end = _hrm.reserved().end();</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> granularity = HeapRegion::GrainBytes;</span><br><span class=\"line\"></span><br><span class=\"line\">    _in_cset_fast_test.initialize(start, end, granularity);</span><br><span class=\"line\">    _humongous_reclaim_candidates.initialize(start, end, granularity);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建G1ConcurrentMark数据结构和线程</span></span><br><span class=\"line\">  <span class=\"comment\">// Create the G1ConcurrentMark data structure and thread.</span></span><br><span class=\"line\">  <span class=\"comment\">// (Must do this late, so that \"max_regions\" is defined.)</span></span><br><span class=\"line\">  _cm = <span class=\"keyword\">new</span> G1ConcurrentMark(<span class=\"keyword\">this</span>, prev_bitmap_storage, next_bitmap_storage);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_cm == <span class=\"literal\">NULL</span> || !_cm-&gt;completed_initialization()) &#123;</span><br><span class=\"line\">    vm_shutdown_during_initialization(<span class=\"string\">\"Could not create/initialize G1ConcurrentMark\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _cmThread = _cm-&gt;cmThread();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Now expand into the initial heap size.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!expand(init_byte_size, _workers)) &#123;</span><br><span class=\"line\">    vm_shutdown_during_initialization(<span class=\"string\">\"Failed to allocate initial heap.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> JNI_ENOMEM;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行委托给内存（G1）策略的所有初始化操作</span></span><br><span class=\"line\">  <span class=\"comment\">// Perform any initialization actions delegated to the policy.</span></span><br><span class=\"line\">  g1_policy()-&gt;init(<span class=\"keyword\">this</span>, &amp;_collection_set);</span><br><span class=\"line\"></span><br><span class=\"line\">  JavaThread::satb_mark_queue_set().initialize(SATB_Q_CBL_mon,</span><br><span class=\"line\">                                               SATB_Q_FL_lock,</span><br><span class=\"line\">                                               G1SATBProcessCompletedThreshold,</span><br><span class=\"line\">                                               Shared_SATB_Q_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">  jint ecode = initialize_concurrent_refinement();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ecode != JNI_OK) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ecode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  JavaThread::dirty_card_queue_set().initialize(DirtyCardQ_CBL_mon,</span><br><span class=\"line\">                                                DirtyCardQ_FL_lock,</span><br><span class=\"line\">                                                (<span class=\"keyword\">int</span>)concurrent_g1_refine()-&gt;yellow_zone(),</span><br><span class=\"line\">                                                (<span class=\"keyword\">int</span>)concurrent_g1_refine()-&gt;red_zone(),</span><br><span class=\"line\">                                                Shared_DirtyCardQ_lock,</span><br><span class=\"line\">                                                <span class=\"literal\">NULL</span>,  <span class=\"comment\">// fl_owner</span></span><br><span class=\"line\">                                                <span class=\"literal\">true</span>); <span class=\"comment\">// init_free_ids</span></span><br><span class=\"line\"></span><br><span class=\"line\">  dirty_card_queue_set().initialize(DirtyCardQ_CBL_mon,</span><br><span class=\"line\">                                    DirtyCardQ_FL_lock,</span><br><span class=\"line\">                                    <span class=\"number\">-1</span>, <span class=\"comment\">// never trigger processing</span></span><br><span class=\"line\">                                    <span class=\"number\">-1</span>, <span class=\"comment\">// no limit on length</span></span><br><span class=\"line\">                                    Shared_DirtyCardQ_lock,</span><br><span class=\"line\">                                    &amp;JavaThread::dirty_card_queue_set());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Here we allocate the dummy HeapRegion that is required by the</span></span><br><span class=\"line\">  <span class=\"comment\">// G1AllocRegion class.</span></span><br><span class=\"line\">  HeapRegion* dummy_region = _hrm.get_dummy_region();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We'll re-use the same region whether the alloc region will</span></span><br><span class=\"line\">  <span class=\"comment\">// require BOT updates or not and, if it doesn't, then a non-young</span></span><br><span class=\"line\">  <span class=\"comment\">// region will complain that it cannot support allocations without</span></span><br><span class=\"line\">  <span class=\"comment\">// BOT updates. So we'll tag the dummy region as eden to avoid that.</span></span><br><span class=\"line\">  dummy_region-&gt;set_eden();</span><br><span class=\"line\">  <span class=\"comment\">// Make sure it's full.</span></span><br><span class=\"line\">  dummy_region-&gt;set_top(dummy_region-&gt;end());</span><br><span class=\"line\">  G1AllocRegion::setup(<span class=\"keyword\">this</span>, dummy_region);</span><br><span class=\"line\"></span><br><span class=\"line\">  _allocator-&gt;init_mutator_alloc_region();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Do create of the monitoring and management support so that</span></span><br><span class=\"line\">  <span class=\"comment\">// values in the heap have been properly initialized.</span></span><br><span class=\"line\">  _g1mm = <span class=\"keyword\">new</span> G1MonitoringSupport(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  G1StringDedup::initialize();</span><br><span class=\"line\"></span><br><span class=\"line\">  _preserved_marks_set.init(ParallelGCThreads);</span><br><span class=\"line\"></span><br><span class=\"line\">  _collection_set.initialize(max_regions());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> JNI_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，JVM的整个初始化工作完成，关于GC策略的空间分配具体细节在以后的文章中再详细介绍。</p>"},{"title":"【JVM源码探秘】Java对象模型OOP-Klass","date":"2018-02-24T12:10:00.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n一个Java类在JVM中是如何描述的？创建一个Java对象在JVM中数据又是如何存储的？\n\n在Hotspot VM中，设计者设计了OOP-Klass模型用来描述class的属性和行为，这里的OOP并不是面向对象编程（Object-oriented programming），\n而是Ordinary Object Pointer（普通对象指针），之所以设计为OOP和Klass两部分是因为不希望每个对象都有一个C ++ vtbl指针，\n因此，普通的oops没有任何虚拟功能。 相反，他们将所有“虚拟”函数转发到它们的klass，它具有vtbl并根据对象的实际类型执行C ++调度。 \n\n<!-- more -->\n# OOP\n\noopDesc是对象类的最高基类。 {name}Desc类描述了Java对象的格式，因此可以从C++访问这些字段。 oopDesc是抽象的。 \n\n```c\n class oopDesc {\n  friend class VMStructs;\n  friend class JVMCIVMStructs;\n private:\n  // 对象头  \n  volatile markOop _mark;\n  // 元数据\n  union _metadata {\n    // 对应的Klass对象  \n    Klass*      _klass;\n    narrowKlass _compressed_klass;\n  } _metadata;\n```\n\n有关完整的类层次结构，请参见`src/hotspot/share/oops/oopsHierarchy.hpp`\n\nOOP体系如下：\n```c\ntypedef class oopDesc*                            oop;\ntypedef class   instanceOopDesc*            instanceOop;\ntypedef class   arrayOopDesc*                    arrayOop;\ntypedef class     objArrayOopDesc*            objArrayOop;\ntypedef class     typeArrayOopDesc*            typeArrayOop;\n```\n\n\n# Klass\n\n\nKlass体系如下：\n```c\nclass Klass;\nclass   InstanceKlass;\nclass     InstanceMirrorKlass;\nclass     InstanceClassLoaderKlass;\nclass     InstanceRefKlass;\nclass   ArrayKlass;\nclass     ObjArrayKlass;\nclass     TypeArrayKlass;\n```\n\nKlass对象提供：\n- 1：语言级别的类对象（方法字典等）\n- 2：为对象提供虚拟机调度行为\n\n\n\n\n```c++\n    class Klass : public Metadata {\n      friend class VMStructs;\n      friend class JVMCIVMStructs;\n     protected:\n      // If you add a new field that points to any metaspace object, you\n      // must add this field to Klass::metaspace_pointers_do().\n      enum { _primary_super_limit = 8 };\n    \n      // The \"layout helper\" is a combined descriptor of object layout.\n      // For klasses which are neither instance nor array, the value is zero.\n      jint        _layout_helper;\n    \n      // 类名\n      // Class name.  Instance classes: java/lang/String, etc.  Array classes: [I,\n      // [Ljava/lang/String;, etc.  Set to zero for all other kinds of classes.\n      Symbol*     _name;\n    \n      // Cache of last observed secondary supertype\n      Klass*      _secondary_super_cache;\n      // Array of all secondary supertypes\n      Array<Klass*>* _secondary_supers;\n      // Ordered list of all primary supertypes\n      Klass*      _primary_supers[_primary_super_limit];\n    \n      // java.lang.Class镜像类\n      // java/lang/Class instance mirroring this class\n      oop       _java_mirror;\n      // 父类\n      // Superclass\n      Klass*      _super;\n      // First subclass (NULL if none); _subklass->next_sibling() is next one\n      Klass*      _subklass;\n      // Sibling link (or NULL); links all subklasses of a klass\n      Klass*      _next_sibling;\n    \n      // All klasses loaded by a class loader are chained through these links\n      Klass*      _next_link;\n    \n      // 加载该类的类加载器\n      // The VM's representation of the ClassLoader used to load this class.\n      // Provide access the corresponding instance java.lang.ClassLoader.\n      ClassLoaderData* _class_loader_data;\n    \n      // 修饰符\n      jint        _modifier_flags;  // Processed access flags, for use by Class.getModifiers.\n      // 访问权限\n      AccessFlags _access_flags;    // Access flags. The class/interface distinction is stored here.\n    \n      TRACE_DEFINE_TRACE_ID_FIELD;\n    \n      // 偏向锁实现\n      // Biased locking implementation and statistics\n      // (the 64-bit chunk goes first, to avoid some fragmentation)\n      jlong    _last_biased_lock_bulk_revocation_time;\n      markOop  _prototype_header;   // Used when biased locking is both enabled and disabled for this type\n      jint     _biased_lock_revocation_count;\n    \n      // 虚拟表长度\n      // vtable length\n      int _vtable_len;\n    \n      // Remembered sets support for the oops in the klasses.\n      jbyte _modified_oops;             // Card Table Equivalent (YC/CMS support)\n      jbyte _accumulated_modified_oops; // Mod Union Equivalent (CMS support)\n\n```\n\n","source":"_posts/2018/02/24/analysis-of-hotspot-jvm-java-object-model-oop-klass.md","raw":"---\ntitle: 【JVM源码探秘】Java对象模型OOP-Klass\ndate: 2018-02-24 20:10:00\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n一个Java类在JVM中是如何描述的？创建一个Java对象在JVM中数据又是如何存储的？\n\n在Hotspot VM中，设计者设计了OOP-Klass模型用来描述class的属性和行为，这里的OOP并不是面向对象编程（Object-oriented programming），\n而是Ordinary Object Pointer（普通对象指针），之所以设计为OOP和Klass两部分是因为不希望每个对象都有一个C ++ vtbl指针，\n因此，普通的oops没有任何虚拟功能。 相反，他们将所有“虚拟”函数转发到它们的klass，它具有vtbl并根据对象的实际类型执行C ++调度。 \n\n<!-- more -->\n# OOP\n\noopDesc是对象类的最高基类。 {name}Desc类描述了Java对象的格式，因此可以从C++访问这些字段。 oopDesc是抽象的。 \n\n```c\n class oopDesc {\n  friend class VMStructs;\n  friend class JVMCIVMStructs;\n private:\n  // 对象头  \n  volatile markOop _mark;\n  // 元数据\n  union _metadata {\n    // 对应的Klass对象  \n    Klass*      _klass;\n    narrowKlass _compressed_klass;\n  } _metadata;\n```\n\n有关完整的类层次结构，请参见`src/hotspot/share/oops/oopsHierarchy.hpp`\n\nOOP体系如下：\n```c\ntypedef class oopDesc*                            oop;\ntypedef class   instanceOopDesc*            instanceOop;\ntypedef class   arrayOopDesc*                    arrayOop;\ntypedef class     objArrayOopDesc*            objArrayOop;\ntypedef class     typeArrayOopDesc*            typeArrayOop;\n```\n\n\n# Klass\n\n\nKlass体系如下：\n```c\nclass Klass;\nclass   InstanceKlass;\nclass     InstanceMirrorKlass;\nclass     InstanceClassLoaderKlass;\nclass     InstanceRefKlass;\nclass   ArrayKlass;\nclass     ObjArrayKlass;\nclass     TypeArrayKlass;\n```\n\nKlass对象提供：\n- 1：语言级别的类对象（方法字典等）\n- 2：为对象提供虚拟机调度行为\n\n\n\n\n```c++\n    class Klass : public Metadata {\n      friend class VMStructs;\n      friend class JVMCIVMStructs;\n     protected:\n      // If you add a new field that points to any metaspace object, you\n      // must add this field to Klass::metaspace_pointers_do().\n      enum { _primary_super_limit = 8 };\n    \n      // The \"layout helper\" is a combined descriptor of object layout.\n      // For klasses which are neither instance nor array, the value is zero.\n      jint        _layout_helper;\n    \n      // 类名\n      // Class name.  Instance classes: java/lang/String, etc.  Array classes: [I,\n      // [Ljava/lang/String;, etc.  Set to zero for all other kinds of classes.\n      Symbol*     _name;\n    \n      // Cache of last observed secondary supertype\n      Klass*      _secondary_super_cache;\n      // Array of all secondary supertypes\n      Array<Klass*>* _secondary_supers;\n      // Ordered list of all primary supertypes\n      Klass*      _primary_supers[_primary_super_limit];\n    \n      // java.lang.Class镜像类\n      // java/lang/Class instance mirroring this class\n      oop       _java_mirror;\n      // 父类\n      // Superclass\n      Klass*      _super;\n      // First subclass (NULL if none); _subklass->next_sibling() is next one\n      Klass*      _subklass;\n      // Sibling link (or NULL); links all subklasses of a klass\n      Klass*      _next_sibling;\n    \n      // All klasses loaded by a class loader are chained through these links\n      Klass*      _next_link;\n    \n      // 加载该类的类加载器\n      // The VM's representation of the ClassLoader used to load this class.\n      // Provide access the corresponding instance java.lang.ClassLoader.\n      ClassLoaderData* _class_loader_data;\n    \n      // 修饰符\n      jint        _modifier_flags;  // Processed access flags, for use by Class.getModifiers.\n      // 访问权限\n      AccessFlags _access_flags;    // Access flags. The class/interface distinction is stored here.\n    \n      TRACE_DEFINE_TRACE_ID_FIELD;\n    \n      // 偏向锁实现\n      // Biased locking implementation and statistics\n      // (the 64-bit chunk goes first, to avoid some fragmentation)\n      jlong    _last_biased_lock_bulk_revocation_time;\n      markOop  _prototype_header;   // Used when biased locking is both enabled and disabled for this type\n      jint     _biased_lock_revocation_count;\n    \n      // 虚拟表长度\n      // vtable length\n      int _vtable_len;\n    \n      // Remembered sets support for the oops in the klasses.\n      jbyte _modified_oops;             // Card Table Equivalent (YC/CMS support)\n      jbyte _accumulated_modified_oops; // Mod Union Equivalent (CMS support)\n\n```\n\n","slug":"analysis-of-hotspot-jvm-java-object-model-oop-klass","published":1,"updated":"2018-05-23T16:28:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2i001q2zs6sifu9bx0","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>一个Java类在JVM中是如何描述的？创建一个Java对象在JVM中数据又是如何存储的？</p>\n<p>在Hotspot VM中，设计者设计了OOP-Klass模型用来描述class的属性和行为，这里的OOP并不是面向对象编程（Object-oriented programming），<br>而是Ordinary Object Pointer（普通对象指针），之所以设计为OOP和Klass两部分是因为不希望每个对象都有一个C ++ vtbl指针，<br>因此，普通的oops没有任何虚拟功能。 相反，他们将所有“虚拟”函数转发到它们的klass，它具有vtbl并根据对象的实际类型执行C ++调度。 </p>\n<a id=\"more\"></a>\n<h1 id=\"OOP\"><a href=\"#OOP\" class=\"headerlink\" title=\"OOP\"></a>OOP</h1><p>oopDesc是对象类的最高基类。 {name}Desc类描述了Java对象的格式，因此可以从C++访问这些字段。 oopDesc是抽象的。 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">oopDesc</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VMStructs</span>;</span></span><br><span class=\"line\"> <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMCIVMStructs</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"> <span class=\"comment\">// 对象头  </span></span><br><span class=\"line\"> <span class=\"keyword\">volatile</span> markOop _mark;</span><br><span class=\"line\"> <span class=\"comment\">// 元数据</span></span><br><span class=\"line\"> <span class=\"keyword\">union</span> _metadata &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 对应的Klass对象  </span></span><br><span class=\"line\">   Klass*      _klass;</span><br><span class=\"line\">   narrowKlass _compressed_klass;</span><br><span class=\"line\"> &#125; _metadata;</span><br></pre></td></tr></table></figure>\n<p>有关完整的类层次结构，请参见<code>src/hotspot/share/oops/oopsHierarchy.hpp</code></p>\n<p>OOP体系如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">oopDesc</span>*                            <span class=\"title\">oop</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span>   <span class=\"title\">instanceOopDesc</span>*            <span class=\"title\">instanceOop</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span>   <span class=\"title\">arrayOopDesc</span>*                    <span class=\"title\">arrayOop</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">objArrayOopDesc</span>*            <span class=\"title\">objArrayOop</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">typeArrayOopDesc</span>*            <span class=\"title\">typeArrayOop</span>;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Klass\"><a href=\"#Klass\" class=\"headerlink\" title=\"Klass\"></a>Klass</h1><p>Klass体系如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Klass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>   <span class=\"title\">InstanceKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">InstanceMirrorKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">InstanceClassLoaderKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">InstanceRefKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>   <span class=\"title\">ArrayKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">ObjArrayKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">TypeArrayKlass</span>;</span></span><br></pre></td></tr></table></figure></p>\n<p>Klass对象提供：</p>\n<ul>\n<li>1：语言级别的类对象（方法字典等）</li>\n<li>2：为对象提供虚拟机调度行为</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Klass</span> :</span> <span class=\"keyword\">public</span> Metadata &#123;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VMStructs</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMCIVMStructs</span>;</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"comment\">// If you add a new field that points to any metaspace object, you</span></span><br><span class=\"line\">  <span class=\"comment\">// must add this field to Klass::metaspace_pointers_do().</span></span><br><span class=\"line\">  <span class=\"keyword\">enum</span> &#123; _primary_super_limit = <span class=\"number\">8</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The \"layout helper\" is a combined descriptor of object layout.</span></span><br><span class=\"line\">  <span class=\"comment\">// For klasses which are neither instance nor array, the value is zero.</span></span><br><span class=\"line\">  jint        _layout_helper;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 类名</span></span><br><span class=\"line\">  <span class=\"comment\">// Class name.  Instance classes: java/lang/String, etc.  Array classes: [I,</span></span><br><span class=\"line\">  <span class=\"comment\">// [Ljava/lang/String;, etc.  Set to zero for all other kinds of classes.</span></span><br><span class=\"line\">  Symbol*     _name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Cache of last observed secondary supertype</span></span><br><span class=\"line\">  Klass*      _secondary_super_cache;</span><br><span class=\"line\">  <span class=\"comment\">// Array of all secondary supertypes</span></span><br><span class=\"line\">  Array&lt;Klass*&gt;* _secondary_supers;</span><br><span class=\"line\">  <span class=\"comment\">// Ordered list of all primary supertypes</span></span><br><span class=\"line\">  Klass*      _primary_supers[_primary_super_limit];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// java.lang.Class镜像类</span></span><br><span class=\"line\">  <span class=\"comment\">// java/lang/Class instance mirroring this class</span></span><br><span class=\"line\">  oop       _java_mirror;</span><br><span class=\"line\">  <span class=\"comment\">// 父类</span></span><br><span class=\"line\">  <span class=\"comment\">// Superclass</span></span><br><span class=\"line\">  Klass*      _super;</span><br><span class=\"line\">  <span class=\"comment\">// First subclass (NULL if none); _subklass-&gt;next_sibling() is next one</span></span><br><span class=\"line\">  Klass*      _subklass;</span><br><span class=\"line\">  <span class=\"comment\">// Sibling link (or NULL); links all subklasses of a klass</span></span><br><span class=\"line\">  Klass*      _next_sibling;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All klasses loaded by a class loader are chained through these links</span></span><br><span class=\"line\">  Klass*      _next_link;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载该类的类加载器</span></span><br><span class=\"line\">  <span class=\"comment\">// The VM's representation of the ClassLoader used to load this class.</span></span><br><span class=\"line\">  <span class=\"comment\">// Provide access the corresponding instance java.lang.ClassLoader.</span></span><br><span class=\"line\">  ClassLoaderData* _class_loader_data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 修饰符</span></span><br><span class=\"line\">  jint        _modifier_flags;  <span class=\"comment\">// Processed access flags, for use by Class.getModifiers.</span></span><br><span class=\"line\">  <span class=\"comment\">// 访问权限</span></span><br><span class=\"line\">  AccessFlags _access_flags;    <span class=\"comment\">// Access flags. The class/interface distinction is stored here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  TRACE_DEFINE_TRACE_ID_FIELD;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 偏向锁实现</span></span><br><span class=\"line\">  <span class=\"comment\">// Biased locking implementation and statistics</span></span><br><span class=\"line\">  <span class=\"comment\">// (the 64-bit chunk goes first, to avoid some fragmentation)</span></span><br><span class=\"line\">  jlong    _last_biased_lock_bulk_revocation_time;</span><br><span class=\"line\">  markOop  _prototype_header;   <span class=\"comment\">// Used when biased locking is both enabled and disabled for this type</span></span><br><span class=\"line\">  jint     _biased_lock_revocation_count;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 虚拟表长度</span></span><br><span class=\"line\">  <span class=\"comment\">// vtable length</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> _vtable_len;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Remembered sets support for the oops in the klasses.</span></span><br><span class=\"line\">  jbyte _modified_oops;             <span class=\"comment\">// Card Table Equivalent (YC/CMS support)</span></span><br><span class=\"line\">  jbyte _accumulated_modified_oops; <span class=\"comment\">// Mod Union Equivalent (CMS support)</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>一个Java类在JVM中是如何描述的？创建一个Java对象在JVM中数据又是如何存储的？</p>\n<p>在Hotspot VM中，设计者设计了OOP-Klass模型用来描述class的属性和行为，这里的OOP并不是面向对象编程（Object-oriented programming），<br>而是Ordinary Object Pointer（普通对象指针），之所以设计为OOP和Klass两部分是因为不希望每个对象都有一个C ++ vtbl指针，<br>因此，普通的oops没有任何虚拟功能。 相反，他们将所有“虚拟”函数转发到它们的klass，它具有vtbl并根据对象的实际类型执行C ++调度。 </p>","more":"<h1 id=\"OOP\"><a href=\"#OOP\" class=\"headerlink\" title=\"OOP\"></a>OOP</h1><p>oopDesc是对象类的最高基类。 {name}Desc类描述了Java对象的格式，因此可以从C++访问这些字段。 oopDesc是抽象的。 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">oopDesc</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VMStructs</span>;</span></span><br><span class=\"line\"> <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMCIVMStructs</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"> <span class=\"comment\">// 对象头  </span></span><br><span class=\"line\"> <span class=\"keyword\">volatile</span> markOop _mark;</span><br><span class=\"line\"> <span class=\"comment\">// 元数据</span></span><br><span class=\"line\"> <span class=\"keyword\">union</span> _metadata &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 对应的Klass对象  </span></span><br><span class=\"line\">   Klass*      _klass;</span><br><span class=\"line\">   narrowKlass _compressed_klass;</span><br><span class=\"line\"> &#125; _metadata;</span><br></pre></td></tr></table></figure>\n<p>有关完整的类层次结构，请参见<code>src/hotspot/share/oops/oopsHierarchy.hpp</code></p>\n<p>OOP体系如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">oopDesc</span>*                            <span class=\"title\">oop</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span>   <span class=\"title\">instanceOopDesc</span>*            <span class=\"title\">instanceOop</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span>   <span class=\"title\">arrayOopDesc</span>*                    <span class=\"title\">arrayOop</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">objArrayOopDesc</span>*            <span class=\"title\">objArrayOop</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">typeArrayOopDesc</span>*            <span class=\"title\">typeArrayOop</span>;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Klass\"><a href=\"#Klass\" class=\"headerlink\" title=\"Klass\"></a>Klass</h1><p>Klass体系如下：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Klass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>   <span class=\"title\">InstanceKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">InstanceMirrorKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">InstanceClassLoaderKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">InstanceRefKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>   <span class=\"title\">ArrayKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">ObjArrayKlass</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>     <span class=\"title\">TypeArrayKlass</span>;</span></span><br></pre></td></tr></table></figure></p>\n<p>Klass对象提供：</p>\n<ul>\n<li>1：语言级别的类对象（方法字典等）</li>\n<li>2：为对象提供虚拟机调度行为</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Klass</span> :</span> <span class=\"keyword\">public</span> Metadata &#123;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VMStructs</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMCIVMStructs</span>;</span></span><br><span class=\"line\"> <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"comment\">// If you add a new field that points to any metaspace object, you</span></span><br><span class=\"line\">  <span class=\"comment\">// must add this field to Klass::metaspace_pointers_do().</span></span><br><span class=\"line\">  <span class=\"keyword\">enum</span> &#123; _primary_super_limit = <span class=\"number\">8</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The \"layout helper\" is a combined descriptor of object layout.</span></span><br><span class=\"line\">  <span class=\"comment\">// For klasses which are neither instance nor array, the value is zero.</span></span><br><span class=\"line\">  jint        _layout_helper;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 类名</span></span><br><span class=\"line\">  <span class=\"comment\">// Class name.  Instance classes: java/lang/String, etc.  Array classes: [I,</span></span><br><span class=\"line\">  <span class=\"comment\">// [Ljava/lang/String;, etc.  Set to zero for all other kinds of classes.</span></span><br><span class=\"line\">  Symbol*     _name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Cache of last observed secondary supertype</span></span><br><span class=\"line\">  Klass*      _secondary_super_cache;</span><br><span class=\"line\">  <span class=\"comment\">// Array of all secondary supertypes</span></span><br><span class=\"line\">  Array&lt;Klass*&gt;* _secondary_supers;</span><br><span class=\"line\">  <span class=\"comment\">// Ordered list of all primary supertypes</span></span><br><span class=\"line\">  Klass*      _primary_supers[_primary_super_limit];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// java.lang.Class镜像类</span></span><br><span class=\"line\">  <span class=\"comment\">// java/lang/Class instance mirroring this class</span></span><br><span class=\"line\">  oop       _java_mirror;</span><br><span class=\"line\">  <span class=\"comment\">// 父类</span></span><br><span class=\"line\">  <span class=\"comment\">// Superclass</span></span><br><span class=\"line\">  Klass*      _super;</span><br><span class=\"line\">  <span class=\"comment\">// First subclass (NULL if none); _subklass-&gt;next_sibling() is next one</span></span><br><span class=\"line\">  Klass*      _subklass;</span><br><span class=\"line\">  <span class=\"comment\">// Sibling link (or NULL); links all subklasses of a klass</span></span><br><span class=\"line\">  Klass*      _next_sibling;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All klasses loaded by a class loader are chained through these links</span></span><br><span class=\"line\">  Klass*      _next_link;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载该类的类加载器</span></span><br><span class=\"line\">  <span class=\"comment\">// The VM's representation of the ClassLoader used to load this class.</span></span><br><span class=\"line\">  <span class=\"comment\">// Provide access the corresponding instance java.lang.ClassLoader.</span></span><br><span class=\"line\">  ClassLoaderData* _class_loader_data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 修饰符</span></span><br><span class=\"line\">  jint        _modifier_flags;  <span class=\"comment\">// Processed access flags, for use by Class.getModifiers.</span></span><br><span class=\"line\">  <span class=\"comment\">// 访问权限</span></span><br><span class=\"line\">  AccessFlags _access_flags;    <span class=\"comment\">// Access flags. The class/interface distinction is stored here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  TRACE_DEFINE_TRACE_ID_FIELD;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 偏向锁实现</span></span><br><span class=\"line\">  <span class=\"comment\">// Biased locking implementation and statistics</span></span><br><span class=\"line\">  <span class=\"comment\">// (the 64-bit chunk goes first, to avoid some fragmentation)</span></span><br><span class=\"line\">  jlong    _last_biased_lock_bulk_revocation_time;</span><br><span class=\"line\">  markOop  _prototype_header;   <span class=\"comment\">// Used when biased locking is both enabled and disabled for this type</span></span><br><span class=\"line\">  jint     _biased_lock_revocation_count;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 虚拟表长度</span></span><br><span class=\"line\">  <span class=\"comment\">// vtable length</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> _vtable_len;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Remembered sets support for the oops in the klasses.</span></span><br><span class=\"line\">  jbyte _modified_oops;             <span class=\"comment\">// Card Table Equivalent (YC/CMS support)</span></span><br><span class=\"line\">  jbyte _accumulated_modified_oops; <span class=\"comment\">// Mod Union Equivalent (CMS support)</span></span><br></pre></td></tr></table></figure>"},{"title":"【JVM源码探秘】Java对象模型之对象头","date":"2018-02-25T13:10:00.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n一个Java对象在JVM中是由一个对应角色的`oop`对象来描述的，比如`instanceOopDesc`用来描述普通实例对象，`arrayOopDesc`用来描述数组对象，而这些类型的oop对象均是继承自`oopDesc`。 \n\n<!-- more -->\n\n```c\n class oopDesc {\n  friend class VMStructs;\n  friend class JVMCIVMStructs;\n private:\n  // 对象头  \n  volatile markOop _mark;\n  // 元数据\n  union _metadata {\n    // 对应的Klass对象  \n    Klass*      _klass;\n    narrowKlass _compressed_klass;\n  } _metadata;\n```\n\noopDesc主要包含两部分，一部分是`_mark`，一部分是`_metadata`，\n\n- `_mark` _mark是一个`markOop`实例，它描述了一个对象的头信息，用于存储对象的运行时记录信息，如哈希值、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等：\n\n```\n//  32 bits:\n//  --------\n//             hash:25 ------------>| age:4    biased_lock:1 lock:2 (normal object)\n//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)\n//             size:32 ------------------------------------------>| (CMS free block)\n//             PromotedObject*:29 ---------->| promo_bits:3 ----->| (CMS promoted object)\n//\n//  64 bits:\n//  --------\n//  unused:25 hash:31 -->| unused:1   age:4    biased_lock:1 lock:2 (normal object)\n//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)\n//  PromotedObject*:61 --------------------->| promo_bits:3 ----->| (CMS promoted object)\n//  size:64 ----------------------------------------------------->| (CMS free block)\n//\n//  unused:25 hash:31 -->| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs && normal object)\n//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs && biased object)\n//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 ----->| (COOPs && CMS promoted object)\n//  unused:21 size:35 -->| cms_free:1 unused:7 ------------------>| (COOPs && CMS free block)\n```\n\n\n- `_metadata` 包含一个普通`_klass`和一个压缩后的`_compressed_klass`，详细信息参见[OpenJDK Wiki](https://wiki.openjdk.java.net/display/HotSpot/CompressedOops)。\n\n\n","source":"_posts/2018/02/25/analysis-of-hotspot-jvm-java-object-header.md","raw":"---\ntitle: 【JVM源码探秘】Java对象模型之对象头\ndate: 2018-02-25 21:10:00\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n一个Java对象在JVM中是由一个对应角色的`oop`对象来描述的，比如`instanceOopDesc`用来描述普通实例对象，`arrayOopDesc`用来描述数组对象，而这些类型的oop对象均是继承自`oopDesc`。 \n\n<!-- more -->\n\n```c\n class oopDesc {\n  friend class VMStructs;\n  friend class JVMCIVMStructs;\n private:\n  // 对象头  \n  volatile markOop _mark;\n  // 元数据\n  union _metadata {\n    // 对应的Klass对象  \n    Klass*      _klass;\n    narrowKlass _compressed_klass;\n  } _metadata;\n```\n\noopDesc主要包含两部分，一部分是`_mark`，一部分是`_metadata`，\n\n- `_mark` _mark是一个`markOop`实例，它描述了一个对象的头信息，用于存储对象的运行时记录信息，如哈希值、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等：\n\n```\n//  32 bits:\n//  --------\n//             hash:25 ------------>| age:4    biased_lock:1 lock:2 (normal object)\n//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)\n//             size:32 ------------------------------------------>| (CMS free block)\n//             PromotedObject*:29 ---------->| promo_bits:3 ----->| (CMS promoted object)\n//\n//  64 bits:\n//  --------\n//  unused:25 hash:31 -->| unused:1   age:4    biased_lock:1 lock:2 (normal object)\n//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)\n//  PromotedObject*:61 --------------------->| promo_bits:3 ----->| (CMS promoted object)\n//  size:64 ----------------------------------------------------->| (CMS free block)\n//\n//  unused:25 hash:31 -->| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs && normal object)\n//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs && biased object)\n//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 ----->| (COOPs && CMS promoted object)\n//  unused:21 size:35 -->| cms_free:1 unused:7 ------------------>| (COOPs && CMS free block)\n```\n\n\n- `_metadata` 包含一个普通`_klass`和一个压缩后的`_compressed_klass`，详细信息参见[OpenJDK Wiki](https://wiki.openjdk.java.net/display/HotSpot/CompressedOops)。\n\n\n","slug":"analysis-of-hotspot-jvm-java-object-header","published":1,"updated":"2018-05-23T16:33:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2k001u2zs6nj4mskt2","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>一个Java对象在JVM中是由一个对应角色的<code>oop</code>对象来描述的，比如<code>instanceOopDesc</code>用来描述普通实例对象，<code>arrayOopDesc</code>用来描述数组对象，而这些类型的oop对象均是继承自<code>oopDesc</code>。 </p>\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">oopDesc</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VMStructs</span>;</span></span><br><span class=\"line\"> <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMCIVMStructs</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"> <span class=\"comment\">// 对象头  </span></span><br><span class=\"line\"> <span class=\"keyword\">volatile</span> markOop _mark;</span><br><span class=\"line\"> <span class=\"comment\">// 元数据</span></span><br><span class=\"line\"> <span class=\"keyword\">union</span> _metadata &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 对应的Klass对象  </span></span><br><span class=\"line\">   Klass*      _klass;</span><br><span class=\"line\">   narrowKlass _compressed_klass;</span><br><span class=\"line\"> &#125; _metadata;</span><br></pre></td></tr></table></figure>\n<p>oopDesc主要包含两部分，一部分是<code>_mark</code>，一部分是<code>_metadata</code>，</p>\n<ul>\n<li><code>_mark</code> _mark是一个<code>markOop</code>实例，它描述了一个对象的头信息，用于存储对象的运行时记录信息，如哈希值、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  32 bits:</span><br><span class=\"line\">//  --------</span><br><span class=\"line\">//             hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span><br><span class=\"line\">//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span><br><span class=\"line\">//             size:32 ------------------------------------------&gt;| (CMS free block)</span><br><span class=\"line\">//             PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span><br><span class=\"line\">//</span><br><span class=\"line\">//  64 bits:</span><br><span class=\"line\">//  --------</span><br><span class=\"line\">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span><br><span class=\"line\">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span><br><span class=\"line\">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span><br><span class=\"line\">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span><br><span class=\"line\">//</span><br><span class=\"line\">//  unused:25 hash:31 --&gt;| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; normal object)</span><br><span class=\"line\">//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; biased object)</span><br><span class=\"line\">//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span><br><span class=\"line\">//  unused:21 size:35 --&gt;| cms_free:1 unused:7 ------------------&gt;| (COOPs &amp;&amp; CMS free block)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>_metadata</code> 包含一个普通<code>_klass</code>和一个压缩后的<code>_compressed_klass</code>，详细信息参见<a href=\"https://wiki.openjdk.java.net/display/HotSpot/CompressedOops\" target=\"_blank\" rel=\"noopener\">OpenJDK Wiki</a>。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>一个Java对象在JVM中是由一个对应角色的<code>oop</code>对象来描述的，比如<code>instanceOopDesc</code>用来描述普通实例对象，<code>arrayOopDesc</code>用来描述数组对象，而这些类型的oop对象均是继承自<code>oopDesc</code>。 </p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">oopDesc</span> &#123;</span></span><br><span class=\"line\"> <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VMStructs</span>;</span></span><br><span class=\"line\"> <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMCIVMStructs</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"> <span class=\"comment\">// 对象头  </span></span><br><span class=\"line\"> <span class=\"keyword\">volatile</span> markOop _mark;</span><br><span class=\"line\"> <span class=\"comment\">// 元数据</span></span><br><span class=\"line\"> <span class=\"keyword\">union</span> _metadata &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 对应的Klass对象  </span></span><br><span class=\"line\">   Klass*      _klass;</span><br><span class=\"line\">   narrowKlass _compressed_klass;</span><br><span class=\"line\"> &#125; _metadata;</span><br></pre></td></tr></table></figure>\n<p>oopDesc主要包含两部分，一部分是<code>_mark</code>，一部分是<code>_metadata</code>，</p>\n<ul>\n<li><code>_mark</code> _mark是一个<code>markOop</code>实例，它描述了一个对象的头信息，用于存储对象的运行时记录信息，如哈希值、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  32 bits:</span><br><span class=\"line\">//  --------</span><br><span class=\"line\">//             hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span><br><span class=\"line\">//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span><br><span class=\"line\">//             size:32 ------------------------------------------&gt;| (CMS free block)</span><br><span class=\"line\">//             PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span><br><span class=\"line\">//</span><br><span class=\"line\">//  64 bits:</span><br><span class=\"line\">//  --------</span><br><span class=\"line\">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span><br><span class=\"line\">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span><br><span class=\"line\">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span><br><span class=\"line\">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span><br><span class=\"line\">//</span><br><span class=\"line\">//  unused:25 hash:31 --&gt;| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; normal object)</span><br><span class=\"line\">//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; biased object)</span><br><span class=\"line\">//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span><br><span class=\"line\">//  unused:21 size:35 --&gt;| cms_free:1 unused:7 ------------------&gt;| (COOPs &amp;&amp; CMS free block)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>_metadata</code> 包含一个普通<code>_klass</code>和一个压缩后的<code>_compressed_klass</code>，详细信息参见<a href=\"https://wiki.openjdk.java.net/display/HotSpot/CompressedOops\" target=\"_blank\" rel=\"noopener\">OpenJDK Wiki</a>。</li>\n</ul>"},{"title":"【JVM源码探秘】深入System.gc()底层实现","date":"2018-04-05T11:30:00.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n \n对于Java语言来说是不用手动释放内存的，并且不需要手动干预JVM的GC行为，但在一些监控和agent工具里却是必要的。\n\nHotspot为我们开放了Java语言级别的GC手动触发入口`System.gc()`，本文将深入介绍JVM底层实现。\n\n<!-- more -->\n\n# java.lang.System#gc()\n\n```java\n    /**\n     * Runs the garbage collector.\n     * <p>\n     * Calling the <code>gc</code> method suggests that the Java Virtual\n     * Machine expend effort toward recycling unused objects in order to\n     * make the memory they currently occupy available for quick reuse.\n     * When control returns from the method call, the Java Virtual\n     * Machine has made a best effort to reclaim space from all discarded\n     * objects.\n     * <p>\n     * The call <code>System.gc()</code> is effectively equivalent to the\n     * call:\n     * <blockquote><pre>\n     * Runtime.getRuntime().gc()\n     * </pre></blockquote>\n     *\n     * @see     java.lang.Runtime#gc()\n     */\n    public static void gc() {\n        Runtime.getRuntime().gc();\n    }\n```\n\n# java.lang.Runtime#gc()\n\n```java\n    /**\n     * Runs the garbage collector.\n     * Calling this method suggests that the Java virtual machine expend\n     * effort toward recycling unused objects in order to make the memory\n     * they currently occupy available for quick reuse. When control\n     * returns from the method call, the virtual machine has made\n     * its best effort to recycle all discarded objects.\n     * <p>\n     * The name <code>gc</code> stands for \"garbage\n     * collector\". The virtual machine performs this recycling\n     * process automatically as needed, in a separate thread, even if the\n     * <code>gc</code> method is not invoked explicitly.\n     * <p>\n     * The method {@link System#gc()} is the conventional and convenient\n     * means of invoking this method.\n     */\n    public native void gc();\n```\n\n# Runtime.c #  Java_java_lang_Runtime_gc()\n这里调用了native方法`gc()`，对应的方法在Hotspot源码`src/java.base/share/native/libjava/Runtime.c`\n\n```c\nJNIEXPORT void JNICALL\nJava_java_lang_Runtime_gc(JNIEnv *env, jobject this)\n{\n    JVM_GC();\n}\n```\n\n# jvm.cpp\n\n方法实现在`src/hotspot/share/prims/jvm.cpp`\n\n```c\nJVM_ENTRY_NO_ENV(void, JVM_GC(void))\n  JVMWrapper(\"JVM_GC\");\n  if (!DisableExplicitGC) {\n     // 调用具体堆实现的collect方法\n    Universe::heap()->collect(GCCause::_java_lang_system_gc);\n  }\nJVM_END\n```\n\n通过Universe调用具体堆实现的collect方法，取决于使用当前实例使用的GC模式，在JVM中目前堆实现主要有：\n- 串行回收堆实现\n    - src/hotspot/share/gc/serial/defNewGeneration.cpp（年轻代）\n    - src/hotspot/share/gc/serial/tenuredGeneration.cpp（年老代）\n- 并行回收堆实现\n    - src/hotspot/share/gc/parallel/parallelScavengeHeap.cpp\n- CMS并发回收堆实现\n    - src/hotspot/share/gc/shared/genCollectedHeap.cpp\n- G1并发回收堆实现\n    - src/hotspot/share/gc/g1/g1CollectedHeap.cpp\n\n\n\n# 串行回收堆（年轻代）\n```c\nvoid DefNewGeneration::collect(bool   full,\n                               bool   clear_all_soft_refs,\n                               size_t size,\n                               bool   is_tlab) {\n  assert(full || size > 0, \"otherwise we don't want to collect\");\n\n  GenCollectedHeap* gch = GenCollectedHeap::heap();\n\n  _gc_timer->register_gc_start();\n  DefNewTracer gc_tracer;\n  gc_tracer.report_gc_start(gch->gc_cause(), _gc_timer->gc_start());\n\n  _old_gen = gch->old_gen();\n\n  // 如果下个代空间不足以容纳当前代空间中即将晋升的对象，则标记让下个代空间先进行回收\n  // If the next generation is too full to accommodate promotion\n  // from this generation, pass on collection; let the next generation\n  // do it.\n  if (!collection_attempt_is_safe()) {\n    log_trace(gc)(\":: Collection attempt not safe ::\");\n    gch->set_incremental_collection_failed(); // Slight lie: we did not even attempt one\n    return;\n  }\n  assert(to()->is_empty(), \"Else not collection_attempt_is_safe\");\n\n  init_assuming_no_promotion_failure();\n\n  GCTraceTime(Trace, gc, phases) tm(\"DefNew\", NULL, gch->gc_cause());\n\n  gch->trace_heap_before_gc(&gc_tracer);\n\n  // These can be shared for all code paths\n  IsAliveClosure is_alive(this);\n  ScanWeakRefClosure scan_weak_ref(this);\n\n  age_table()->clear();\n  to()->clear(SpaceDecorator::Mangle);\n  // The preserved marks should be empty at the start of the GC.\n  _preserved_marks_set.init(1);\n\n  gch->rem_set()->prepare_for_younger_refs_iterate(false);\n\n  assert(gch->no_allocs_since_save_marks(),\n         \"save marks have not been newly set.\");\n\n  // Not very pretty.\n  CollectorPolicy* cp = gch->collector_policy();\n\n  FastScanClosure fsc_with_no_gc_barrier(this, false);\n  FastScanClosure fsc_with_gc_barrier(this, true);\n\n  KlassScanClosure klass_scan_closure(&fsc_with_no_gc_barrier,\n                                      gch->rem_set()->klass_rem_set());\n  CLDToKlassAndOopClosure cld_scan_closure(&klass_scan_closure,\n                                           &fsc_with_no_gc_barrier,\n                                           false);\n\n  set_promo_failure_scan_stack_closure(&fsc_with_no_gc_barrier);\n  FastEvacuateFollowersClosure evacuate_followers(gch,\n                                                  &fsc_with_no_gc_barrier,\n                                                  &fsc_with_gc_barrier);\n\n  assert(gch->no_allocs_since_save_marks(),\n         \"save marks have not been newly set.\");\n\n  {\n    // DefNew needs to run with n_threads == 0, to make sure the serial\n    // version of the card table scanning code is used.\n    // See: CardTableModRefBSForCTRS::non_clean_card_iterate_possibly_parallel.\n    StrongRootsScope srs(0);\n\n    gch->young_process_roots(&srs,\n                             &fsc_with_no_gc_barrier,\n                             &fsc_with_gc_barrier,\n                             &cld_scan_closure);\n  }\n\n  // \"evacuate followers\".\n  evacuate_followers.do_void();\n\n  FastKeepAliveClosure keep_alive(this, &scan_weak_ref);\n  ReferenceProcessor* rp = ref_processor();\n  rp->setup_policy(clear_all_soft_refs);\n  ReferenceProcessorPhaseTimes pt(_gc_timer, rp->num_q());\n  const ReferenceProcessorStats& stats =\n  rp->process_discovered_references(&is_alive, &keep_alive, &evacuate_followers,\n                                    NULL, &pt);\n  gc_tracer.report_gc_reference_stats(stats);\n  gc_tracer.report_tenuring_threshold(tenuring_threshold());\n  pt.print_all_references();\n\n  if (!_promotion_failed) {\n    // Swap the survivor spaces.\n    eden()->clear(SpaceDecorator::Mangle);\n    from()->clear(SpaceDecorator::Mangle);\n    if (ZapUnusedHeapArea) {\n      // This is now done here because of the piece-meal mangling which\n      // can check for valid mangling at intermediate points in the\n      // collection(s).  When a young collection fails to collect\n      // sufficient space resizing of the young generation can occur\n      // an redistribute the spaces in the young generation.  Mangle\n      // here so that unzapped regions don't get distributed to\n      // other spaces.\n      to()->mangle_unused_area();\n    }\n    swap_spaces();\n\n    assert(to()->is_empty(), \"to space should be empty now\");\n\n    adjust_desired_tenuring_threshold();\n\n    // A successful scavenge should restart the GC time limit count which is\n    // for full GC's.\n    AdaptiveSizePolicy* size_policy = gch->gen_policy()->size_policy();\n    size_policy->reset_gc_overhead_limit_count();\n    assert(!gch->incremental_collection_failed(), \"Should be clear\");\n  } else {\n    assert(_promo_failure_scan_stack.is_empty(), \"post condition\");\n    _promo_failure_scan_stack.clear(true); // Clear cached segments.\n\n    remove_forwarding_pointers();\n    log_info(gc, promotion)(\"Promotion failed\");\n    // Add to-space to the list of space to compact\n    // when a promotion failure has occurred.  In that\n    // case there can be live objects in to-space\n    // as a result of a partial evacuation of eden\n    // and from-space.\n    swap_spaces();   // For uniformity wrt ParNewGeneration.\n    from()->set_next_compaction_space(to());\n    gch->set_incremental_collection_failed();\n\n    // Inform the next generation that a promotion failure occurred.\n    _old_gen->promotion_failure_occurred();\n    gc_tracer.report_promotion_failed(_promotion_failed_info);\n\n    // Reset the PromotionFailureALot counters.\n    NOT_PRODUCT(gch->reset_promotion_should_fail();)\n  }\n  // We should have processed and cleared all the preserved marks.\n  _preserved_marks_set.reclaim();\n  // set new iteration safe limit for the survivor spaces\n  from()->set_concurrent_iteration_safe_limit(from()->top());\n  to()->set_concurrent_iteration_safe_limit(to()->top());\n\n  // We need to use a monotonically non-decreasing time in ms\n  // or we will see time-warp warnings and os::javaTimeMillis()\n  // does not guarantee monotonicity.\n  jlong now = os::javaTimeNanos() / NANOSECS_PER_MILLISEC;\n  update_time_of_last_gc(now);\n\n  gch->trace_heap_after_gc(&gc_tracer);\n\n  _gc_timer->register_gc_end();\n\n  gc_tracer.report_gc_end(_gc_timer->gc_end(), _gc_timer->time_partitions());\n}\n```\n\n\n# 串行回收堆（年老代）\n```c\nvoid TenuredGeneration::collect(bool   full,\n                                bool   clear_all_soft_refs,\n                                size_t size,\n                                bool   is_tlab) {\n  GenCollectedHeap* gch = GenCollectedHeap::heap();\n\n  // Temporarily expand the span of our ref processor, so\n  // refs discovery is over the entire heap, not just this generation\n  ReferenceProcessorSpanMutator\n    x(ref_processor(), gch->reserved_region());\n\n  STWGCTimer* gc_timer = GenMarkSweep::gc_timer();\n  gc_timer->register_gc_start();\n\n  SerialOldTracer* gc_tracer = GenMarkSweep::gc_tracer();\n  gc_tracer->report_gc_start(gch->gc_cause(), gc_timer->gc_start());\n\n  gch->pre_full_gc_dump(gc_timer);\n\n  GenMarkSweep::invoke_at_safepoint(ref_processor(), clear_all_soft_refs);\n\n  gch->post_full_gc_dump(gc_timer);\n\n  gc_timer->register_gc_end();\n\n  gc_tracer->report_gc_end(gc_timer->gc_end(), gc_timer->time_partitions());\n}\n```\n\n# 串行回收堆\n```c\n// This method is used by System.gc() and JVMTI.\nvoid ParallelScavengeHeap::collect(GCCause::Cause cause) {\n  assert(!Heap_lock->owned_by_self(),\n    \"this thread should not own the Heap_lock\");\n\n  uint gc_count      = 0;\n  uint full_gc_count = 0;\n  {\n    MutexLocker ml(Heap_lock);\n    // This value is guarded by the Heap_lock\n    gc_count      = total_collections();\n    full_gc_count = total_full_collections();\n  }\n\n  VM_ParallelGCSystemGC op(gc_count, full_gc_count, cause);\n  VMThread::execute(&op);\n}\n```\n\n\n# CMS分代并发回收堆\n```c\n// public collection interfaces\n\nvoid GenCollectedHeap::collect(GCCause::Cause cause) {\n  if (should_do_concurrent_full_gc(cause)) {\n#if INCLUDE_ALL_GCS\n    // Mostly concurrent full collection.\n    collect_mostly_concurrent(cause);\n#else  // INCLUDE_ALL_GCS\n    ShouldNotReachHere();\n#endif // INCLUDE_ALL_GCS\n  } else if (cause == GCCause::_wb_young_gc) {\n    // Young collection for the WhiteBox API.\n    collect(cause, YoungGen);\n  } else {\n#ifdef ASSERT\n  if (cause == GCCause::_scavenge_alot) {\n    // Young collection only.\n    collect(cause, YoungGen);\n  } else {\n    // Stop-the-world full collection.\n    collect(cause, OldGen);\n  }\n#else\n    // Stop-the-world full collection.\n    collect(cause, OldGen);\n#endif\n  }\n}\n```\n\n\n# G1并发回收堆\n```c\nvoid G1CollectedHeap::collect(GCCause::Cause cause) {\n  assert_heap_not_locked();\n\n  uint gc_count_before;\n  uint old_marking_count_before;\n  uint full_gc_count_before;\n  bool retry_gc;\n\n  do {\n    retry_gc = false;\n\n    {\n      MutexLocker ml(Heap_lock);\n\n      // Read the GC count while holding the Heap_lock\n      gc_count_before = total_collections();\n      full_gc_count_before = total_full_collections();\n      old_marking_count_before = _old_marking_cycles_started;\n    }\n\n    if (should_do_concurrent_full_gc(cause)) {\n      // Schedule an initial-mark evacuation pause that will start a\n      // concurrent cycle. We're setting word_size to 0 which means that\n      // we are not requesting a post-GC allocation.\n      VM_G1IncCollectionPause op(gc_count_before,\n                                 0,     /* word_size */\n                                 true,  /* should_initiate_conc_mark */\n                                 g1_policy()->max_pause_time_ms(),\n                                 cause);\n      op.set_allocation_context(AllocationContext::current());\n\n      VMThread::execute(&op);\n      if (!op.pause_succeeded()) {\n        if (old_marking_count_before == _old_marking_cycles_started) {\n          retry_gc = op.should_retry_gc();\n        } else {\n          // A Full GC happened while we were trying to schedule the\n          // initial-mark GC. No point in starting a new cycle given\n          // that the whole heap was collected anyway.\n        }\n\n        if (retry_gc) {\n          if (GCLocker::is_active_and_needs_gc()) {\n            GCLocker::stall_until_clear();\n          }\n        }\n      }\n    } else {\n      if (cause == GCCause::_gc_locker || cause == GCCause::_wb_young_gc\n          DEBUG_ONLY(|| cause == GCCause::_scavenge_alot)) {\n\n        // Schedule a standard evacuation pause. We're setting word_size\n        // to 0 which means that we are not requesting a post-GC allocation.\n        VM_G1IncCollectionPause op(gc_count_before,\n                                   0,     /* word_size */\n                                   false, /* should_initiate_conc_mark */\n                                   g1_policy()->max_pause_time_ms(),\n                                   cause);\n        VMThread::execute(&op);\n      } else {\n        // Schedule a Full GC.\n        VM_G1CollectFull op(gc_count_before, full_gc_count_before, cause);\n        VMThread::execute(&op);\n      }\n    }\n  } while (retry_gc);\n}\n```\n\n\n\n","source":"_posts/2018/04/05/analysis-of-hotspot-jvm-system-gc.md","raw":"---\ntitle: 【JVM源码探秘】深入System.gc()底层实现\ndate: 2018-04-05 19:30:00\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n \n对于Java语言来说是不用手动释放内存的，并且不需要手动干预JVM的GC行为，但在一些监控和agent工具里却是必要的。\n\nHotspot为我们开放了Java语言级别的GC手动触发入口`System.gc()`，本文将深入介绍JVM底层实现。\n\n<!-- more -->\n\n# java.lang.System#gc()\n\n```java\n    /**\n     * Runs the garbage collector.\n     * <p>\n     * Calling the <code>gc</code> method suggests that the Java Virtual\n     * Machine expend effort toward recycling unused objects in order to\n     * make the memory they currently occupy available for quick reuse.\n     * When control returns from the method call, the Java Virtual\n     * Machine has made a best effort to reclaim space from all discarded\n     * objects.\n     * <p>\n     * The call <code>System.gc()</code> is effectively equivalent to the\n     * call:\n     * <blockquote><pre>\n     * Runtime.getRuntime().gc()\n     * </pre></blockquote>\n     *\n     * @see     java.lang.Runtime#gc()\n     */\n    public static void gc() {\n        Runtime.getRuntime().gc();\n    }\n```\n\n# java.lang.Runtime#gc()\n\n```java\n    /**\n     * Runs the garbage collector.\n     * Calling this method suggests that the Java virtual machine expend\n     * effort toward recycling unused objects in order to make the memory\n     * they currently occupy available for quick reuse. When control\n     * returns from the method call, the virtual machine has made\n     * its best effort to recycle all discarded objects.\n     * <p>\n     * The name <code>gc</code> stands for \"garbage\n     * collector\". The virtual machine performs this recycling\n     * process automatically as needed, in a separate thread, even if the\n     * <code>gc</code> method is not invoked explicitly.\n     * <p>\n     * The method {@link System#gc()} is the conventional and convenient\n     * means of invoking this method.\n     */\n    public native void gc();\n```\n\n# Runtime.c #  Java_java_lang_Runtime_gc()\n这里调用了native方法`gc()`，对应的方法在Hotspot源码`src/java.base/share/native/libjava/Runtime.c`\n\n```c\nJNIEXPORT void JNICALL\nJava_java_lang_Runtime_gc(JNIEnv *env, jobject this)\n{\n    JVM_GC();\n}\n```\n\n# jvm.cpp\n\n方法实现在`src/hotspot/share/prims/jvm.cpp`\n\n```c\nJVM_ENTRY_NO_ENV(void, JVM_GC(void))\n  JVMWrapper(\"JVM_GC\");\n  if (!DisableExplicitGC) {\n     // 调用具体堆实现的collect方法\n    Universe::heap()->collect(GCCause::_java_lang_system_gc);\n  }\nJVM_END\n```\n\n通过Universe调用具体堆实现的collect方法，取决于使用当前实例使用的GC模式，在JVM中目前堆实现主要有：\n- 串行回收堆实现\n    - src/hotspot/share/gc/serial/defNewGeneration.cpp（年轻代）\n    - src/hotspot/share/gc/serial/tenuredGeneration.cpp（年老代）\n- 并行回收堆实现\n    - src/hotspot/share/gc/parallel/parallelScavengeHeap.cpp\n- CMS并发回收堆实现\n    - src/hotspot/share/gc/shared/genCollectedHeap.cpp\n- G1并发回收堆实现\n    - src/hotspot/share/gc/g1/g1CollectedHeap.cpp\n\n\n\n# 串行回收堆（年轻代）\n```c\nvoid DefNewGeneration::collect(bool   full,\n                               bool   clear_all_soft_refs,\n                               size_t size,\n                               bool   is_tlab) {\n  assert(full || size > 0, \"otherwise we don't want to collect\");\n\n  GenCollectedHeap* gch = GenCollectedHeap::heap();\n\n  _gc_timer->register_gc_start();\n  DefNewTracer gc_tracer;\n  gc_tracer.report_gc_start(gch->gc_cause(), _gc_timer->gc_start());\n\n  _old_gen = gch->old_gen();\n\n  // 如果下个代空间不足以容纳当前代空间中即将晋升的对象，则标记让下个代空间先进行回收\n  // If the next generation is too full to accommodate promotion\n  // from this generation, pass on collection; let the next generation\n  // do it.\n  if (!collection_attempt_is_safe()) {\n    log_trace(gc)(\":: Collection attempt not safe ::\");\n    gch->set_incremental_collection_failed(); // Slight lie: we did not even attempt one\n    return;\n  }\n  assert(to()->is_empty(), \"Else not collection_attempt_is_safe\");\n\n  init_assuming_no_promotion_failure();\n\n  GCTraceTime(Trace, gc, phases) tm(\"DefNew\", NULL, gch->gc_cause());\n\n  gch->trace_heap_before_gc(&gc_tracer);\n\n  // These can be shared for all code paths\n  IsAliveClosure is_alive(this);\n  ScanWeakRefClosure scan_weak_ref(this);\n\n  age_table()->clear();\n  to()->clear(SpaceDecorator::Mangle);\n  // The preserved marks should be empty at the start of the GC.\n  _preserved_marks_set.init(1);\n\n  gch->rem_set()->prepare_for_younger_refs_iterate(false);\n\n  assert(gch->no_allocs_since_save_marks(),\n         \"save marks have not been newly set.\");\n\n  // Not very pretty.\n  CollectorPolicy* cp = gch->collector_policy();\n\n  FastScanClosure fsc_with_no_gc_barrier(this, false);\n  FastScanClosure fsc_with_gc_barrier(this, true);\n\n  KlassScanClosure klass_scan_closure(&fsc_with_no_gc_barrier,\n                                      gch->rem_set()->klass_rem_set());\n  CLDToKlassAndOopClosure cld_scan_closure(&klass_scan_closure,\n                                           &fsc_with_no_gc_barrier,\n                                           false);\n\n  set_promo_failure_scan_stack_closure(&fsc_with_no_gc_barrier);\n  FastEvacuateFollowersClosure evacuate_followers(gch,\n                                                  &fsc_with_no_gc_barrier,\n                                                  &fsc_with_gc_barrier);\n\n  assert(gch->no_allocs_since_save_marks(),\n         \"save marks have not been newly set.\");\n\n  {\n    // DefNew needs to run with n_threads == 0, to make sure the serial\n    // version of the card table scanning code is used.\n    // See: CardTableModRefBSForCTRS::non_clean_card_iterate_possibly_parallel.\n    StrongRootsScope srs(0);\n\n    gch->young_process_roots(&srs,\n                             &fsc_with_no_gc_barrier,\n                             &fsc_with_gc_barrier,\n                             &cld_scan_closure);\n  }\n\n  // \"evacuate followers\".\n  evacuate_followers.do_void();\n\n  FastKeepAliveClosure keep_alive(this, &scan_weak_ref);\n  ReferenceProcessor* rp = ref_processor();\n  rp->setup_policy(clear_all_soft_refs);\n  ReferenceProcessorPhaseTimes pt(_gc_timer, rp->num_q());\n  const ReferenceProcessorStats& stats =\n  rp->process_discovered_references(&is_alive, &keep_alive, &evacuate_followers,\n                                    NULL, &pt);\n  gc_tracer.report_gc_reference_stats(stats);\n  gc_tracer.report_tenuring_threshold(tenuring_threshold());\n  pt.print_all_references();\n\n  if (!_promotion_failed) {\n    // Swap the survivor spaces.\n    eden()->clear(SpaceDecorator::Mangle);\n    from()->clear(SpaceDecorator::Mangle);\n    if (ZapUnusedHeapArea) {\n      // This is now done here because of the piece-meal mangling which\n      // can check for valid mangling at intermediate points in the\n      // collection(s).  When a young collection fails to collect\n      // sufficient space resizing of the young generation can occur\n      // an redistribute the spaces in the young generation.  Mangle\n      // here so that unzapped regions don't get distributed to\n      // other spaces.\n      to()->mangle_unused_area();\n    }\n    swap_spaces();\n\n    assert(to()->is_empty(), \"to space should be empty now\");\n\n    adjust_desired_tenuring_threshold();\n\n    // A successful scavenge should restart the GC time limit count which is\n    // for full GC's.\n    AdaptiveSizePolicy* size_policy = gch->gen_policy()->size_policy();\n    size_policy->reset_gc_overhead_limit_count();\n    assert(!gch->incremental_collection_failed(), \"Should be clear\");\n  } else {\n    assert(_promo_failure_scan_stack.is_empty(), \"post condition\");\n    _promo_failure_scan_stack.clear(true); // Clear cached segments.\n\n    remove_forwarding_pointers();\n    log_info(gc, promotion)(\"Promotion failed\");\n    // Add to-space to the list of space to compact\n    // when a promotion failure has occurred.  In that\n    // case there can be live objects in to-space\n    // as a result of a partial evacuation of eden\n    // and from-space.\n    swap_spaces();   // For uniformity wrt ParNewGeneration.\n    from()->set_next_compaction_space(to());\n    gch->set_incremental_collection_failed();\n\n    // Inform the next generation that a promotion failure occurred.\n    _old_gen->promotion_failure_occurred();\n    gc_tracer.report_promotion_failed(_promotion_failed_info);\n\n    // Reset the PromotionFailureALot counters.\n    NOT_PRODUCT(gch->reset_promotion_should_fail();)\n  }\n  // We should have processed and cleared all the preserved marks.\n  _preserved_marks_set.reclaim();\n  // set new iteration safe limit for the survivor spaces\n  from()->set_concurrent_iteration_safe_limit(from()->top());\n  to()->set_concurrent_iteration_safe_limit(to()->top());\n\n  // We need to use a monotonically non-decreasing time in ms\n  // or we will see time-warp warnings and os::javaTimeMillis()\n  // does not guarantee monotonicity.\n  jlong now = os::javaTimeNanos() / NANOSECS_PER_MILLISEC;\n  update_time_of_last_gc(now);\n\n  gch->trace_heap_after_gc(&gc_tracer);\n\n  _gc_timer->register_gc_end();\n\n  gc_tracer.report_gc_end(_gc_timer->gc_end(), _gc_timer->time_partitions());\n}\n```\n\n\n# 串行回收堆（年老代）\n```c\nvoid TenuredGeneration::collect(bool   full,\n                                bool   clear_all_soft_refs,\n                                size_t size,\n                                bool   is_tlab) {\n  GenCollectedHeap* gch = GenCollectedHeap::heap();\n\n  // Temporarily expand the span of our ref processor, so\n  // refs discovery is over the entire heap, not just this generation\n  ReferenceProcessorSpanMutator\n    x(ref_processor(), gch->reserved_region());\n\n  STWGCTimer* gc_timer = GenMarkSweep::gc_timer();\n  gc_timer->register_gc_start();\n\n  SerialOldTracer* gc_tracer = GenMarkSweep::gc_tracer();\n  gc_tracer->report_gc_start(gch->gc_cause(), gc_timer->gc_start());\n\n  gch->pre_full_gc_dump(gc_timer);\n\n  GenMarkSweep::invoke_at_safepoint(ref_processor(), clear_all_soft_refs);\n\n  gch->post_full_gc_dump(gc_timer);\n\n  gc_timer->register_gc_end();\n\n  gc_tracer->report_gc_end(gc_timer->gc_end(), gc_timer->time_partitions());\n}\n```\n\n# 串行回收堆\n```c\n// This method is used by System.gc() and JVMTI.\nvoid ParallelScavengeHeap::collect(GCCause::Cause cause) {\n  assert(!Heap_lock->owned_by_self(),\n    \"this thread should not own the Heap_lock\");\n\n  uint gc_count      = 0;\n  uint full_gc_count = 0;\n  {\n    MutexLocker ml(Heap_lock);\n    // This value is guarded by the Heap_lock\n    gc_count      = total_collections();\n    full_gc_count = total_full_collections();\n  }\n\n  VM_ParallelGCSystemGC op(gc_count, full_gc_count, cause);\n  VMThread::execute(&op);\n}\n```\n\n\n# CMS分代并发回收堆\n```c\n// public collection interfaces\n\nvoid GenCollectedHeap::collect(GCCause::Cause cause) {\n  if (should_do_concurrent_full_gc(cause)) {\n#if INCLUDE_ALL_GCS\n    // Mostly concurrent full collection.\n    collect_mostly_concurrent(cause);\n#else  // INCLUDE_ALL_GCS\n    ShouldNotReachHere();\n#endif // INCLUDE_ALL_GCS\n  } else if (cause == GCCause::_wb_young_gc) {\n    // Young collection for the WhiteBox API.\n    collect(cause, YoungGen);\n  } else {\n#ifdef ASSERT\n  if (cause == GCCause::_scavenge_alot) {\n    // Young collection only.\n    collect(cause, YoungGen);\n  } else {\n    // Stop-the-world full collection.\n    collect(cause, OldGen);\n  }\n#else\n    // Stop-the-world full collection.\n    collect(cause, OldGen);\n#endif\n  }\n}\n```\n\n\n# G1并发回收堆\n```c\nvoid G1CollectedHeap::collect(GCCause::Cause cause) {\n  assert_heap_not_locked();\n\n  uint gc_count_before;\n  uint old_marking_count_before;\n  uint full_gc_count_before;\n  bool retry_gc;\n\n  do {\n    retry_gc = false;\n\n    {\n      MutexLocker ml(Heap_lock);\n\n      // Read the GC count while holding the Heap_lock\n      gc_count_before = total_collections();\n      full_gc_count_before = total_full_collections();\n      old_marking_count_before = _old_marking_cycles_started;\n    }\n\n    if (should_do_concurrent_full_gc(cause)) {\n      // Schedule an initial-mark evacuation pause that will start a\n      // concurrent cycle. We're setting word_size to 0 which means that\n      // we are not requesting a post-GC allocation.\n      VM_G1IncCollectionPause op(gc_count_before,\n                                 0,     /* word_size */\n                                 true,  /* should_initiate_conc_mark */\n                                 g1_policy()->max_pause_time_ms(),\n                                 cause);\n      op.set_allocation_context(AllocationContext::current());\n\n      VMThread::execute(&op);\n      if (!op.pause_succeeded()) {\n        if (old_marking_count_before == _old_marking_cycles_started) {\n          retry_gc = op.should_retry_gc();\n        } else {\n          // A Full GC happened while we were trying to schedule the\n          // initial-mark GC. No point in starting a new cycle given\n          // that the whole heap was collected anyway.\n        }\n\n        if (retry_gc) {\n          if (GCLocker::is_active_and_needs_gc()) {\n            GCLocker::stall_until_clear();\n          }\n        }\n      }\n    } else {\n      if (cause == GCCause::_gc_locker || cause == GCCause::_wb_young_gc\n          DEBUG_ONLY(|| cause == GCCause::_scavenge_alot)) {\n\n        // Schedule a standard evacuation pause. We're setting word_size\n        // to 0 which means that we are not requesting a post-GC allocation.\n        VM_G1IncCollectionPause op(gc_count_before,\n                                   0,     /* word_size */\n                                   false, /* should_initiate_conc_mark */\n                                   g1_policy()->max_pause_time_ms(),\n                                   cause);\n        VMThread::execute(&op);\n      } else {\n        // Schedule a Full GC.\n        VM_G1CollectFull op(gc_count_before, full_gc_count_before, cause);\n        VMThread::execute(&op);\n      }\n    }\n  } while (retry_gc);\n}\n```\n\n\n\n","slug":"analysis-of-hotspot-jvm-system-gc","published":1,"updated":"2018-06-03T17:40:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2l001y2zs6aq19p1og","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>对于Java语言来说是不用手动释放内存的，并且不需要手动干预JVM的GC行为，但在一些监控和agent工具里却是必要的。</p>\n<p>Hotspot为我们开放了Java语言级别的GC手动触发入口<code>System.gc()</code>，本文将深入介绍JVM底层实现。</p>\n<a id=\"more\"></a>\n<h1 id=\"java-lang-System-gc\"><a href=\"#java-lang-System-gc\" class=\"headerlink\" title=\"java.lang.System#gc()\"></a>java.lang.System#gc()</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Runs the garbage collector.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Calling the &lt;code&gt;gc&lt;/code&gt; method suggests that the Java Virtual</span></span><br><span class=\"line\"><span class=\"comment\"> * Machine expend effort toward recycling unused objects in order to</span></span><br><span class=\"line\"><span class=\"comment\"> * make the memory they currently occupy available for quick reuse.</span></span><br><span class=\"line\"><span class=\"comment\"> * When control returns from the method call, the Java Virtual</span></span><br><span class=\"line\"><span class=\"comment\"> * Machine has made a best effort to reclaim space from all discarded</span></span><br><span class=\"line\"><span class=\"comment\"> * objects.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The call &lt;code&gt;System.gc()&lt;/code&gt; is effectively equivalent to the</span></span><br><span class=\"line\"><span class=\"comment\"> * call:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Runtime.getRuntime().gc()</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>     java.lang.Runtime#gc()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Runtime.getRuntime().gc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"java-lang-Runtime-gc\"><a href=\"#java-lang-Runtime-gc\" class=\"headerlink\" title=\"java.lang.Runtime#gc()\"></a>java.lang.Runtime#gc()</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Runs the garbage collector.</span></span><br><span class=\"line\"><span class=\"comment\"> * Calling this method suggests that the Java virtual machine expend</span></span><br><span class=\"line\"><span class=\"comment\"> * effort toward recycling unused objects in order to make the memory</span></span><br><span class=\"line\"><span class=\"comment\"> * they currently occupy available for quick reuse. When control</span></span><br><span class=\"line\"><span class=\"comment\"> * returns from the method call, the virtual machine has made</span></span><br><span class=\"line\"><span class=\"comment\"> * its best effort to recycle all discarded objects.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The name &lt;code&gt;gc&lt;/code&gt; stands for \"garbage</span></span><br><span class=\"line\"><span class=\"comment\"> * collector\". The virtual machine performs this recycling</span></span><br><span class=\"line\"><span class=\"comment\"> * process automatically as needed, in a separate thread, even if the</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;gc&lt;/code&gt; method is not invoked explicitly.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The method &#123;<span class=\"doctag\">@link</span> System#gc()&#125; is the conventional and convenient</span></span><br><span class=\"line\"><span class=\"comment\"> * means of invoking this method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Runtime-c-Java-java-lang-Runtime-gc\"><a href=\"#Runtime-c-Java-java-lang-Runtime-gc\" class=\"headerlink\" title=\"Runtime.c #  Java_java_lang_Runtime_gc()\"></a>Runtime.c #  Java_java_lang_Runtime_gc()</h1><p>这里调用了native方法<code>gc()</code>，对应的方法在Hotspot源码<code>src/java.base/share/native/libjava/Runtime.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL</span><br><span class=\"line\">Java_java_lang_Runtime_gc(JNIEnv *env, jobject <span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JVM_GC();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jvm-cpp\"><a href=\"#jvm-cpp\" class=\"headerlink\" title=\"jvm.cpp\"></a>jvm.cpp</h1><p>方法实现在<code>src/hotspot/share/prims/jvm.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JVM_ENTRY_NO_ENV(<span class=\"keyword\">void</span>, JVM_GC(<span class=\"keyword\">void</span>))</span><br><span class=\"line\">  JVMWrapper(<span class=\"string\">\"JVM_GC\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!DisableExplicitGC) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 调用具体堆实现的collect方法</span></span><br><span class=\"line\">    Universe::heap()-&gt;collect(GCCause::_java_lang_system_gc);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">JVM_END</span><br></pre></td></tr></table></figure>\n<p>通过Universe调用具体堆实现的collect方法，取决于使用当前实例使用的GC模式，在JVM中目前堆实现主要有：</p>\n<ul>\n<li>串行回收堆实现<ul>\n<li>src/hotspot/share/gc/serial/defNewGeneration.cpp（年轻代）</li>\n<li>src/hotspot/share/gc/serial/tenuredGeneration.cpp（年老代）</li>\n</ul>\n</li>\n<li>并行回收堆实现<ul>\n<li>src/hotspot/share/gc/parallel/parallelScavengeHeap.cpp</li>\n</ul>\n</li>\n<li>CMS并发回收堆实现<ul>\n<li>src/hotspot/share/gc/shared/genCollectedHeap.cpp</li>\n</ul>\n</li>\n<li>G1并发回收堆实现<ul>\n<li>src/hotspot/share/gc/g1/g1CollectedHeap.cpp</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"串行回收堆（年轻代）\"><a href=\"#串行回收堆（年轻代）\" class=\"headerlink\" title=\"串行回收堆（年轻代）\"></a>串行回收堆（年轻代）</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> DefNewGeneration::collect(<span class=\"keyword\">bool</span>   full,</span><br><span class=\"line\">                               <span class=\"keyword\">bool</span>   clear_all_soft_refs,</span><br><span class=\"line\">                               <span class=\"keyword\">size_t</span> size,</span><br><span class=\"line\">                               <span class=\"keyword\">bool</span>   is_tlab) &#123;</span><br><span class=\"line\">  assert(full || size &gt; <span class=\"number\">0</span>, <span class=\"string\">\"otherwise we don't want to collect\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  GenCollectedHeap* gch = GenCollectedHeap::heap();</span><br><span class=\"line\"></span><br><span class=\"line\">  _gc_timer-&gt;register_gc_start();</span><br><span class=\"line\">  DefNewTracer gc_tracer;</span><br><span class=\"line\">  gc_tracer.report_gc_start(gch-&gt;gc_cause(), _gc_timer-&gt;gc_start());</span><br><span class=\"line\"></span><br><span class=\"line\">  _old_gen = gch-&gt;old_gen();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果下个代空间不足以容纳当前代空间中即将晋升的对象，则标记让下个代空间先进行回收</span></span><br><span class=\"line\">  <span class=\"comment\">// If the next generation is too full to accommodate promotion</span></span><br><span class=\"line\">  <span class=\"comment\">// from this generation, pass on collection; let the next generation</span></span><br><span class=\"line\">  <span class=\"comment\">// do it.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!collection_attempt_is_safe()) &#123;</span><br><span class=\"line\">    log_trace(gc)(<span class=\"string\">\":: Collection attempt not safe ::\"</span>);</span><br><span class=\"line\">    gch-&gt;set_incremental_collection_failed(); <span class=\"comment\">// Slight lie: we did not even attempt one</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  assert(to()-&gt;is_empty(), <span class=\"string\">\"Else not collection_attempt_is_safe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  init_assuming_no_promotion_failure();</span><br><span class=\"line\"></span><br><span class=\"line\">  GCTraceTime(Trace, gc, phases) tm(<span class=\"string\">\"DefNew\"</span>, <span class=\"literal\">NULL</span>, gch-&gt;gc_cause());</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;trace_heap_before_gc(&amp;gc_tracer);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// These can be shared for all code paths</span></span><br><span class=\"line\">  <span class=\"function\">IsAliveClosure <span class=\"title\">is_alive</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">ScanWeakRefClosure <span class=\"title\">scan_weak_ref</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  age_table()-&gt;clear();</span><br><span class=\"line\">  to()-&gt;clear(SpaceDecorator::Mangle);</span><br><span class=\"line\">  <span class=\"comment\">// The preserved marks should be empty at the start of the GC.</span></span><br><span class=\"line\">  _preserved_marks_set.init(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;rem_set()-&gt;prepare_for_younger_refs_iterate(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  assert(gch-&gt;no_allocs_since_save_marks(),</span><br><span class=\"line\">         <span class=\"string\">\"save marks have not been newly set.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Not very pretty.</span></span><br><span class=\"line\">  CollectorPolicy* cp = gch-&gt;collector_policy();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">FastScanClosure <span class=\"title\">fsc_with_no_gc_barrier</span><span class=\"params\">(<span class=\"keyword\">this</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">FastScanClosure <span class=\"title\">fsc_with_gc_barrier</span><span class=\"params\">(<span class=\"keyword\">this</span>, <span class=\"literal\">true</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">KlassScanClosure <span class=\"title\">klass_scan_closure</span><span class=\"params\">(&amp;fsc_with_no_gc_barrier,</span></span></span><br><span class=\"line\">                                      gch-&gt;rem_set()-&gt;klass_rem_set());</span><br><span class=\"line\">  <span class=\"function\">CLDToKlassAndOopClosure <span class=\"title\">cld_scan_closure</span><span class=\"params\">(&amp;klass_scan_closure,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                           &amp;fsc_with_no_gc_barrier,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                           <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  set_promo_failure_scan_stack_closure(&amp;fsc_with_no_gc_barrier);</span><br><span class=\"line\">  <span class=\"function\">FastEvacuateFollowersClosure <span class=\"title\">evacuate_followers</span><span class=\"params\">(gch,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                  &amp;fsc_with_no_gc_barrier,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                  &amp;fsc_with_gc_barrier)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  assert(gch-&gt;no_allocs_since_save_marks(),</span><br><span class=\"line\">         <span class=\"string\">\"save marks have not been newly set.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// DefNew needs to run with n_threads == 0, to make sure the serial</span></span><br><span class=\"line\">    <span class=\"comment\">// version of the card table scanning code is used.</span></span><br><span class=\"line\">    <span class=\"comment\">// See: CardTableModRefBSForCTRS::non_clean_card_iterate_possibly_parallel.</span></span><br><span class=\"line\">    <span class=\"function\">StrongRootsScope <span class=\"title\">srs</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    gch-&gt;young_process_roots(&amp;srs,</span><br><span class=\"line\">                             &amp;fsc_with_no_gc_barrier,</span><br><span class=\"line\">                             &amp;fsc_with_gc_barrier,</span><br><span class=\"line\">                             &amp;cld_scan_closure);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// \"evacuate followers\".</span></span><br><span class=\"line\">  evacuate_followers.do_void();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">FastKeepAliveClosure <span class=\"title\">keep_alive</span><span class=\"params\">(<span class=\"keyword\">this</span>, &amp;scan_weak_ref)</span></span>;</span><br><span class=\"line\">  ReferenceProcessor* rp = ref_processor();</span><br><span class=\"line\">  rp-&gt;setup_policy(clear_all_soft_refs);</span><br><span class=\"line\">  ReferenceProcessorPhaseTimes pt(_gc_timer, rp-&gt;num_q());</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ReferenceProcessorStats&amp; stats =</span><br><span class=\"line\">  rp-&gt;process_discovered_references(&amp;is_alive, &amp;keep_alive, &amp;evacuate_followers,</span><br><span class=\"line\">                                    <span class=\"literal\">NULL</span>, &amp;pt);</span><br><span class=\"line\">  gc_tracer.report_gc_reference_stats(stats);</span><br><span class=\"line\">  gc_tracer.report_tenuring_threshold(tenuring_threshold());</span><br><span class=\"line\">  pt.print_all_references();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!_promotion_failed) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Swap the survivor spaces.</span></span><br><span class=\"line\">    eden()-&gt;clear(SpaceDecorator::Mangle);</span><br><span class=\"line\">    from()-&gt;clear(SpaceDecorator::Mangle);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ZapUnusedHeapArea) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// This is now done here because of the piece-meal mangling which</span></span><br><span class=\"line\">      <span class=\"comment\">// can check for valid mangling at intermediate points in the</span></span><br><span class=\"line\">      <span class=\"comment\">// collection(s).  When a young collection fails to collect</span></span><br><span class=\"line\">      <span class=\"comment\">// sufficient space resizing of the young generation can occur</span></span><br><span class=\"line\">      <span class=\"comment\">// an redistribute the spaces in the young generation.  Mangle</span></span><br><span class=\"line\">      <span class=\"comment\">// here so that unzapped regions don't get distributed to</span></span><br><span class=\"line\">      <span class=\"comment\">// other spaces.</span></span><br><span class=\"line\">      to()-&gt;mangle_unused_area();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap_spaces();</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(to()-&gt;is_empty(), <span class=\"string\">\"to space should be empty now\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    adjust_desired_tenuring_threshold();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// A successful scavenge should restart the GC time limit count which is</span></span><br><span class=\"line\">    <span class=\"comment\">// for full GC's.</span></span><br><span class=\"line\">    AdaptiveSizePolicy* size_policy = gch-&gt;gen_policy()-&gt;size_policy();</span><br><span class=\"line\">    size_policy-&gt;reset_gc_overhead_limit_count();</span><br><span class=\"line\">    assert(!gch-&gt;incremental_collection_failed(), <span class=\"string\">\"Should be clear\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assert(_promo_failure_scan_stack.is_empty(), <span class=\"string\">\"post condition\"</span>);</span><br><span class=\"line\">    _promo_failure_scan_stack.clear(<span class=\"literal\">true</span>); <span class=\"comment\">// Clear cached segments.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    remove_forwarding_pointers();</span><br><span class=\"line\">    log_info(gc, promotion)(<span class=\"string\">\"Promotion failed\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Add to-space to the list of space to compact</span></span><br><span class=\"line\">    <span class=\"comment\">// when a promotion failure has occurred.  In that</span></span><br><span class=\"line\">    <span class=\"comment\">// case there can be live objects in to-space</span></span><br><span class=\"line\">    <span class=\"comment\">// as a result of a partial evacuation of eden</span></span><br><span class=\"line\">    <span class=\"comment\">// and from-space.</span></span><br><span class=\"line\">    swap_spaces();   <span class=\"comment\">// For uniformity wrt ParNewGeneration.</span></span><br><span class=\"line\">    from()-&gt;set_next_compaction_space(to());</span><br><span class=\"line\">    gch-&gt;set_incremental_collection_failed();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Inform the next generation that a promotion failure occurred.</span></span><br><span class=\"line\">    _old_gen-&gt;promotion_failure_occurred();</span><br><span class=\"line\">    gc_tracer.report_promotion_failed(_promotion_failed_info);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Reset the PromotionFailureALot counters.</span></span><br><span class=\"line\">    NOT_PRODUCT(gch-&gt;reset_promotion_should_fail();)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We should have processed and cleared all the preserved marks.</span></span><br><span class=\"line\">  _preserved_marks_set.reclaim();</span><br><span class=\"line\">  <span class=\"comment\">// set new iteration safe limit for the survivor spaces</span></span><br><span class=\"line\">  from()-&gt;set_concurrent_iteration_safe_limit(from()-&gt;top());</span><br><span class=\"line\">  to()-&gt;set_concurrent_iteration_safe_limit(to()-&gt;top());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We need to use a monotonically non-decreasing time in ms</span></span><br><span class=\"line\">  <span class=\"comment\">// or we will see time-warp warnings and os::javaTimeMillis()</span></span><br><span class=\"line\">  <span class=\"comment\">// does not guarantee monotonicity.</span></span><br><span class=\"line\">  jlong now = os::javaTimeNanos() / NANOSECS_PER_MILLISEC;</span><br><span class=\"line\">  update_time_of_last_gc(now);</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;trace_heap_after_gc(&amp;gc_tracer);</span><br><span class=\"line\"></span><br><span class=\"line\">  _gc_timer-&gt;register_gc_end();</span><br><span class=\"line\"></span><br><span class=\"line\">  gc_tracer.report_gc_end(_gc_timer-&gt;gc_end(), _gc_timer-&gt;time_partitions());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"串行回收堆（年老代）\"><a href=\"#串行回收堆（年老代）\" class=\"headerlink\" title=\"串行回收堆（年老代）\"></a>串行回收堆（年老代）</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> TenuredGeneration::collect(<span class=\"keyword\">bool</span>   full,</span><br><span class=\"line\">                                <span class=\"keyword\">bool</span>   clear_all_soft_refs,</span><br><span class=\"line\">                                <span class=\"keyword\">size_t</span> size,</span><br><span class=\"line\">                                <span class=\"keyword\">bool</span>   is_tlab) &#123;</span><br><span class=\"line\">  GenCollectedHeap* gch = GenCollectedHeap::heap();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Temporarily expand the span of our ref processor, so</span></span><br><span class=\"line\">  <span class=\"comment\">// refs discovery is over the entire heap, not just this generation</span></span><br><span class=\"line\">  ReferenceProcessorSpanMutator</span><br><span class=\"line\">    x(ref_processor(), gch-&gt;reserved_region());</span><br><span class=\"line\"></span><br><span class=\"line\">  STWGCTimer* gc_timer = GenMarkSweep::gc_timer();</span><br><span class=\"line\">  gc_timer-&gt;register_gc_start();</span><br><span class=\"line\"></span><br><span class=\"line\">  SerialOldTracer* gc_tracer = GenMarkSweep::gc_tracer();</span><br><span class=\"line\">  gc_tracer-&gt;report_gc_start(gch-&gt;gc_cause(), gc_timer-&gt;gc_start());</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;pre_full_gc_dump(gc_timer);</span><br><span class=\"line\"></span><br><span class=\"line\">  GenMarkSweep::invoke_at_safepoint(ref_processor(), clear_all_soft_refs);</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;post_full_gc_dump(gc_timer);</span><br><span class=\"line\"></span><br><span class=\"line\">  gc_timer-&gt;register_gc_end();</span><br><span class=\"line\"></span><br><span class=\"line\">  gc_tracer-&gt;report_gc_end(gc_timer-&gt;gc_end(), gc_timer-&gt;time_partitions());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"串行回收堆\"><a href=\"#串行回收堆\" class=\"headerlink\" title=\"串行回收堆\"></a>串行回收堆</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This method is used by System.gc() and JVMTI.</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> ParallelScavengeHeap::collect(GCCause::Cause cause) &#123;</span><br><span class=\"line\">  assert(!Heap_lock-&gt;owned_by_self(),</span><br><span class=\"line\">    <span class=\"string\">\"this thread should not own the Heap_lock\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  uint gc_count      = <span class=\"number\">0</span>;</span><br><span class=\"line\">  uint full_gc_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">MutexLocker <span class=\"title\">ml</span><span class=\"params\">(Heap_lock)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// This value is guarded by the Heap_lock</span></span><br><span class=\"line\">    gc_count      = total_collections();</span><br><span class=\"line\">    full_gc_count = total_full_collections();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">VM_ParallelGCSystemGC <span class=\"title\">op</span><span class=\"params\">(gc_count, full_gc_count, cause)</span></span>;</span><br><span class=\"line\">  VMThread::execute(&amp;op);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"CMS分代并发回收堆\"><a href=\"#CMS分代并发回收堆\" class=\"headerlink\" title=\"CMS分代并发回收堆\"></a>CMS分代并发回收堆</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public collection interfaces</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> GenCollectedHeap::collect(GCCause::Cause cause) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (should_do_concurrent_full_gc(cause)) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_ALL_GCS</span></span><br><span class=\"line\">    <span class=\"comment\">// Mostly concurrent full collection.</span></span><br><span class=\"line\">    collect_mostly_concurrent(cause);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  <span class=\"comment\">// INCLUDE_ALL_GCS</span></span></span><br><span class=\"line\">    ShouldNotReachHere();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// INCLUDE_ALL_GCS</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cause == GCCause::_wb_young_gc) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Young collection for the WhiteBox API.</span></span><br><span class=\"line\">    collect(cause, YoungGen);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">#ifdef ASSERT</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cause == GCCause::_scavenge_alot) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Young collection only.</span></span><br><span class=\"line\">    collect(cause, YoungGen);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Stop-the-world full collection.</span></span><br><span class=\"line\">    collect(cause, OldGen);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"comment\">// Stop-the-world full collection.</span></span><br><span class=\"line\">    collect(cause, OldGen);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"G1并发回收堆\"><a href=\"#G1并发回收堆\" class=\"headerlink\" title=\"G1并发回收堆\"></a>G1并发回收堆</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> G1CollectedHeap::collect(GCCause::Cause cause) &#123;</span><br><span class=\"line\">  assert_heap_not_locked();</span><br><span class=\"line\"></span><br><span class=\"line\">  uint gc_count_before;</span><br><span class=\"line\">  uint old_marking_count_before;</span><br><span class=\"line\">  uint full_gc_count_before;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> retry_gc;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    retry_gc = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"function\">MutexLocker <span class=\"title\">ml</span><span class=\"params\">(Heap_lock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read the GC count while holding the Heap_lock</span></span><br><span class=\"line\">      gc_count_before = total_collections();</span><br><span class=\"line\">      full_gc_count_before = total_full_collections();</span><br><span class=\"line\">      old_marking_count_before = _old_marking_cycles_started;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (should_do_concurrent_full_gc(cause)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Schedule an initial-mark evacuation pause that will start a</span></span><br><span class=\"line\">      <span class=\"comment\">// concurrent cycle. We're setting word_size to 0 which means that</span></span><br><span class=\"line\">      <span class=\"comment\">// we are not requesting a post-GC allocation.</span></span><br><span class=\"line\">      <span class=\"function\">VM_G1IncCollectionPause <span class=\"title\">op</span><span class=\"params\">(gc_count_before,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 <span class=\"number\">0</span>,     <span class=\"comment\">/* word_size */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 <span class=\"literal\">true</span>,  <span class=\"comment\">/* should_initiate_conc_mark */</span></span></span></span><br><span class=\"line\">                                 g1_policy()-&gt;max_pause_time_ms(),</span><br><span class=\"line\">                                 cause);</span><br><span class=\"line\">      op.set_allocation_context(AllocationContext::current());</span><br><span class=\"line\"></span><br><span class=\"line\">      VMThread::execute(&amp;op);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!op.pause_succeeded()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (old_marking_count_before == _old_marking_cycles_started) &#123;</span><br><span class=\"line\">          retry_gc = op.should_retry_gc();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// A Full GC happened while we were trying to schedule the</span></span><br><span class=\"line\">          <span class=\"comment\">// initial-mark GC. No point in starting a new cycle given</span></span><br><span class=\"line\">          <span class=\"comment\">// that the whole heap was collected anyway.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (retry_gc) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (GCLocker::is_active_and_needs_gc()) &#123;</span><br><span class=\"line\">            GCLocker::stall_until_clear();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cause == GCCause::_gc_locker || cause == GCCause::_wb_young_gc</span><br><span class=\"line\">          DEBUG_ONLY(|| cause == GCCause::_scavenge_alot)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Schedule a standard evacuation pause. We're setting word_size</span></span><br><span class=\"line\">        <span class=\"comment\">// to 0 which means that we are not requesting a post-GC allocation.</span></span><br><span class=\"line\">        VM_G1IncCollectionPause op(gc_count_before,</span><br><span class=\"line\">                                   <span class=\"number\">0</span>,     <span class=\"comment\">/* word_size */</span></span><br><span class=\"line\">                                   <span class=\"literal\">false</span>, <span class=\"comment\">/* should_initiate_conc_mark */</span></span><br><span class=\"line\">                                   g1_policy()-&gt;max_pause_time_ms(),</span><br><span class=\"line\">                                   cause);</span><br><span class=\"line\">        VMThread::execute(&amp;op);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Schedule a Full GC.</span></span><br><span class=\"line\">        VM_G1CollectFull op(gc_count_before, full_gc_count_before, cause);</span><br><span class=\"line\">        VMThread::execute(&amp;op);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (retry_gc);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>对于Java语言来说是不用手动释放内存的，并且不需要手动干预JVM的GC行为，但在一些监控和agent工具里却是必要的。</p>\n<p>Hotspot为我们开放了Java语言级别的GC手动触发入口<code>System.gc()</code>，本文将深入介绍JVM底层实现。</p>","more":"<h1 id=\"java-lang-System-gc\"><a href=\"#java-lang-System-gc\" class=\"headerlink\" title=\"java.lang.System#gc()\"></a>java.lang.System#gc()</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Runs the garbage collector.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Calling the &lt;code&gt;gc&lt;/code&gt; method suggests that the Java Virtual</span></span><br><span class=\"line\"><span class=\"comment\"> * Machine expend effort toward recycling unused objects in order to</span></span><br><span class=\"line\"><span class=\"comment\"> * make the memory they currently occupy available for quick reuse.</span></span><br><span class=\"line\"><span class=\"comment\"> * When control returns from the method call, the Java Virtual</span></span><br><span class=\"line\"><span class=\"comment\"> * Machine has made a best effort to reclaim space from all discarded</span></span><br><span class=\"line\"><span class=\"comment\"> * objects.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The call &lt;code&gt;System.gc()&lt;/code&gt; is effectively equivalent to the</span></span><br><span class=\"line\"><span class=\"comment\"> * call:</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Runtime.getRuntime().gc()</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>     java.lang.Runtime#gc()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Runtime.getRuntime().gc();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"java-lang-Runtime-gc\"><a href=\"#java-lang-Runtime-gc\" class=\"headerlink\" title=\"java.lang.Runtime#gc()\"></a>java.lang.Runtime#gc()</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Runs the garbage collector.</span></span><br><span class=\"line\"><span class=\"comment\"> * Calling this method suggests that the Java virtual machine expend</span></span><br><span class=\"line\"><span class=\"comment\"> * effort toward recycling unused objects in order to make the memory</span></span><br><span class=\"line\"><span class=\"comment\"> * they currently occupy available for quick reuse. When control</span></span><br><span class=\"line\"><span class=\"comment\"> * returns from the method call, the virtual machine has made</span></span><br><span class=\"line\"><span class=\"comment\"> * its best effort to recycle all discarded objects.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The name &lt;code&gt;gc&lt;/code&gt; stands for \"garbage</span></span><br><span class=\"line\"><span class=\"comment\"> * collector\". The virtual machine performs this recycling</span></span><br><span class=\"line\"><span class=\"comment\"> * process automatically as needed, in a separate thread, even if the</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;gc&lt;/code&gt; method is not invoked explicitly.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The method &#123;<span class=\"doctag\">@link</span> System#gc()&#125; is the conventional and convenient</span></span><br><span class=\"line\"><span class=\"comment\"> * means of invoking this method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Runtime-c-Java-java-lang-Runtime-gc\"><a href=\"#Runtime-c-Java-java-lang-Runtime-gc\" class=\"headerlink\" title=\"Runtime.c #  Java_java_lang_Runtime_gc()\"></a>Runtime.c #  Java_java_lang_Runtime_gc()</h1><p>这里调用了native方法<code>gc()</code>，对应的方法在Hotspot源码<code>src/java.base/share/native/libjava/Runtime.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL</span><br><span class=\"line\">Java_java_lang_Runtime_gc(JNIEnv *env, jobject <span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JVM_GC();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jvm-cpp\"><a href=\"#jvm-cpp\" class=\"headerlink\" title=\"jvm.cpp\"></a>jvm.cpp</h1><p>方法实现在<code>src/hotspot/share/prims/jvm.cpp</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JVM_ENTRY_NO_ENV(<span class=\"keyword\">void</span>, JVM_GC(<span class=\"keyword\">void</span>))</span><br><span class=\"line\">  JVMWrapper(<span class=\"string\">\"JVM_GC\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!DisableExplicitGC) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 调用具体堆实现的collect方法</span></span><br><span class=\"line\">    Universe::heap()-&gt;collect(GCCause::_java_lang_system_gc);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">JVM_END</span><br></pre></td></tr></table></figure>\n<p>通过Universe调用具体堆实现的collect方法，取决于使用当前实例使用的GC模式，在JVM中目前堆实现主要有：</p>\n<ul>\n<li>串行回收堆实现<ul>\n<li>src/hotspot/share/gc/serial/defNewGeneration.cpp（年轻代）</li>\n<li>src/hotspot/share/gc/serial/tenuredGeneration.cpp（年老代）</li>\n</ul>\n</li>\n<li>并行回收堆实现<ul>\n<li>src/hotspot/share/gc/parallel/parallelScavengeHeap.cpp</li>\n</ul>\n</li>\n<li>CMS并发回收堆实现<ul>\n<li>src/hotspot/share/gc/shared/genCollectedHeap.cpp</li>\n</ul>\n</li>\n<li>G1并发回收堆实现<ul>\n<li>src/hotspot/share/gc/g1/g1CollectedHeap.cpp</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"串行回收堆（年轻代）\"><a href=\"#串行回收堆（年轻代）\" class=\"headerlink\" title=\"串行回收堆（年轻代）\"></a>串行回收堆（年轻代）</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> DefNewGeneration::collect(<span class=\"keyword\">bool</span>   full,</span><br><span class=\"line\">                               <span class=\"keyword\">bool</span>   clear_all_soft_refs,</span><br><span class=\"line\">                               <span class=\"keyword\">size_t</span> size,</span><br><span class=\"line\">                               <span class=\"keyword\">bool</span>   is_tlab) &#123;</span><br><span class=\"line\">  assert(full || size &gt; <span class=\"number\">0</span>, <span class=\"string\">\"otherwise we don't want to collect\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  GenCollectedHeap* gch = GenCollectedHeap::heap();</span><br><span class=\"line\"></span><br><span class=\"line\">  _gc_timer-&gt;register_gc_start();</span><br><span class=\"line\">  DefNewTracer gc_tracer;</span><br><span class=\"line\">  gc_tracer.report_gc_start(gch-&gt;gc_cause(), _gc_timer-&gt;gc_start());</span><br><span class=\"line\"></span><br><span class=\"line\">  _old_gen = gch-&gt;old_gen();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果下个代空间不足以容纳当前代空间中即将晋升的对象，则标记让下个代空间先进行回收</span></span><br><span class=\"line\">  <span class=\"comment\">// If the next generation is too full to accommodate promotion</span></span><br><span class=\"line\">  <span class=\"comment\">// from this generation, pass on collection; let the next generation</span></span><br><span class=\"line\">  <span class=\"comment\">// do it.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!collection_attempt_is_safe()) &#123;</span><br><span class=\"line\">    log_trace(gc)(<span class=\"string\">\":: Collection attempt not safe ::\"</span>);</span><br><span class=\"line\">    gch-&gt;set_incremental_collection_failed(); <span class=\"comment\">// Slight lie: we did not even attempt one</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  assert(to()-&gt;is_empty(), <span class=\"string\">\"Else not collection_attempt_is_safe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  init_assuming_no_promotion_failure();</span><br><span class=\"line\"></span><br><span class=\"line\">  GCTraceTime(Trace, gc, phases) tm(<span class=\"string\">\"DefNew\"</span>, <span class=\"literal\">NULL</span>, gch-&gt;gc_cause());</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;trace_heap_before_gc(&amp;gc_tracer);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// These can be shared for all code paths</span></span><br><span class=\"line\">  <span class=\"function\">IsAliveClosure <span class=\"title\">is_alive</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">ScanWeakRefClosure <span class=\"title\">scan_weak_ref</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  age_table()-&gt;clear();</span><br><span class=\"line\">  to()-&gt;clear(SpaceDecorator::Mangle);</span><br><span class=\"line\">  <span class=\"comment\">// The preserved marks should be empty at the start of the GC.</span></span><br><span class=\"line\">  _preserved_marks_set.init(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;rem_set()-&gt;prepare_for_younger_refs_iterate(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  assert(gch-&gt;no_allocs_since_save_marks(),</span><br><span class=\"line\">         <span class=\"string\">\"save marks have not been newly set.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Not very pretty.</span></span><br><span class=\"line\">  CollectorPolicy* cp = gch-&gt;collector_policy();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">FastScanClosure <span class=\"title\">fsc_with_no_gc_barrier</span><span class=\"params\">(<span class=\"keyword\">this</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">FastScanClosure <span class=\"title\">fsc_with_gc_barrier</span><span class=\"params\">(<span class=\"keyword\">this</span>, <span class=\"literal\">true</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">KlassScanClosure <span class=\"title\">klass_scan_closure</span><span class=\"params\">(&amp;fsc_with_no_gc_barrier,</span></span></span><br><span class=\"line\">                                      gch-&gt;rem_set()-&gt;klass_rem_set());</span><br><span class=\"line\">  <span class=\"function\">CLDToKlassAndOopClosure <span class=\"title\">cld_scan_closure</span><span class=\"params\">(&amp;klass_scan_closure,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                           &amp;fsc_with_no_gc_barrier,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                           <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  set_promo_failure_scan_stack_closure(&amp;fsc_with_no_gc_barrier);</span><br><span class=\"line\">  <span class=\"function\">FastEvacuateFollowersClosure <span class=\"title\">evacuate_followers</span><span class=\"params\">(gch,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                  &amp;fsc_with_no_gc_barrier,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                  &amp;fsc_with_gc_barrier)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  assert(gch-&gt;no_allocs_since_save_marks(),</span><br><span class=\"line\">         <span class=\"string\">\"save marks have not been newly set.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// DefNew needs to run with n_threads == 0, to make sure the serial</span></span><br><span class=\"line\">    <span class=\"comment\">// version of the card table scanning code is used.</span></span><br><span class=\"line\">    <span class=\"comment\">// See: CardTableModRefBSForCTRS::non_clean_card_iterate_possibly_parallel.</span></span><br><span class=\"line\">    <span class=\"function\">StrongRootsScope <span class=\"title\">srs</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    gch-&gt;young_process_roots(&amp;srs,</span><br><span class=\"line\">                             &amp;fsc_with_no_gc_barrier,</span><br><span class=\"line\">                             &amp;fsc_with_gc_barrier,</span><br><span class=\"line\">                             &amp;cld_scan_closure);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// \"evacuate followers\".</span></span><br><span class=\"line\">  evacuate_followers.do_void();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">FastKeepAliveClosure <span class=\"title\">keep_alive</span><span class=\"params\">(<span class=\"keyword\">this</span>, &amp;scan_weak_ref)</span></span>;</span><br><span class=\"line\">  ReferenceProcessor* rp = ref_processor();</span><br><span class=\"line\">  rp-&gt;setup_policy(clear_all_soft_refs);</span><br><span class=\"line\">  ReferenceProcessorPhaseTimes pt(_gc_timer, rp-&gt;num_q());</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ReferenceProcessorStats&amp; stats =</span><br><span class=\"line\">  rp-&gt;process_discovered_references(&amp;is_alive, &amp;keep_alive, &amp;evacuate_followers,</span><br><span class=\"line\">                                    <span class=\"literal\">NULL</span>, &amp;pt);</span><br><span class=\"line\">  gc_tracer.report_gc_reference_stats(stats);</span><br><span class=\"line\">  gc_tracer.report_tenuring_threshold(tenuring_threshold());</span><br><span class=\"line\">  pt.print_all_references();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!_promotion_failed) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Swap the survivor spaces.</span></span><br><span class=\"line\">    eden()-&gt;clear(SpaceDecorator::Mangle);</span><br><span class=\"line\">    from()-&gt;clear(SpaceDecorator::Mangle);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ZapUnusedHeapArea) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// This is now done here because of the piece-meal mangling which</span></span><br><span class=\"line\">      <span class=\"comment\">// can check for valid mangling at intermediate points in the</span></span><br><span class=\"line\">      <span class=\"comment\">// collection(s).  When a young collection fails to collect</span></span><br><span class=\"line\">      <span class=\"comment\">// sufficient space resizing of the young generation can occur</span></span><br><span class=\"line\">      <span class=\"comment\">// an redistribute the spaces in the young generation.  Mangle</span></span><br><span class=\"line\">      <span class=\"comment\">// here so that unzapped regions don't get distributed to</span></span><br><span class=\"line\">      <span class=\"comment\">// other spaces.</span></span><br><span class=\"line\">      to()-&gt;mangle_unused_area();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap_spaces();</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(to()-&gt;is_empty(), <span class=\"string\">\"to space should be empty now\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    adjust_desired_tenuring_threshold();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// A successful scavenge should restart the GC time limit count which is</span></span><br><span class=\"line\">    <span class=\"comment\">// for full GC's.</span></span><br><span class=\"line\">    AdaptiveSizePolicy* size_policy = gch-&gt;gen_policy()-&gt;size_policy();</span><br><span class=\"line\">    size_policy-&gt;reset_gc_overhead_limit_count();</span><br><span class=\"line\">    assert(!gch-&gt;incremental_collection_failed(), <span class=\"string\">\"Should be clear\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    assert(_promo_failure_scan_stack.is_empty(), <span class=\"string\">\"post condition\"</span>);</span><br><span class=\"line\">    _promo_failure_scan_stack.clear(<span class=\"literal\">true</span>); <span class=\"comment\">// Clear cached segments.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    remove_forwarding_pointers();</span><br><span class=\"line\">    log_info(gc, promotion)(<span class=\"string\">\"Promotion failed\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Add to-space to the list of space to compact</span></span><br><span class=\"line\">    <span class=\"comment\">// when a promotion failure has occurred.  In that</span></span><br><span class=\"line\">    <span class=\"comment\">// case there can be live objects in to-space</span></span><br><span class=\"line\">    <span class=\"comment\">// as a result of a partial evacuation of eden</span></span><br><span class=\"line\">    <span class=\"comment\">// and from-space.</span></span><br><span class=\"line\">    swap_spaces();   <span class=\"comment\">// For uniformity wrt ParNewGeneration.</span></span><br><span class=\"line\">    from()-&gt;set_next_compaction_space(to());</span><br><span class=\"line\">    gch-&gt;set_incremental_collection_failed();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Inform the next generation that a promotion failure occurred.</span></span><br><span class=\"line\">    _old_gen-&gt;promotion_failure_occurred();</span><br><span class=\"line\">    gc_tracer.report_promotion_failed(_promotion_failed_info);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Reset the PromotionFailureALot counters.</span></span><br><span class=\"line\">    NOT_PRODUCT(gch-&gt;reset_promotion_should_fail();)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We should have processed and cleared all the preserved marks.</span></span><br><span class=\"line\">  _preserved_marks_set.reclaim();</span><br><span class=\"line\">  <span class=\"comment\">// set new iteration safe limit for the survivor spaces</span></span><br><span class=\"line\">  from()-&gt;set_concurrent_iteration_safe_limit(from()-&gt;top());</span><br><span class=\"line\">  to()-&gt;set_concurrent_iteration_safe_limit(to()-&gt;top());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We need to use a monotonically non-decreasing time in ms</span></span><br><span class=\"line\">  <span class=\"comment\">// or we will see time-warp warnings and os::javaTimeMillis()</span></span><br><span class=\"line\">  <span class=\"comment\">// does not guarantee monotonicity.</span></span><br><span class=\"line\">  jlong now = os::javaTimeNanos() / NANOSECS_PER_MILLISEC;</span><br><span class=\"line\">  update_time_of_last_gc(now);</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;trace_heap_after_gc(&amp;gc_tracer);</span><br><span class=\"line\"></span><br><span class=\"line\">  _gc_timer-&gt;register_gc_end();</span><br><span class=\"line\"></span><br><span class=\"line\">  gc_tracer.report_gc_end(_gc_timer-&gt;gc_end(), _gc_timer-&gt;time_partitions());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"串行回收堆（年老代）\"><a href=\"#串行回收堆（年老代）\" class=\"headerlink\" title=\"串行回收堆（年老代）\"></a>串行回收堆（年老代）</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> TenuredGeneration::collect(<span class=\"keyword\">bool</span>   full,</span><br><span class=\"line\">                                <span class=\"keyword\">bool</span>   clear_all_soft_refs,</span><br><span class=\"line\">                                <span class=\"keyword\">size_t</span> size,</span><br><span class=\"line\">                                <span class=\"keyword\">bool</span>   is_tlab) &#123;</span><br><span class=\"line\">  GenCollectedHeap* gch = GenCollectedHeap::heap();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Temporarily expand the span of our ref processor, so</span></span><br><span class=\"line\">  <span class=\"comment\">// refs discovery is over the entire heap, not just this generation</span></span><br><span class=\"line\">  ReferenceProcessorSpanMutator</span><br><span class=\"line\">    x(ref_processor(), gch-&gt;reserved_region());</span><br><span class=\"line\"></span><br><span class=\"line\">  STWGCTimer* gc_timer = GenMarkSweep::gc_timer();</span><br><span class=\"line\">  gc_timer-&gt;register_gc_start();</span><br><span class=\"line\"></span><br><span class=\"line\">  SerialOldTracer* gc_tracer = GenMarkSweep::gc_tracer();</span><br><span class=\"line\">  gc_tracer-&gt;report_gc_start(gch-&gt;gc_cause(), gc_timer-&gt;gc_start());</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;pre_full_gc_dump(gc_timer);</span><br><span class=\"line\"></span><br><span class=\"line\">  GenMarkSweep::invoke_at_safepoint(ref_processor(), clear_all_soft_refs);</span><br><span class=\"line\"></span><br><span class=\"line\">  gch-&gt;post_full_gc_dump(gc_timer);</span><br><span class=\"line\"></span><br><span class=\"line\">  gc_timer-&gt;register_gc_end();</span><br><span class=\"line\"></span><br><span class=\"line\">  gc_tracer-&gt;report_gc_end(gc_timer-&gt;gc_end(), gc_timer-&gt;time_partitions());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"串行回收堆\"><a href=\"#串行回收堆\" class=\"headerlink\" title=\"串行回收堆\"></a>串行回收堆</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This method is used by System.gc() and JVMTI.</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> ParallelScavengeHeap::collect(GCCause::Cause cause) &#123;</span><br><span class=\"line\">  assert(!Heap_lock-&gt;owned_by_self(),</span><br><span class=\"line\">    <span class=\"string\">\"this thread should not own the Heap_lock\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  uint gc_count      = <span class=\"number\">0</span>;</span><br><span class=\"line\">  uint full_gc_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">MutexLocker <span class=\"title\">ml</span><span class=\"params\">(Heap_lock)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// This value is guarded by the Heap_lock</span></span><br><span class=\"line\">    gc_count      = total_collections();</span><br><span class=\"line\">    full_gc_count = total_full_collections();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">VM_ParallelGCSystemGC <span class=\"title\">op</span><span class=\"params\">(gc_count, full_gc_count, cause)</span></span>;</span><br><span class=\"line\">  VMThread::execute(&amp;op);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"CMS分代并发回收堆\"><a href=\"#CMS分代并发回收堆\" class=\"headerlink\" title=\"CMS分代并发回收堆\"></a>CMS分代并发回收堆</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public collection interfaces</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> GenCollectedHeap::collect(GCCause::Cause cause) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (should_do_concurrent_full_gc(cause)) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> INCLUDE_ALL_GCS</span></span><br><span class=\"line\">    <span class=\"comment\">// Mostly concurrent full collection.</span></span><br><span class=\"line\">    collect_mostly_concurrent(cause);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  <span class=\"comment\">// INCLUDE_ALL_GCS</span></span></span><br><span class=\"line\">    ShouldNotReachHere();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// INCLUDE_ALL_GCS</span></span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cause == GCCause::_wb_young_gc) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Young collection for the WhiteBox API.</span></span><br><span class=\"line\">    collect(cause, YoungGen);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">#ifdef ASSERT</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cause == GCCause::_scavenge_alot) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Young collection only.</span></span><br><span class=\"line\">    collect(cause, YoungGen);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Stop-the-world full collection.</span></span><br><span class=\"line\">    collect(cause, OldGen);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"comment\">// Stop-the-world full collection.</span></span><br><span class=\"line\">    collect(cause, OldGen);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"G1并发回收堆\"><a href=\"#G1并发回收堆\" class=\"headerlink\" title=\"G1并发回收堆\"></a>G1并发回收堆</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> G1CollectedHeap::collect(GCCause::Cause cause) &#123;</span><br><span class=\"line\">  assert_heap_not_locked();</span><br><span class=\"line\"></span><br><span class=\"line\">  uint gc_count_before;</span><br><span class=\"line\">  uint old_marking_count_before;</span><br><span class=\"line\">  uint full_gc_count_before;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> retry_gc;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    retry_gc = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"function\">MutexLocker <span class=\"title\">ml</span><span class=\"params\">(Heap_lock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Read the GC count while holding the Heap_lock</span></span><br><span class=\"line\">      gc_count_before = total_collections();</span><br><span class=\"line\">      full_gc_count_before = total_full_collections();</span><br><span class=\"line\">      old_marking_count_before = _old_marking_cycles_started;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (should_do_concurrent_full_gc(cause)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Schedule an initial-mark evacuation pause that will start a</span></span><br><span class=\"line\">      <span class=\"comment\">// concurrent cycle. We're setting word_size to 0 which means that</span></span><br><span class=\"line\">      <span class=\"comment\">// we are not requesting a post-GC allocation.</span></span><br><span class=\"line\">      <span class=\"function\">VM_G1IncCollectionPause <span class=\"title\">op</span><span class=\"params\">(gc_count_before,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 <span class=\"number\">0</span>,     <span class=\"comment\">/* word_size */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                 <span class=\"literal\">true</span>,  <span class=\"comment\">/* should_initiate_conc_mark */</span></span></span></span><br><span class=\"line\">                                 g1_policy()-&gt;max_pause_time_ms(),</span><br><span class=\"line\">                                 cause);</span><br><span class=\"line\">      op.set_allocation_context(AllocationContext::current());</span><br><span class=\"line\"></span><br><span class=\"line\">      VMThread::execute(&amp;op);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!op.pause_succeeded()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (old_marking_count_before == _old_marking_cycles_started) &#123;</span><br><span class=\"line\">          retry_gc = op.should_retry_gc();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// A Full GC happened while we were trying to schedule the</span></span><br><span class=\"line\">          <span class=\"comment\">// initial-mark GC. No point in starting a new cycle given</span></span><br><span class=\"line\">          <span class=\"comment\">// that the whole heap was collected anyway.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (retry_gc) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (GCLocker::is_active_and_needs_gc()) &#123;</span><br><span class=\"line\">            GCLocker::stall_until_clear();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cause == GCCause::_gc_locker || cause == GCCause::_wb_young_gc</span><br><span class=\"line\">          DEBUG_ONLY(|| cause == GCCause::_scavenge_alot)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Schedule a standard evacuation pause. We're setting word_size</span></span><br><span class=\"line\">        <span class=\"comment\">// to 0 which means that we are not requesting a post-GC allocation.</span></span><br><span class=\"line\">        VM_G1IncCollectionPause op(gc_count_before,</span><br><span class=\"line\">                                   <span class=\"number\">0</span>,     <span class=\"comment\">/* word_size */</span></span><br><span class=\"line\">                                   <span class=\"literal\">false</span>, <span class=\"comment\">/* should_initiate_conc_mark */</span></span><br><span class=\"line\">                                   g1_policy()-&gt;max_pause_time_ms(),</span><br><span class=\"line\">                                   cause);</span><br><span class=\"line\">        VMThread::execute(&amp;op);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Schedule a Full GC.</span></span><br><span class=\"line\">        VM_G1CollectFull op(gc_count_before, full_gc_count_before, cause);</span><br><span class=\"line\">        VMThread::execute(&amp;op);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (retry_gc);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"【JVM源码探秘】深入registerNatives()底层实现","date":"2018-04-06T11:30:00.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n \n在Java的系统包下如：\n\n- java.lang.System\n- java.lang.Object\n- java.lang.Class\n\n等类中均有一个静态块用来执行一个叫做`registerNatives()`的native方法，\n\n\n```java\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n```\n这个native方法里究竟都做了啥？我们进去瞧瞧。\n\n<!-- more -->\n\n# System.c\n```c\n/* Only register the performance-critical methods */\nstatic JNINativeMethod methods[] = {\n    {\"currentTimeMillis\", \"()J\",              (void *)&JVM_CurrentTimeMillis},\n    {\"nanoTime\",          \"()J\",              (void *)&JVM_NanoTime},\n    {\"arraycopy\",     \"(\" OBJ \"I\" OBJ \"II)V\", (void *)&JVM_ArrayCopy},\n};\n\n#undef OBJ\n\nJNIEXPORT void JNICALL\nJava_java_lang_System_registerNatives(JNIEnv *env, jclass cls)\n{\n    // 注册本地方法\n    (*env)->RegisterNatives(env, cls,\n                            methods, sizeof(methods)/sizeof(methods[0]));\n}\n```\n\n\n\n# Object.c\n\n```c\nstatic JNINativeMethod methods[] = {\n    {\"hashCode\",    \"()I\",                    (void *)&JVM_IHashCode},\n    {\"wait\",        \"(J)V\",                   (void *)&JVM_MonitorWait},\n    {\"notify\",      \"()V\",                    (void *)&JVM_MonitorNotify},\n    {\"notifyAll\",   \"()V\",                    (void *)&JVM_MonitorNotifyAll},\n    {\"clone\",       \"()Ljava/lang/Object;\",   (void *)&JVM_Clone},\n};\n\nJNIEXPORT void JNICALL\nJava_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)\n{\n    // 注册本地方法\n    (*env)->RegisterNatives(env, cls,\n                            methods, sizeof(methods)/sizeof(methods[0]));\n}\n```\n\n# Class.c\n```c\nstatic JNINativeMethod methods[] = {\n    {\"getName0\",         \"()\" STR,          (void *)&JVM_GetClassName},\n    {\"getSuperclass\",    \"()\" CLS,          NULL},\n    {\"getInterfaces0\",   \"()[\" CLS,         (void *)&JVM_GetClassInterfaces},\n    {\"isInterface\",      \"()Z\",             (void *)&JVM_IsInterface},\n    {\"getSigners\",       \"()[\" OBJ,         (void *)&JVM_GetClassSigners},\n    {\"setSigners\",       \"([\" OBJ \")V\",     (void *)&JVM_SetClassSigners},\n    {\"isArray\",          \"()Z\",             (void *)&JVM_IsArrayClass},\n    {\"isPrimitive\",      \"()Z\",             (void *)&JVM_IsPrimitiveClass},\n    {\"getModifiers\",     \"()I\",             (void *)&JVM_GetClassModifiers},\n    {\"getDeclaredFields0\",\"(Z)[\" FLD,       (void *)&JVM_GetClassDeclaredFields},\n    {\"getDeclaredMethods0\",\"(Z)[\" MHD,      (void *)&JVM_GetClassDeclaredMethods},\n    {\"getDeclaredConstructors0\",\"(Z)[\" CTR, (void *)&JVM_GetClassDeclaredConstructors},\n    {\"getProtectionDomain0\", \"()\" PD,       (void *)&JVM_GetProtectionDomain},\n    {\"getDeclaredClasses0\",  \"()[\" CLS,      (void *)&JVM_GetDeclaredClasses},\n    {\"getDeclaringClass0\",   \"()\" CLS,      (void *)&JVM_GetDeclaringClass},\n    {\"getSimpleBinaryName0\", \"()\" STR,      (void *)&JVM_GetSimpleBinaryName},\n    {\"getGenericSignature0\", \"()\" STR,      (void *)&JVM_GetClassSignature},\n    {\"getRawAnnotations\",      \"()\" BA,        (void *)&JVM_GetClassAnnotations},\n    {\"getConstantPool\",     \"()\" CPL,       (void *)&JVM_GetClassConstantPool},\n    {\"desiredAssertionStatus0\",\"(\"CLS\")Z\",(void *)&JVM_DesiredAssertionStatus},\n    {\"getEnclosingMethod0\", \"()[\" OBJ,      (void *)&JVM_GetEnclosingMethodInfo},\n    {\"getRawTypeAnnotations\", \"()\" BA,      (void *)&JVM_GetClassTypeAnnotations},\n};\n\n\n\nJNIEXPORT void JNICALL\nJava_java_lang_Class_registerNatives(JNIEnv *env, jclass cls)\n{\n    // 注册本地方法\n    methods[1].fnPtr = (void *)(*env)->GetSuperclass;\n    (*env)->RegisterNatives(env, cls, methods,\n                            sizeof(methods)/sizeof(JNINativeMethod));\n}\n```\n\n# jni.cpp # jni_RegisterNatives()\n通过以上源码发现均调用的`(*env)->RegisterNatives(env, cls, methods...`，这里的`*env`为`JNI`环境，\n方法进入`jni_RegisterNatives()`\n\n```c\n  // 注册Java系统类中的本地方法\nJNI_ENTRY(jint, jni_RegisterNatives(JNIEnv *env, jclass clazz,\n                                    const JNINativeMethod *methods,\n                                    jint nMethods))\n  JNIWrapper(\"RegisterNatives\");\n  HOTSPOT_JNI_REGISTERNATIVES_ENTRY(env, clazz, (void *) methods, nMethods);\n  jint ret = 0;\n  DT_RETURN_MARK(RegisterNatives, jint, (const jint&)ret);\n\n  // 加载对应的类并转换成Klass对象\n  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));\n\n  for (int index = 0; index < nMethods; index++) {\n    const char* meth_name = methods[index].name;\n    const char* meth_sig = methods[index].signature;\n    int meth_name_len = (int)strlen(meth_name);\n\n    // The class should have been loaded (we have an instance of the class\n    // passed in) so the method and signature should already be in the symbol\n    // table.  If they're not there, the method doesn't exist.\n    // 方法名\n    TempNewSymbol  name = SymbolTable::probe(meth_name, meth_name_len);\n    // 方法签名\n    TempNewSymbol  signature = SymbolTable::probe(meth_sig, (int)strlen(meth_sig));\n\n    // 如果没找到该方法则抛出java.lang.NoSuchMethodError()\n    if (name == NULL || signature == NULL) {\n      ResourceMark rm;\n      stringStream st;\n      st.print(\"Method %s.%s%s not found\", k->external_name(), meth_name, meth_sig);\n      // Must return negative value on failure\n      THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), -1);\n    }\n\n    // 执行注册本地方法\n    bool res = register_native(k, name, signature,\n                               (address) methods[index].fnPtr, THREAD);\n    if (!res) {\n      ret = -1;\n      break;\n    }\n  }\n  return ret;\nJNI_END\n```\n\n\n# jni.cpp # register_native()\n\n```c\nstatic bool register_native(Klass* k, Symbol* name, Symbol* signature, address entry, TRAPS) {\n  // 找到对应的方法\n  Method* method = k->lookup_method(name, signature);\n  if (method == NULL) {\n    ResourceMark rm;\n    stringStream st;\n    st.print(\"Method %s name or signature does not match\",\n             Method::name_and_sig_as_C_string(k, name, signature));\n    THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), false);\n  }\n  if (!method->is_native()) {\n    // 检查JVMTI是否指定native方法前缀\n    // trying to register to a non-native method, see if a JVM TI agent has added prefix(es)\n    method = find_prefixed_native(k, name, signature, THREAD);\n    if (method == NULL) {\n      ResourceMark rm;\n      stringStream st;\n      st.print(\"Method %s is not declared as native\",\n               Method::name_and_sig_as_C_string(k, name, signature));\n      THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), false);\n    }\n  }\n\n  if (entry != NULL) {\n    // 设置本为本地方法\n    method->set_native_function(entry,\n      Method::native_bind_event_is_interesting);\n  } else {\n    method->clear_native_function();\n  }\n  if (PrintJNIResolving) {\n    ResourceMark rm(THREAD);\n    tty->print_cr(\"[Registering JNI native method %s.%s]\",\n      method->method_holder()->external_name(),\n      method->name()->as_C_string());\n  }\n  return true;\n}\n```","source":"_posts/2018/04/06/analysis-of-hotspot-jvm-register-natives.md","raw":"---\ntitle: 【JVM源码探秘】深入registerNatives()底层实现\ndate: 2018-04-06 19:30:00\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\n \n在Java的系统包下如：\n\n- java.lang.System\n- java.lang.Object\n- java.lang.Class\n\n等类中均有一个静态块用来执行一个叫做`registerNatives()`的native方法，\n\n\n```java\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n```\n这个native方法里究竟都做了啥？我们进去瞧瞧。\n\n<!-- more -->\n\n# System.c\n```c\n/* Only register the performance-critical methods */\nstatic JNINativeMethod methods[] = {\n    {\"currentTimeMillis\", \"()J\",              (void *)&JVM_CurrentTimeMillis},\n    {\"nanoTime\",          \"()J\",              (void *)&JVM_NanoTime},\n    {\"arraycopy\",     \"(\" OBJ \"I\" OBJ \"II)V\", (void *)&JVM_ArrayCopy},\n};\n\n#undef OBJ\n\nJNIEXPORT void JNICALL\nJava_java_lang_System_registerNatives(JNIEnv *env, jclass cls)\n{\n    // 注册本地方法\n    (*env)->RegisterNatives(env, cls,\n                            methods, sizeof(methods)/sizeof(methods[0]));\n}\n```\n\n\n\n# Object.c\n\n```c\nstatic JNINativeMethod methods[] = {\n    {\"hashCode\",    \"()I\",                    (void *)&JVM_IHashCode},\n    {\"wait\",        \"(J)V\",                   (void *)&JVM_MonitorWait},\n    {\"notify\",      \"()V\",                    (void *)&JVM_MonitorNotify},\n    {\"notifyAll\",   \"()V\",                    (void *)&JVM_MonitorNotifyAll},\n    {\"clone\",       \"()Ljava/lang/Object;\",   (void *)&JVM_Clone},\n};\n\nJNIEXPORT void JNICALL\nJava_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)\n{\n    // 注册本地方法\n    (*env)->RegisterNatives(env, cls,\n                            methods, sizeof(methods)/sizeof(methods[0]));\n}\n```\n\n# Class.c\n```c\nstatic JNINativeMethod methods[] = {\n    {\"getName0\",         \"()\" STR,          (void *)&JVM_GetClassName},\n    {\"getSuperclass\",    \"()\" CLS,          NULL},\n    {\"getInterfaces0\",   \"()[\" CLS,         (void *)&JVM_GetClassInterfaces},\n    {\"isInterface\",      \"()Z\",             (void *)&JVM_IsInterface},\n    {\"getSigners\",       \"()[\" OBJ,         (void *)&JVM_GetClassSigners},\n    {\"setSigners\",       \"([\" OBJ \")V\",     (void *)&JVM_SetClassSigners},\n    {\"isArray\",          \"()Z\",             (void *)&JVM_IsArrayClass},\n    {\"isPrimitive\",      \"()Z\",             (void *)&JVM_IsPrimitiveClass},\n    {\"getModifiers\",     \"()I\",             (void *)&JVM_GetClassModifiers},\n    {\"getDeclaredFields0\",\"(Z)[\" FLD,       (void *)&JVM_GetClassDeclaredFields},\n    {\"getDeclaredMethods0\",\"(Z)[\" MHD,      (void *)&JVM_GetClassDeclaredMethods},\n    {\"getDeclaredConstructors0\",\"(Z)[\" CTR, (void *)&JVM_GetClassDeclaredConstructors},\n    {\"getProtectionDomain0\", \"()\" PD,       (void *)&JVM_GetProtectionDomain},\n    {\"getDeclaredClasses0\",  \"()[\" CLS,      (void *)&JVM_GetDeclaredClasses},\n    {\"getDeclaringClass0\",   \"()\" CLS,      (void *)&JVM_GetDeclaringClass},\n    {\"getSimpleBinaryName0\", \"()\" STR,      (void *)&JVM_GetSimpleBinaryName},\n    {\"getGenericSignature0\", \"()\" STR,      (void *)&JVM_GetClassSignature},\n    {\"getRawAnnotations\",      \"()\" BA,        (void *)&JVM_GetClassAnnotations},\n    {\"getConstantPool\",     \"()\" CPL,       (void *)&JVM_GetClassConstantPool},\n    {\"desiredAssertionStatus0\",\"(\"CLS\")Z\",(void *)&JVM_DesiredAssertionStatus},\n    {\"getEnclosingMethod0\", \"()[\" OBJ,      (void *)&JVM_GetEnclosingMethodInfo},\n    {\"getRawTypeAnnotations\", \"()\" BA,      (void *)&JVM_GetClassTypeAnnotations},\n};\n\n\n\nJNIEXPORT void JNICALL\nJava_java_lang_Class_registerNatives(JNIEnv *env, jclass cls)\n{\n    // 注册本地方法\n    methods[1].fnPtr = (void *)(*env)->GetSuperclass;\n    (*env)->RegisterNatives(env, cls, methods,\n                            sizeof(methods)/sizeof(JNINativeMethod));\n}\n```\n\n# jni.cpp # jni_RegisterNatives()\n通过以上源码发现均调用的`(*env)->RegisterNatives(env, cls, methods...`，这里的`*env`为`JNI`环境，\n方法进入`jni_RegisterNatives()`\n\n```c\n  // 注册Java系统类中的本地方法\nJNI_ENTRY(jint, jni_RegisterNatives(JNIEnv *env, jclass clazz,\n                                    const JNINativeMethod *methods,\n                                    jint nMethods))\n  JNIWrapper(\"RegisterNatives\");\n  HOTSPOT_JNI_REGISTERNATIVES_ENTRY(env, clazz, (void *) methods, nMethods);\n  jint ret = 0;\n  DT_RETURN_MARK(RegisterNatives, jint, (const jint&)ret);\n\n  // 加载对应的类并转换成Klass对象\n  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));\n\n  for (int index = 0; index < nMethods; index++) {\n    const char* meth_name = methods[index].name;\n    const char* meth_sig = methods[index].signature;\n    int meth_name_len = (int)strlen(meth_name);\n\n    // The class should have been loaded (we have an instance of the class\n    // passed in) so the method and signature should already be in the symbol\n    // table.  If they're not there, the method doesn't exist.\n    // 方法名\n    TempNewSymbol  name = SymbolTable::probe(meth_name, meth_name_len);\n    // 方法签名\n    TempNewSymbol  signature = SymbolTable::probe(meth_sig, (int)strlen(meth_sig));\n\n    // 如果没找到该方法则抛出java.lang.NoSuchMethodError()\n    if (name == NULL || signature == NULL) {\n      ResourceMark rm;\n      stringStream st;\n      st.print(\"Method %s.%s%s not found\", k->external_name(), meth_name, meth_sig);\n      // Must return negative value on failure\n      THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), -1);\n    }\n\n    // 执行注册本地方法\n    bool res = register_native(k, name, signature,\n                               (address) methods[index].fnPtr, THREAD);\n    if (!res) {\n      ret = -1;\n      break;\n    }\n  }\n  return ret;\nJNI_END\n```\n\n\n# jni.cpp # register_native()\n\n```c\nstatic bool register_native(Klass* k, Symbol* name, Symbol* signature, address entry, TRAPS) {\n  // 找到对应的方法\n  Method* method = k->lookup_method(name, signature);\n  if (method == NULL) {\n    ResourceMark rm;\n    stringStream st;\n    st.print(\"Method %s name or signature does not match\",\n             Method::name_and_sig_as_C_string(k, name, signature));\n    THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), false);\n  }\n  if (!method->is_native()) {\n    // 检查JVMTI是否指定native方法前缀\n    // trying to register to a non-native method, see if a JVM TI agent has added prefix(es)\n    method = find_prefixed_native(k, name, signature, THREAD);\n    if (method == NULL) {\n      ResourceMark rm;\n      stringStream st;\n      st.print(\"Method %s is not declared as native\",\n               Method::name_and_sig_as_C_string(k, name, signature));\n      THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), false);\n    }\n  }\n\n  if (entry != NULL) {\n    // 设置本为本地方法\n    method->set_native_function(entry,\n      Method::native_bind_event_is_interesting);\n  } else {\n    method->clear_native_function();\n  }\n  if (PrintJNIResolving) {\n    ResourceMark rm(THREAD);\n    tty->print_cr(\"[Registering JNI native method %s.%s]\",\n      method->method_holder()->external_name(),\n      method->name()->as_C_string());\n  }\n  return true;\n}\n```","slug":"analysis-of-hotspot-jvm-register-natives","published":1,"updated":"2018-06-03T18:12:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2n00212zs6qcubjldn","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>在Java的系统包下如：</p>\n<ul>\n<li>java.lang.System</li>\n<li>java.lang.Object</li>\n<li>java.lang.Class</li>\n</ul>\n<p>等类中均有一个静态块用来执行一个叫做<code>registerNatives()</code>的native方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">registerNatives</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    registerNatives();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个native方法里究竟都做了啥？我们进去瞧瞧。</p>\n<a id=\"more\"></a>\n<h1 id=\"System-c\"><a href=\"#System-c\" class=\"headerlink\" title=\"System.c\"></a>System.c</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Only register the performance-critical methods */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> JNINativeMethod methods[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"currentTimeMillis\"</span>, <span class=\"string\">\"()J\"</span>,              (<span class=\"keyword\">void</span> *)&amp;JVM_CurrentTimeMillis&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"nanoTime\"</span>,          <span class=\"string\">\"()J\"</span>,              (<span class=\"keyword\">void</span> *)&amp;JVM_NanoTime&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"arraycopy\"</span>,     <span class=\"string\">\"(\"</span> OBJ <span class=\"string\">\"I\"</span> OBJ <span class=\"string\">\"II)V\"</span>, (<span class=\"keyword\">void</span> *)&amp;JVM_ArrayCopy&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> OBJ</span></span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL</span><br><span class=\"line\">Java_java_lang_System_registerNatives(JNIEnv *env, jclass cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册本地方法</span></span><br><span class=\"line\">    (*env)-&gt;RegisterNatives(env, cls,</span><br><span class=\"line\">                            methods, <span class=\"keyword\">sizeof</span>(methods)/<span class=\"keyword\">sizeof</span>(methods[<span class=\"number\">0</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Object-c\"><a href=\"#Object-c\" class=\"headerlink\" title=\"Object.c\"></a>Object.c</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> JNINativeMethod methods[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"hashCode\"</span>,    <span class=\"string\">\"()I\"</span>,                    (<span class=\"keyword\">void</span> *)&amp;JVM_IHashCode&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"wait\"</span>,        <span class=\"string\">\"(J)V\"</span>,                   (<span class=\"keyword\">void</span> *)&amp;JVM_MonitorWait&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"notify\"</span>,      <span class=\"string\">\"()V\"</span>,                    (<span class=\"keyword\">void</span> *)&amp;JVM_MonitorNotify&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"notifyAll\"</span>,   <span class=\"string\">\"()V\"</span>,                    (<span class=\"keyword\">void</span> *)&amp;JVM_MonitorNotifyAll&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"clone\"</span>,       <span class=\"string\">\"()Ljava/lang/Object;\"</span>,   (<span class=\"keyword\">void</span> *)&amp;JVM_Clone&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL</span><br><span class=\"line\">Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册本地方法</span></span><br><span class=\"line\">    (*env)-&gt;RegisterNatives(env, cls,</span><br><span class=\"line\">                            methods, <span class=\"keyword\">sizeof</span>(methods)/<span class=\"keyword\">sizeof</span>(methods[<span class=\"number\">0</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Class-c\"><a href=\"#Class-c\" class=\"headerlink\" title=\"Class.c\"></a>Class.c</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> JNINativeMethod methods[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getName0\"</span>,         <span class=\"string\">\"()\"</span> STR,          (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassName&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getSuperclass\"</span>,    <span class=\"string\">\"()\"</span> CLS,          <span class=\"literal\">NULL</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getInterfaces0\"</span>,   <span class=\"string\">\"()[\"</span> CLS,         (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassInterfaces&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"isInterface\"</span>,      <span class=\"string\">\"()Z\"</span>,             (<span class=\"keyword\">void</span> *)&amp;JVM_IsInterface&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getSigners\"</span>,       <span class=\"string\">\"()[\"</span> OBJ,         (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassSigners&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"setSigners\"</span>,       <span class=\"string\">\"([\"</span> OBJ <span class=\"string\">\")V\"</span>,     (<span class=\"keyword\">void</span> *)&amp;JVM_SetClassSigners&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"isArray\"</span>,          <span class=\"string\">\"()Z\"</span>,             (<span class=\"keyword\">void</span> *)&amp;JVM_IsArrayClass&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"isPrimitive\"</span>,      <span class=\"string\">\"()Z\"</span>,             (<span class=\"keyword\">void</span> *)&amp;JVM_IsPrimitiveClass&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getModifiers\"</span>,     <span class=\"string\">\"()I\"</span>,             (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassModifiers&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaredFields0\"</span>,<span class=\"string\">\"(Z)[\"</span> FLD,       (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassDeclaredFields&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaredMethods0\"</span>,<span class=\"string\">\"(Z)[\"</span> MHD,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassDeclaredMethods&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaredConstructors0\"</span>,<span class=\"string\">\"(Z)[\"</span> CTR, (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassDeclaredConstructors&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getProtectionDomain0\"</span>, <span class=\"string\">\"()\"</span> PD,       (<span class=\"keyword\">void</span> *)&amp;JVM_GetProtectionDomain&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaredClasses0\"</span>,  <span class=\"string\">\"()[\"</span> CLS,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetDeclaredClasses&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaringClass0\"</span>,   <span class=\"string\">\"()\"</span> CLS,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetDeclaringClass&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getSimpleBinaryName0\"</span>, <span class=\"string\">\"()\"</span> STR,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetSimpleBinaryName&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getGenericSignature0\"</span>, <span class=\"string\">\"()\"</span> STR,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassSignature&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getRawAnnotations\"</span>,      <span class=\"string\">\"()\"</span> BA,        (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassAnnotations&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getConstantPool\"</span>,     <span class=\"string\">\"()\"</span> CPL,       (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassConstantPool&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"desiredAssertionStatus0\"</span>,<span class=\"string\">\"(\"</span>CLS<span class=\"string\">\")Z\"</span>,(<span class=\"keyword\">void</span> *)&amp;JVM_DesiredAssertionStatus&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getEnclosingMethod0\"</span>, <span class=\"string\">\"()[\"</span> OBJ,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetEnclosingMethodInfo&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getRawTypeAnnotations\"</span>, <span class=\"string\">\"()\"</span> BA,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassTypeAnnotations&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL</span><br><span class=\"line\">Java_java_lang_Class_registerNatives(JNIEnv *env, jclass cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册本地方法</span></span><br><span class=\"line\">    methods[<span class=\"number\">1</span>].fnPtr = (<span class=\"keyword\">void</span> *)(*env)-&gt;GetSuperclass;</span><br><span class=\"line\">    (*env)-&gt;RegisterNatives(env, cls, methods,</span><br><span class=\"line\">                            <span class=\"keyword\">sizeof</span>(methods)/<span class=\"keyword\">sizeof</span>(JNINativeMethod));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jni-cpp-jni-RegisterNatives\"><a href=\"#jni-cpp-jni-RegisterNatives\" class=\"headerlink\" title=\"jni.cpp # jni_RegisterNatives()\"></a>jni.cpp # jni_RegisterNatives()</h1><p>通过以上源码发现均调用的<code>(*env)-&gt;RegisterNatives(env, cls, methods...</code>，这里的<code>*env</code>为<code>JNI</code>环境，<br>方法进入<code>jni_RegisterNatives()</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 注册Java系统类中的本地方法</span></span><br><span class=\"line\">JNI_ENTRY(jint, jni_RegisterNatives(JNIEnv *env, jclass clazz,</span><br><span class=\"line\">                                    <span class=\"keyword\">const</span> JNINativeMethod *methods,</span><br><span class=\"line\">                                    jint nMethods))</span><br><span class=\"line\">  JNIWrapper(<span class=\"string\">\"RegisterNatives\"</span>);</span><br><span class=\"line\">  HOTSPOT_JNI_REGISTERNATIVES_ENTRY(env, clazz, (<span class=\"keyword\">void</span> *) methods, nMethods);</span><br><span class=\"line\">  jint ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  DT_RETURN_MARK(RegisterNatives, jint, (<span class=\"keyword\">const</span> jint&amp;)ret);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载对应的类并转换成Klass对象</span></span><br><span class=\"line\">  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; nMethods; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* meth_name = methods[index].name;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* meth_sig = methods[index].signature;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> meth_name_len = (<span class=\"keyword\">int</span>)<span class=\"built_in\">strlen</span>(meth_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The class should have been loaded (we have an instance of the class</span></span><br><span class=\"line\">    <span class=\"comment\">// passed in) so the method and signature should already be in the symbol</span></span><br><span class=\"line\">    <span class=\"comment\">// table.  If they're not there, the method doesn't exist.</span></span><br><span class=\"line\">    <span class=\"comment\">// 方法名</span></span><br><span class=\"line\">    TempNewSymbol  name = SymbolTable::probe(meth_name, meth_name_len);</span><br><span class=\"line\">    <span class=\"comment\">// 方法签名</span></span><br><span class=\"line\">    TempNewSymbol  signature = SymbolTable::probe(meth_sig, (<span class=\"keyword\">int</span>)<span class=\"built_in\">strlen</span>(meth_sig));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没找到该方法则抛出java.lang.NoSuchMethodError()</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"literal\">NULL</span> || signature == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      ResourceMark rm;</span><br><span class=\"line\">      stringStream st;</span><br><span class=\"line\">      st.print(<span class=\"string\">\"Method %s.%s%s not found\"</span>, k-&gt;external_name(), meth_name, meth_sig);</span><br><span class=\"line\">      <span class=\"comment\">// Must return negative value on failure</span></span><br><span class=\"line\">      THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行注册本地方法</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> res = register_native(k, name, signature,</span><br><span class=\"line\">                               (address) methods[index].fnPtr, THREAD);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">      ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">JNI_END</span><br></pre></td></tr></table></figure>\n<h1 id=\"jni-cpp-register-native\"><a href=\"#jni-cpp-register-native\" class=\"headerlink\" title=\"jni.cpp # register_native()\"></a>jni.cpp # register_native()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">register_native</span><span class=\"params\">(Klass* k, Symbol* name, Symbol* signature, address entry, TRAPS)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 找到对应的方法</span></span><br><span class=\"line\">  Method* method = k-&gt;lookup_method(name, signature);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (method == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    ResourceMark rm;</span><br><span class=\"line\">    stringStream st;</span><br><span class=\"line\">    st.print(<span class=\"string\">\"Method %s name or signature does not match\"</span>,</span><br><span class=\"line\">             Method::name_and_sig_as_C_string(k, name, signature));</span><br><span class=\"line\">    THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!method-&gt;is_native()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查JVMTI是否指定native方法前缀</span></span><br><span class=\"line\">    <span class=\"comment\">// trying to register to a non-native method, see if a JVM TI agent has added prefix(es)</span></span><br><span class=\"line\">    method = find_prefixed_native(k, name, signature, THREAD);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      ResourceMark rm;</span><br><span class=\"line\">      stringStream st;</span><br><span class=\"line\">      st.print(<span class=\"string\">\"Method %s is not declared as native\"</span>,</span><br><span class=\"line\">               Method::name_and_sig_as_C_string(k, name, signature));</span><br><span class=\"line\">      THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entry != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置本为本地方法</span></span><br><span class=\"line\">    method-&gt;set_native_function(entry,</span><br><span class=\"line\">      Method::native_bind_event_is_interesting);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    method-&gt;clear_native_function();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (PrintJNIResolving) &#123;</span><br><span class=\"line\">    <span class=\"function\">ResourceMark <span class=\"title\">rm</span><span class=\"params\">(THREAD)</span></span>;</span><br><span class=\"line\">    tty-&gt;print_cr(<span class=\"string\">\"[Registering JNI native method %s.%s]\"</span>,</span><br><span class=\"line\">      method-&gt;method_holder()-&gt;external_name(),</span><br><span class=\"line\">      method-&gt;name()-&gt;as_C_string());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>在Java的系统包下如：</p>\n<ul>\n<li>java.lang.System</li>\n<li>java.lang.Object</li>\n<li>java.lang.Class</li>\n</ul>\n<p>等类中均有一个静态块用来执行一个叫做<code>registerNatives()</code>的native方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">registerNatives</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    registerNatives();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个native方法里究竟都做了啥？我们进去瞧瞧。</p>","more":"<h1 id=\"System-c\"><a href=\"#System-c\" class=\"headerlink\" title=\"System.c\"></a>System.c</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Only register the performance-critical methods */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> JNINativeMethod methods[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"currentTimeMillis\"</span>, <span class=\"string\">\"()J\"</span>,              (<span class=\"keyword\">void</span> *)&amp;JVM_CurrentTimeMillis&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"nanoTime\"</span>,          <span class=\"string\">\"()J\"</span>,              (<span class=\"keyword\">void</span> *)&amp;JVM_NanoTime&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"arraycopy\"</span>,     <span class=\"string\">\"(\"</span> OBJ <span class=\"string\">\"I\"</span> OBJ <span class=\"string\">\"II)V\"</span>, (<span class=\"keyword\">void</span> *)&amp;JVM_ArrayCopy&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">undef</span> OBJ</span></span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL</span><br><span class=\"line\">Java_java_lang_System_registerNatives(JNIEnv *env, jclass cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册本地方法</span></span><br><span class=\"line\">    (*env)-&gt;RegisterNatives(env, cls,</span><br><span class=\"line\">                            methods, <span class=\"keyword\">sizeof</span>(methods)/<span class=\"keyword\">sizeof</span>(methods[<span class=\"number\">0</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Object-c\"><a href=\"#Object-c\" class=\"headerlink\" title=\"Object.c\"></a>Object.c</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> JNINativeMethod methods[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"hashCode\"</span>,    <span class=\"string\">\"()I\"</span>,                    (<span class=\"keyword\">void</span> *)&amp;JVM_IHashCode&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"wait\"</span>,        <span class=\"string\">\"(J)V\"</span>,                   (<span class=\"keyword\">void</span> *)&amp;JVM_MonitorWait&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"notify\"</span>,      <span class=\"string\">\"()V\"</span>,                    (<span class=\"keyword\">void</span> *)&amp;JVM_MonitorNotify&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"notifyAll\"</span>,   <span class=\"string\">\"()V\"</span>,                    (<span class=\"keyword\">void</span> *)&amp;JVM_MonitorNotifyAll&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"clone\"</span>,       <span class=\"string\">\"()Ljava/lang/Object;\"</span>,   (<span class=\"keyword\">void</span> *)&amp;JVM_Clone&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL</span><br><span class=\"line\">Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册本地方法</span></span><br><span class=\"line\">    (*env)-&gt;RegisterNatives(env, cls,</span><br><span class=\"line\">                            methods, <span class=\"keyword\">sizeof</span>(methods)/<span class=\"keyword\">sizeof</span>(methods[<span class=\"number\">0</span>]));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Class-c\"><a href=\"#Class-c\" class=\"headerlink\" title=\"Class.c\"></a>Class.c</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> JNINativeMethod methods[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getName0\"</span>,         <span class=\"string\">\"()\"</span> STR,          (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassName&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getSuperclass\"</span>,    <span class=\"string\">\"()\"</span> CLS,          <span class=\"literal\">NULL</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getInterfaces0\"</span>,   <span class=\"string\">\"()[\"</span> CLS,         (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassInterfaces&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"isInterface\"</span>,      <span class=\"string\">\"()Z\"</span>,             (<span class=\"keyword\">void</span> *)&amp;JVM_IsInterface&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getSigners\"</span>,       <span class=\"string\">\"()[\"</span> OBJ,         (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassSigners&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"setSigners\"</span>,       <span class=\"string\">\"([\"</span> OBJ <span class=\"string\">\")V\"</span>,     (<span class=\"keyword\">void</span> *)&amp;JVM_SetClassSigners&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"isArray\"</span>,          <span class=\"string\">\"()Z\"</span>,             (<span class=\"keyword\">void</span> *)&amp;JVM_IsArrayClass&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"isPrimitive\"</span>,      <span class=\"string\">\"()Z\"</span>,             (<span class=\"keyword\">void</span> *)&amp;JVM_IsPrimitiveClass&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getModifiers\"</span>,     <span class=\"string\">\"()I\"</span>,             (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassModifiers&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaredFields0\"</span>,<span class=\"string\">\"(Z)[\"</span> FLD,       (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassDeclaredFields&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaredMethods0\"</span>,<span class=\"string\">\"(Z)[\"</span> MHD,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassDeclaredMethods&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaredConstructors0\"</span>,<span class=\"string\">\"(Z)[\"</span> CTR, (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassDeclaredConstructors&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getProtectionDomain0\"</span>, <span class=\"string\">\"()\"</span> PD,       (<span class=\"keyword\">void</span> *)&amp;JVM_GetProtectionDomain&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaredClasses0\"</span>,  <span class=\"string\">\"()[\"</span> CLS,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetDeclaredClasses&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getDeclaringClass0\"</span>,   <span class=\"string\">\"()\"</span> CLS,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetDeclaringClass&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getSimpleBinaryName0\"</span>, <span class=\"string\">\"()\"</span> STR,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetSimpleBinaryName&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getGenericSignature0\"</span>, <span class=\"string\">\"()\"</span> STR,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassSignature&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getRawAnnotations\"</span>,      <span class=\"string\">\"()\"</span> BA,        (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassAnnotations&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getConstantPool\"</span>,     <span class=\"string\">\"()\"</span> CPL,       (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassConstantPool&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"desiredAssertionStatus0\"</span>,<span class=\"string\">\"(\"</span>CLS<span class=\"string\">\")Z\"</span>,(<span class=\"keyword\">void</span> *)&amp;JVM_DesiredAssertionStatus&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getEnclosingMethod0\"</span>, <span class=\"string\">\"()[\"</span> OBJ,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetEnclosingMethodInfo&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">\"getRawTypeAnnotations\"</span>, <span class=\"string\">\"()\"</span> BA,      (<span class=\"keyword\">void</span> *)&amp;JVM_GetClassTypeAnnotations&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT <span class=\"keyword\">void</span> JNICALL</span><br><span class=\"line\">Java_java_lang_Class_registerNatives(JNIEnv *env, jclass cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注册本地方法</span></span><br><span class=\"line\">    methods[<span class=\"number\">1</span>].fnPtr = (<span class=\"keyword\">void</span> *)(*env)-&gt;GetSuperclass;</span><br><span class=\"line\">    (*env)-&gt;RegisterNatives(env, cls, methods,</span><br><span class=\"line\">                            <span class=\"keyword\">sizeof</span>(methods)/<span class=\"keyword\">sizeof</span>(JNINativeMethod));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jni-cpp-jni-RegisterNatives\"><a href=\"#jni-cpp-jni-RegisterNatives\" class=\"headerlink\" title=\"jni.cpp # jni_RegisterNatives()\"></a>jni.cpp # jni_RegisterNatives()</h1><p>通过以上源码发现均调用的<code>(*env)-&gt;RegisterNatives(env, cls, methods...</code>，这里的<code>*env</code>为<code>JNI</code>环境，<br>方法进入<code>jni_RegisterNatives()</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 注册Java系统类中的本地方法</span></span><br><span class=\"line\">JNI_ENTRY(jint, jni_RegisterNatives(JNIEnv *env, jclass clazz,</span><br><span class=\"line\">                                    <span class=\"keyword\">const</span> JNINativeMethod *methods,</span><br><span class=\"line\">                                    jint nMethods))</span><br><span class=\"line\">  JNIWrapper(<span class=\"string\">\"RegisterNatives\"</span>);</span><br><span class=\"line\">  HOTSPOT_JNI_REGISTERNATIVES_ENTRY(env, clazz, (<span class=\"keyword\">void</span> *) methods, nMethods);</span><br><span class=\"line\">  jint ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  DT_RETURN_MARK(RegisterNatives, jint, (<span class=\"keyword\">const</span> jint&amp;)ret);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载对应的类并转换成Klass对象</span></span><br><span class=\"line\">  Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; nMethods; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* meth_name = methods[index].name;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* meth_sig = methods[index].signature;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> meth_name_len = (<span class=\"keyword\">int</span>)<span class=\"built_in\">strlen</span>(meth_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The class should have been loaded (we have an instance of the class</span></span><br><span class=\"line\">    <span class=\"comment\">// passed in) so the method and signature should already be in the symbol</span></span><br><span class=\"line\">    <span class=\"comment\">// table.  If they're not there, the method doesn't exist.</span></span><br><span class=\"line\">    <span class=\"comment\">// 方法名</span></span><br><span class=\"line\">    TempNewSymbol  name = SymbolTable::probe(meth_name, meth_name_len);</span><br><span class=\"line\">    <span class=\"comment\">// 方法签名</span></span><br><span class=\"line\">    TempNewSymbol  signature = SymbolTable::probe(meth_sig, (<span class=\"keyword\">int</span>)<span class=\"built_in\">strlen</span>(meth_sig));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没找到该方法则抛出java.lang.NoSuchMethodError()</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"literal\">NULL</span> || signature == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      ResourceMark rm;</span><br><span class=\"line\">      stringStream st;</span><br><span class=\"line\">      st.print(<span class=\"string\">\"Method %s.%s%s not found\"</span>, k-&gt;external_name(), meth_name, meth_sig);</span><br><span class=\"line\">      <span class=\"comment\">// Must return negative value on failure</span></span><br><span class=\"line\">      THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行注册本地方法</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> res = register_native(k, name, signature,</span><br><span class=\"line\">                               (address) methods[index].fnPtr, THREAD);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">      ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">JNI_END</span><br></pre></td></tr></table></figure>\n<h1 id=\"jni-cpp-register-native\"><a href=\"#jni-cpp-register-native\" class=\"headerlink\" title=\"jni.cpp # register_native()\"></a>jni.cpp # register_native()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">register_native</span><span class=\"params\">(Klass* k, Symbol* name, Symbol* signature, address entry, TRAPS)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 找到对应的方法</span></span><br><span class=\"line\">  Method* method = k-&gt;lookup_method(name, signature);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (method == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    ResourceMark rm;</span><br><span class=\"line\">    stringStream st;</span><br><span class=\"line\">    st.print(<span class=\"string\">\"Method %s name or signature does not match\"</span>,</span><br><span class=\"line\">             Method::name_and_sig_as_C_string(k, name, signature));</span><br><span class=\"line\">    THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!method-&gt;is_native()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查JVMTI是否指定native方法前缀</span></span><br><span class=\"line\">    <span class=\"comment\">// trying to register to a non-native method, see if a JVM TI agent has added prefix(es)</span></span><br><span class=\"line\">    method = find_prefixed_native(k, name, signature, THREAD);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      ResourceMark rm;</span><br><span class=\"line\">      stringStream st;</span><br><span class=\"line\">      st.print(<span class=\"string\">\"Method %s is not declared as native\"</span>,</span><br><span class=\"line\">               Method::name_and_sig_as_C_string(k, name, signature));</span><br><span class=\"line\">      THROW_MSG_(vmSymbols::java_lang_NoSuchMethodError(), st.as_string(), <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (entry != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置本为本地方法</span></span><br><span class=\"line\">    method-&gt;set_native_function(entry,</span><br><span class=\"line\">      Method::native_bind_event_is_interesting);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    method-&gt;clear_native_function();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (PrintJNIResolving) &#123;</span><br><span class=\"line\">    <span class=\"function\">ResourceMark <span class=\"title\">rm</span><span class=\"params\">(THREAD)</span></span>;</span><br><span class=\"line\">    tty-&gt;print_cr(<span class=\"string\">\"[Registering JNI native method %s.%s]\"</span>,</span><br><span class=\"line\">      method-&gt;method_holder()-&gt;external_name(),</span><br><span class=\"line\">      method-&gt;name()-&gt;as_C_string());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"聊一聊使用多线程处理MQ消息的正确姿势","date":"2018-04-30T19:27:18.000Z","_content":"\n![openjdk](/images/post/2018/05/01/rabbitmq-logo.png)\n\n> Q：有这样一个场景，MQ的生产者生产消息能力是消费者的数倍。\n> 如果不能尽快消费完会导致队列中的消息随着时间的推移会越积越多，而且业务也无任何时效性可言，\n> 那么问题来了，在不增加消费节点的前提下如何快速处理完消息以保证吞吐量？\n\n面对以上问题，有人可能会信心满满地脱口而出：**用多线程**。OK，我只能说思路没错，那么如何落地呢？\n\n<!-- more -->\n你可能会说使用JDK的`ThreadPoolExecutor`或者`Executors`线程池来处理。具体如何去用？只用线程池就够了吗？有什么坑吗？\n带着这些疑问，我们分别来深入分析一下看看是否能满足需求。\n\n\n# ThreadPoolExecutor()\n```java\n    private void exec() {\n\n        /*\n         * 创建线程池\n         * corePoolSize 10\n         * maximumPoolSize 10\n         * queue capacity 10\n         */\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n            10, 10, 60, TimeUnit.SECONDS,\n                new ArrayBlockingQueue<Runnable>(10));\n\n        // 提交100个任务\n        for (int i = 0; i < 100; i++) {\n            threadPoolExecutor.submit(new WorkerThread());\n        }\n\n    }\n\n    /**\n     * 任务线程\n     */\n    private class WorkerThread implements Runnable {\n\n        public void run() {\n            System.out.println(new Date() + \" \" + Thread.currentThread().getName() + \" is running...\");\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n\n执行以上程序会抛出错误，原因是因为submit的任务数已经超出了其queue的容量，导致触发了拒绝策略。\n```\nException in thread \"main\" java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@4d7e1886\n```\n> Q: 能不能把有界队列`ArrayBlockingQueue`的容量尽量设置大一些呢？或者干脆换成无界队列`LinkedBlockingQueue`？\n\n1. 由于队列中的消息数量无法提前预测具体数量，所以无法使设置准确默认值。\n2. 换成`LinkedBlockingQueue`虽然不会抛出以上错误，但这里会有一个问题：N多待处理任务临时放在JVM中，一方面占用大量内存，另一方面如果服务重启就会导致大量任务丢失。\n\n> 既然无法从queue容量上去解决，那能否从线程池的拒绝策略着手？\n\nJDK线程池有四种拒绝策略`AbortPolicy`、`CallerRunsPolicy`、 `DiscardOledestPolicy`、`DiscardPolicy`，默认使用AbortPolicy直接抛出异常。\n\n其中`AbortPolicy`，`DiscardOledestPolicy`、`DiscardPolicy`均会直接丢弃任务肯定不符合预期，\n`CallerRunsPolicy`是将该任务抛给主线程执行，这里也会有一个问题，主线程在执行任务时是无法向线程池中提交任务的，\n假如主线程执行该任务需要3秒，在执行至第1秒的时候，线程池中已经有若干工作线程处于闲置状态，此时主线程需要执行完剩余的2秒才能继续向线程池工作线程分配任务，\n使用该拒绝策略虽然不会导致消息丢失，但也不能达到资源最优利用，所以pass。\n\n所以，问题解决方案基本浮出水面，\n1. 主线程只负责分配任务，Worker线程只负责执行任务。\n2. Worker线程执行完成后第一时间通知主线程，然后主线程及时分配任务。\n\n这里，我们引入`Semaphore`作为令牌桶，以达到主线程和工作线程间通信的目的。\n\n1. 初始化与Worker线程数量相同的令牌\n2. 主线程向线程池提交任务时先尝试从令牌桶获取一个令牌，如果令牌桶为空则block。\n3. 把令牌传入Worker线程，Worker线程执行完后调用`release()`归还令牌。\n\n最终代码参见以下：\n```java\n\n    /* 初始化与Worker线程数量相同的令牌 */\n    private Semaphore permits = new Semaphore(10);\n\n    private void exec() throws InterruptedException {\n\n        /*\n         * 创建线程池\n         * corePoolSize 10\n         * maximumPoolSize 10\n         * queue capacity 10\n         */\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n            10, 10, 60, TimeUnit.SECONDS,\n                new ArrayBlockingQueue<Runnable>(10));\n\n        for (int i = 0; i < 100; i++) {\n            // 获取令牌，如果获取不到则block，直到有worker线程归还\n            permits.acquire();\n            // 提交任务\n            threadPoolExecutor.submit(new WorkerThread(permits));\n        }\n    }\n\n    /**\n     * 任务线程\n     */\n    private class WorkerThread implements Runnable {\n\n        private Semaphore permits;\n\n        public WorkerThread(Semaphore permits) {\n            this.permits = permits;\n        }\n\n        public void run() {\n            System.out.println(new Date() + \" \" + Thread.currentThread().getName() + \" is running...\");\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            finally {\n                if (permits != null) {\n                    // 释放令牌\n                    permits.release();\n                }\n            }\n\n        }\n    }\n\n```\n\n或者使用更为简洁的`Executors`框架，上面的代码会变成：\n\n```java\n\n    /* Worker任务线程池 */\n    private Executor taskPool = Executors.newFixedThreadPool(10);\n\n    /* 初始化与Worker线程数量相同的令牌 */\n    private Semaphore permits = new Semaphore(10);\n    \n    \n    private void exec() throws InterruptedException {\n\n        for (int i = 0; i < 100; i++) {\n            // 获取令牌，如果获取不到则block，直到有worker线程归还\n            permits.acquire();\n            taskPool.execute(new WorkerThread(permits));\n        }\n\n    }\n\n    /**\n     * 任务线程\n     */\n    private class WorkerThread implements Runnable {\n\n        private Semaphore permits;\n\n        public WorkerThread(Semaphore permits) {\n            this.permits = permits;\n        }\n\n        public void run() {\n            try {\n                // do sth\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            finally {\n                if (permits != null) {\n                    // 释放令牌\n                    permits.release();\n                }\n            }\n        }\n    }\n```\n\n\n\n","source":"_posts/2018/05/01/consume-mq-message-with-multithreading.md","raw":"---\ntitle: 聊一聊使用多线程处理MQ消息的正确姿势\ndate: 2018-05-01 03:27:18\ncategories: 多线程\ntags:\n    - 多线程\n    - MQ\n---\n\n![openjdk](/images/post/2018/05/01/rabbitmq-logo.png)\n\n> Q：有这样一个场景，MQ的生产者生产消息能力是消费者的数倍。\n> 如果不能尽快消费完会导致队列中的消息随着时间的推移会越积越多，而且业务也无任何时效性可言，\n> 那么问题来了，在不增加消费节点的前提下如何快速处理完消息以保证吞吐量？\n\n面对以上问题，有人可能会信心满满地脱口而出：**用多线程**。OK，我只能说思路没错，那么如何落地呢？\n\n<!-- more -->\n你可能会说使用JDK的`ThreadPoolExecutor`或者`Executors`线程池来处理。具体如何去用？只用线程池就够了吗？有什么坑吗？\n带着这些疑问，我们分别来深入分析一下看看是否能满足需求。\n\n\n# ThreadPoolExecutor()\n```java\n    private void exec() {\n\n        /*\n         * 创建线程池\n         * corePoolSize 10\n         * maximumPoolSize 10\n         * queue capacity 10\n         */\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n            10, 10, 60, TimeUnit.SECONDS,\n                new ArrayBlockingQueue<Runnable>(10));\n\n        // 提交100个任务\n        for (int i = 0; i < 100; i++) {\n            threadPoolExecutor.submit(new WorkerThread());\n        }\n\n    }\n\n    /**\n     * 任务线程\n     */\n    private class WorkerThread implements Runnable {\n\n        public void run() {\n            System.out.println(new Date() + \" \" + Thread.currentThread().getName() + \" is running...\");\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n```\n\n执行以上程序会抛出错误，原因是因为submit的任务数已经超出了其queue的容量，导致触发了拒绝策略。\n```\nException in thread \"main\" java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@4d7e1886\n```\n> Q: 能不能把有界队列`ArrayBlockingQueue`的容量尽量设置大一些呢？或者干脆换成无界队列`LinkedBlockingQueue`？\n\n1. 由于队列中的消息数量无法提前预测具体数量，所以无法使设置准确默认值。\n2. 换成`LinkedBlockingQueue`虽然不会抛出以上错误，但这里会有一个问题：N多待处理任务临时放在JVM中，一方面占用大量内存，另一方面如果服务重启就会导致大量任务丢失。\n\n> 既然无法从queue容量上去解决，那能否从线程池的拒绝策略着手？\n\nJDK线程池有四种拒绝策略`AbortPolicy`、`CallerRunsPolicy`、 `DiscardOledestPolicy`、`DiscardPolicy`，默认使用AbortPolicy直接抛出异常。\n\n其中`AbortPolicy`，`DiscardOledestPolicy`、`DiscardPolicy`均会直接丢弃任务肯定不符合预期，\n`CallerRunsPolicy`是将该任务抛给主线程执行，这里也会有一个问题，主线程在执行任务时是无法向线程池中提交任务的，\n假如主线程执行该任务需要3秒，在执行至第1秒的时候，线程池中已经有若干工作线程处于闲置状态，此时主线程需要执行完剩余的2秒才能继续向线程池工作线程分配任务，\n使用该拒绝策略虽然不会导致消息丢失，但也不能达到资源最优利用，所以pass。\n\n所以，问题解决方案基本浮出水面，\n1. 主线程只负责分配任务，Worker线程只负责执行任务。\n2. Worker线程执行完成后第一时间通知主线程，然后主线程及时分配任务。\n\n这里，我们引入`Semaphore`作为令牌桶，以达到主线程和工作线程间通信的目的。\n\n1. 初始化与Worker线程数量相同的令牌\n2. 主线程向线程池提交任务时先尝试从令牌桶获取一个令牌，如果令牌桶为空则block。\n3. 把令牌传入Worker线程，Worker线程执行完后调用`release()`归还令牌。\n\n最终代码参见以下：\n```java\n\n    /* 初始化与Worker线程数量相同的令牌 */\n    private Semaphore permits = new Semaphore(10);\n\n    private void exec() throws InterruptedException {\n\n        /*\n         * 创建线程池\n         * corePoolSize 10\n         * maximumPoolSize 10\n         * queue capacity 10\n         */\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n            10, 10, 60, TimeUnit.SECONDS,\n                new ArrayBlockingQueue<Runnable>(10));\n\n        for (int i = 0; i < 100; i++) {\n            // 获取令牌，如果获取不到则block，直到有worker线程归还\n            permits.acquire();\n            // 提交任务\n            threadPoolExecutor.submit(new WorkerThread(permits));\n        }\n    }\n\n    /**\n     * 任务线程\n     */\n    private class WorkerThread implements Runnable {\n\n        private Semaphore permits;\n\n        public WorkerThread(Semaphore permits) {\n            this.permits = permits;\n        }\n\n        public void run() {\n            System.out.println(new Date() + \" \" + Thread.currentThread().getName() + \" is running...\");\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            finally {\n                if (permits != null) {\n                    // 释放令牌\n                    permits.release();\n                }\n            }\n\n        }\n    }\n\n```\n\n或者使用更为简洁的`Executors`框架，上面的代码会变成：\n\n```java\n\n    /* Worker任务线程池 */\n    private Executor taskPool = Executors.newFixedThreadPool(10);\n\n    /* 初始化与Worker线程数量相同的令牌 */\n    private Semaphore permits = new Semaphore(10);\n    \n    \n    private void exec() throws InterruptedException {\n\n        for (int i = 0; i < 100; i++) {\n            // 获取令牌，如果获取不到则block，直到有worker线程归还\n            permits.acquire();\n            taskPool.execute(new WorkerThread(permits));\n        }\n\n    }\n\n    /**\n     * 任务线程\n     */\n    private class WorkerThread implements Runnable {\n\n        private Semaphore permits;\n\n        public WorkerThread(Semaphore permits) {\n            this.permits = permits;\n        }\n\n        public void run() {\n            try {\n                // do sth\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            finally {\n                if (permits != null) {\n                    // 释放令牌\n                    permits.release();\n                }\n            }\n        }\n    }\n```\n\n\n\n","slug":"consume-mq-message-with-multithreading","published":1,"updated":"2018-05-09T18:09:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2o00242zs6bumlgvaf","content":"<p><img src=\"/images/post/2018/05/01/rabbitmq-logo.png\" alt=\"openjdk\"></p>\n<blockquote>\n<p>Q：有这样一个场景，MQ的生产者生产消息能力是消费者的数倍。<br>如果不能尽快消费完会导致队列中的消息随着时间的推移会越积越多，而且业务也无任何时效性可言，<br>那么问题来了，在不增加消费节点的前提下如何快速处理完消息以保证吞吐量？</p>\n</blockquote>\n<p>面对以上问题，有人可能会信心满满地脱口而出：<strong>用多线程</strong>。OK，我只能说思路没错，那么如何落地呢？</p>\n<a id=\"more\"></a>\n<p>你可能会说使用JDK的<code>ThreadPoolExecutor</code>或者<code>Executors</code>线程池来处理。具体如何去用？只用线程池就够了吗？有什么坑吗？<br>带着这些疑问，我们分别来深入分析一下看看是否能满足需求。</p>\n<h1 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor()\"></a>ThreadPoolExecutor()</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建线程池</span></span><br><span class=\"line\"><span class=\"comment\">     * corePoolSize 10</span></span><br><span class=\"line\"><span class=\"comment\">     * maximumPoolSize 10</span></span><br><span class=\"line\"><span class=\"comment\">     * queue capacity 10</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ThreadPoolExecutor threadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">        <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">60</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">10</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提交100个任务</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        threadPoolExecutor.submit(<span class=\"keyword\">new</span> WorkerThread());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\" \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" is running...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行以上程序会抛出错误，原因是因为submit的任务数已经超出了其queue的容量，导致触发了拒绝策略。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@4d7e1886</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Q: 能不能把有界队列<code>ArrayBlockingQueue</code>的容量尽量设置大一些呢？或者干脆换成无界队列<code>LinkedBlockingQueue</code>？</p>\n</blockquote>\n<ol>\n<li>由于队列中的消息数量无法提前预测具体数量，所以无法使设置准确默认值。</li>\n<li>换成<code>LinkedBlockingQueue</code>虽然不会抛出以上错误，但这里会有一个问题：N多待处理任务临时放在JVM中，一方面占用大量内存，另一方面如果服务重启就会导致大量任务丢失。</li>\n</ol>\n<blockquote>\n<p>既然无法从queue容量上去解决，那能否从线程池的拒绝策略着手？</p>\n</blockquote>\n<p>JDK线程池有四种拒绝策略<code>AbortPolicy</code>、<code>CallerRunsPolicy</code>、 <code>DiscardOledestPolicy</code>、<code>DiscardPolicy</code>，默认使用AbortPolicy直接抛出异常。</p>\n<p>其中<code>AbortPolicy</code>，<code>DiscardOledestPolicy</code>、<code>DiscardPolicy</code>均会直接丢弃任务肯定不符合预期，<br><code>CallerRunsPolicy</code>是将该任务抛给主线程执行，这里也会有一个问题，主线程在执行任务时是无法向线程池中提交任务的，<br>假如主线程执行该任务需要3秒，在执行至第1秒的时候，线程池中已经有若干工作线程处于闲置状态，此时主线程需要执行完剩余的2秒才能继续向线程池工作线程分配任务，<br>使用该拒绝策略虽然不会导致消息丢失，但也不能达到资源最优利用，所以pass。</p>\n<p>所以，问题解决方案基本浮出水面，</p>\n<ol>\n<li>主线程只负责分配任务，Worker线程只负责执行任务。</li>\n<li>Worker线程执行完成后第一时间通知主线程，然后主线程及时分配任务。</li>\n</ol>\n<p>这里，我们引入<code>Semaphore</code>作为令牌桶，以达到主线程和工作线程间通信的目的。</p>\n<ol>\n<li>初始化与Worker线程数量相同的令牌</li>\n<li>主线程向线程池提交任务时先尝试从令牌桶获取一个令牌，如果令牌桶为空则block。</li>\n<li>把令牌传入Worker线程，Worker线程执行完后调用<code>release()</code>归还令牌。</li>\n</ol>\n<p>最终代码参见以下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 初始化与Worker线程数量相同的令牌 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Semaphore permits = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建线程池</span></span><br><span class=\"line\"><span class=\"comment\">     * corePoolSize 10</span></span><br><span class=\"line\"><span class=\"comment\">     * maximumPoolSize 10</span></span><br><span class=\"line\"><span class=\"comment\">     * queue capacity 10</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ThreadPoolExecutor threadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">        <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">60</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">10</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取令牌，如果获取不到则block，直到有worker线程归还</span></span><br><span class=\"line\">        permits.acquire();</span><br><span class=\"line\">        <span class=\"comment\">// 提交任务</span></span><br><span class=\"line\">        threadPoolExecutor.submit(<span class=\"keyword\">new</span> WorkerThread(permits));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Semaphore permits;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerThread</span><span class=\"params\">(Semaphore permits)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.permits = permits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\" \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" is running...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (permits != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 释放令牌</span></span><br><span class=\"line\">                permits.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者使用更为简洁的<code>Executors</code>框架，上面的代码会变成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Worker任务线程池 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Executor taskPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 初始化与Worker线程数量相同的令牌 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Semaphore permits = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取令牌，如果获取不到则block，直到有worker线程归还</span></span><br><span class=\"line\">        permits.acquire();</span><br><span class=\"line\">        taskPool.execute(<span class=\"keyword\">new</span> WorkerThread(permits));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Semaphore permits;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerThread</span><span class=\"params\">(Semaphore permits)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.permits = permits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// do sth</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (permits != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 释放令牌</span></span><br><span class=\"line\">                permits.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/05/01/rabbitmq-logo.png\" alt=\"openjdk\"></p>\n<blockquote>\n<p>Q：有这样一个场景，MQ的生产者生产消息能力是消费者的数倍。<br>如果不能尽快消费完会导致队列中的消息随着时间的推移会越积越多，而且业务也无任何时效性可言，<br>那么问题来了，在不增加消费节点的前提下如何快速处理完消息以保证吞吐量？</p>\n</blockquote>\n<p>面对以上问题，有人可能会信心满满地脱口而出：<strong>用多线程</strong>。OK，我只能说思路没错，那么如何落地呢？</p>","more":"<p>你可能会说使用JDK的<code>ThreadPoolExecutor</code>或者<code>Executors</code>线程池来处理。具体如何去用？只用线程池就够了吗？有什么坑吗？<br>带着这些疑问，我们分别来深入分析一下看看是否能满足需求。</p>\n<h1 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor()\"></a>ThreadPoolExecutor()</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建线程池</span></span><br><span class=\"line\"><span class=\"comment\">     * corePoolSize 10</span></span><br><span class=\"line\"><span class=\"comment\">     * maximumPoolSize 10</span></span><br><span class=\"line\"><span class=\"comment\">     * queue capacity 10</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ThreadPoolExecutor threadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">        <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">60</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">10</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提交100个任务</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        threadPoolExecutor.submit(<span class=\"keyword\">new</span> WorkerThread());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\" \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" is running...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行以上程序会抛出错误，原因是因为submit的任务数已经超出了其queue的容量，导致触发了拒绝策略。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@4d7e1886</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Q: 能不能把有界队列<code>ArrayBlockingQueue</code>的容量尽量设置大一些呢？或者干脆换成无界队列<code>LinkedBlockingQueue</code>？</p>\n</blockquote>\n<ol>\n<li>由于队列中的消息数量无法提前预测具体数量，所以无法使设置准确默认值。</li>\n<li>换成<code>LinkedBlockingQueue</code>虽然不会抛出以上错误，但这里会有一个问题：N多待处理任务临时放在JVM中，一方面占用大量内存，另一方面如果服务重启就会导致大量任务丢失。</li>\n</ol>\n<blockquote>\n<p>既然无法从queue容量上去解决，那能否从线程池的拒绝策略着手？</p>\n</blockquote>\n<p>JDK线程池有四种拒绝策略<code>AbortPolicy</code>、<code>CallerRunsPolicy</code>、 <code>DiscardOledestPolicy</code>、<code>DiscardPolicy</code>，默认使用AbortPolicy直接抛出异常。</p>\n<p>其中<code>AbortPolicy</code>，<code>DiscardOledestPolicy</code>、<code>DiscardPolicy</code>均会直接丢弃任务肯定不符合预期，<br><code>CallerRunsPolicy</code>是将该任务抛给主线程执行，这里也会有一个问题，主线程在执行任务时是无法向线程池中提交任务的，<br>假如主线程执行该任务需要3秒，在执行至第1秒的时候，线程池中已经有若干工作线程处于闲置状态，此时主线程需要执行完剩余的2秒才能继续向线程池工作线程分配任务，<br>使用该拒绝策略虽然不会导致消息丢失，但也不能达到资源最优利用，所以pass。</p>\n<p>所以，问题解决方案基本浮出水面，</p>\n<ol>\n<li>主线程只负责分配任务，Worker线程只负责执行任务。</li>\n<li>Worker线程执行完成后第一时间通知主线程，然后主线程及时分配任务。</li>\n</ol>\n<p>这里，我们引入<code>Semaphore</code>作为令牌桶，以达到主线程和工作线程间通信的目的。</p>\n<ol>\n<li>初始化与Worker线程数量相同的令牌</li>\n<li>主线程向线程池提交任务时先尝试从令牌桶获取一个令牌，如果令牌桶为空则block。</li>\n<li>把令牌传入Worker线程，Worker线程执行完后调用<code>release()</code>归还令牌。</li>\n</ol>\n<p>最终代码参见以下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 初始化与Worker线程数量相同的令牌 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Semaphore permits = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建线程池</span></span><br><span class=\"line\"><span class=\"comment\">     * corePoolSize 10</span></span><br><span class=\"line\"><span class=\"comment\">     * maximumPoolSize 10</span></span><br><span class=\"line\"><span class=\"comment\">     * queue capacity 10</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    ThreadPoolExecutor threadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">        <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">60</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">10</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取令牌，如果获取不到则block，直到有worker线程归还</span></span><br><span class=\"line\">        permits.acquire();</span><br><span class=\"line\">        <span class=\"comment\">// 提交任务</span></span><br><span class=\"line\">        threadPoolExecutor.submit(<span class=\"keyword\">new</span> WorkerThread(permits));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Semaphore permits;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerThread</span><span class=\"params\">(Semaphore permits)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.permits = permits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date() + <span class=\"string\">\" \"</span> + Thread.currentThread().getName() + <span class=\"string\">\" is running...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (permits != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 释放令牌</span></span><br><span class=\"line\">                permits.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>或者使用更为简洁的<code>Executors</code>框架，上面的代码会变成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Worker任务线程池 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Executor taskPool = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 初始化与Worker线程数量相同的令牌 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Semaphore permits = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exec</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取令牌，如果获取不到则block，直到有worker线程归还</span></span><br><span class=\"line\">        permits.acquire();</span><br><span class=\"line\">        taskPool.execute(<span class=\"keyword\">new</span> WorkerThread(permits));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务线程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Semaphore permits;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WorkerThread</span><span class=\"params\">(Semaphore permits)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.permits = permits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// do sth</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (permits != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 释放令牌</span></span><br><span class=\"line\">                permits.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"集群架构中的异步回调模型实现","date":"2018-05-06T15:40:47.000Z","_content":"\n\n团队中前些天遇到这样一个问题，比较有意思也比较典型，我给出方案后团队成员实施出来，最终问题得以解决。\n> 一个智能终端连接到Netty服务保持会话，在异步完成某项操作后回调回来需要通过会话通知终端，终端再根据通知做相应业务处理，\n> 在部署单节点的情况下是OK的，但是系统整体由于要做HA，部署多节点后就会出现问题: **并不能保证该回调请求一定负载到终端保持会话的节点**。\n\n如何解决这个问题？这里跟大家分享一种类似场景的通用解决方案，以下是流程图：\n\n\n```\n\n                            < Async Callback Model in Cluster Architecture >\n\n                                              (D) Broadcast to all nodes\n                              +-----------------------------------------------------------------------+\n                              v                                                                       |\n                          + - - - - - - - - - +\n                          ' Cluster:          '\n                          '                   '\n+--------+  (A) Connect   ' +---------------+ '  (B) Async call   +---------------+  (C) Callback   +----+\n|        | -------------> ' | Server Node A | ' ----------------> |               | --------------> |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                '                   '                   |               |                 |    |\n|        |                + - - - - - - - - - +                   |               |                 |    |\n|        |  (E) Notify        :                                   |               |                 |    |\n|        | <...................                                   |               |                 |    |\n|        |                                                        |               |                 |    |\n| Client |                + - - - - - - - - - +                   | Remote Server |                 | MQ |\n|        |                '                   '                   |               |                 |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                ' | Server Node B | '                   |               |                 |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                ' | Server Node C | '                   |               |                 |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                '                   '                   |               |                 |    |\n+--------+                + - - - - - - - - - +                   +---------------+                 +----+\n```\n\n<!-- more -->\n\n\n- (A) 客户端向`Server Node A`发起请求并保持会话。\n- (B) 异步向`Remote Server`发起请求处理业务。\n- (C) `Remote Server`处理完成后回调将消息放入消息队列。\n- (D) MQ将回调消息以**广播形式**广播到集群各个节点。\n- (E) 各节点收到广播消息后，能取到对应客户端会话则处理，否则丢弃消息。\n\n\n注：本案例中的客户端是以TCP连接至服务端，在HTTP服务中如果处理类似场景可以使用Java8中的`CompletableFuture`来实现。\n\n","source":"_posts/2018/05/06/async-callback-model-in-cluster-architecture.md","raw":"---\ntitle: 集群架构中的异步回调模型实现\ndate: 2018-05-06 23:40:47\ncategories: 架构\ntags:\n    - 架构\n    - 集群\n    - 异步\n    - 回调\n    - Netty\n---\n\n\n团队中前些天遇到这样一个问题，比较有意思也比较典型，我给出方案后团队成员实施出来，最终问题得以解决。\n> 一个智能终端连接到Netty服务保持会话，在异步完成某项操作后回调回来需要通过会话通知终端，终端再根据通知做相应业务处理，\n> 在部署单节点的情况下是OK的，但是系统整体由于要做HA，部署多节点后就会出现问题: **并不能保证该回调请求一定负载到终端保持会话的节点**。\n\n如何解决这个问题？这里跟大家分享一种类似场景的通用解决方案，以下是流程图：\n\n\n```\n\n                            < Async Callback Model in Cluster Architecture >\n\n                                              (D) Broadcast to all nodes\n                              +-----------------------------------------------------------------------+\n                              v                                                                       |\n                          + - - - - - - - - - +\n                          ' Cluster:          '\n                          '                   '\n+--------+  (A) Connect   ' +---------------+ '  (B) Async call   +---------------+  (C) Callback   +----+\n|        | -------------> ' | Server Node A | ' ----------------> |               | --------------> |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                '                   '                   |               |                 |    |\n|        |                + - - - - - - - - - +                   |               |                 |    |\n|        |  (E) Notify        :                                   |               |                 |    |\n|        | <...................                                   |               |                 |    |\n|        |                                                        |               |                 |    |\n| Client |                + - - - - - - - - - +                   | Remote Server |                 | MQ |\n|        |                '                   '                   |               |                 |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                ' | Server Node B | '                   |               |                 |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                ' | Server Node C | '                   |               |                 |    |\n|        |                ' +---------------+ '                   |               |                 |    |\n|        |                '                   '                   |               |                 |    |\n+--------+                + - - - - - - - - - +                   +---------------+                 +----+\n```\n\n<!-- more -->\n\n\n- (A) 客户端向`Server Node A`发起请求并保持会话。\n- (B) 异步向`Remote Server`发起请求处理业务。\n- (C) `Remote Server`处理完成后回调将消息放入消息队列。\n- (D) MQ将回调消息以**广播形式**广播到集群各个节点。\n- (E) 各节点收到广播消息后，能取到对应客户端会话则处理，否则丢弃消息。\n\n\n注：本案例中的客户端是以TCP连接至服务端，在HTTP服务中如果处理类似场景可以使用Java8中的`CompletableFuture`来实现。\n\n","slug":"async-callback-model-in-cluster-architecture","published":1,"updated":"2018-05-09T18:02:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2q00272zs6lsxu5o43","content":"<p>团队中前些天遇到这样一个问题，比较有意思也比较典型，我给出方案后团队成员实施出来，最终问题得以解决。</p>\n<blockquote>\n<p>一个智能终端连接到Netty服务保持会话，在异步完成某项操作后回调回来需要通过会话通知终端，终端再根据通知做相应业务处理，<br>在部署单节点的情况下是OK的，但是系统整体由于要做HA，部署多节点后就会出现问题: <strong>并不能保证该回调请求一定负载到终端保持会话的节点</strong>。</p>\n</blockquote>\n<p>如何解决这个问题？这里跟大家分享一种类似场景的通用解决方案，以下是流程图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">                            &lt; Async Callback Model in Cluster Architecture &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                                              (D) Broadcast to all nodes</span><br><span class=\"line\">                              +-----------------------------------------------------------------------+</span><br><span class=\"line\">                              v                                                                       |</span><br><span class=\"line\">                          + - - - - - - - - - +</span><br><span class=\"line\">                          &apos; Cluster:          &apos;</span><br><span class=\"line\">                          &apos;                   &apos;</span><br><span class=\"line\">+--------+  (A) Connect   &apos; +---------------+ &apos;  (B) Async call   +---------------+  (C) Callback   +----+</span><br><span class=\"line\">|        | -------------&gt; &apos; | Server Node A | &apos; ----------------&gt; |               | --------------&gt; |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos;                   &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                + - - - - - - - - - +                   |               |                 |    |</span><br><span class=\"line\">|        |  (E) Notify        :                                   |               |                 |    |</span><br><span class=\"line\">|        | &lt;...................                                   |               |                 |    |</span><br><span class=\"line\">|        |                                                        |               |                 |    |</span><br><span class=\"line\">| Client |                + - - - - - - - - - +                   | Remote Server |                 | MQ |</span><br><span class=\"line\">|        |                &apos;                   &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; | Server Node B | &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; | Server Node C | &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos;                   &apos;                   |               |                 |    |</span><br><span class=\"line\">+--------+                + - - - - - - - - - +                   +---------------+                 +----+</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>(A) 客户端向<code>Server Node A</code>发起请求并保持会话。</li>\n<li>(B) 异步向<code>Remote Server</code>发起请求处理业务。</li>\n<li>(C) <code>Remote Server</code>处理完成后回调将消息放入消息队列。</li>\n<li>(D) MQ将回调消息以<strong>广播形式</strong>广播到集群各个节点。</li>\n<li>(E) 各节点收到广播消息后，能取到对应客户端会话则处理，否则丢弃消息。</li>\n</ul>\n<p>注：本案例中的客户端是以TCP连接至服务端，在HTTP服务中如果处理类似场景可以使用Java8中的<code>CompletableFuture</code>来实现。</p>\n","site":{"data":{}},"excerpt":"<p>团队中前些天遇到这样一个问题，比较有意思也比较典型，我给出方案后团队成员实施出来，最终问题得以解决。</p>\n<blockquote>\n<p>一个智能终端连接到Netty服务保持会话，在异步完成某项操作后回调回来需要通过会话通知终端，终端再根据通知做相应业务处理，<br>在部署单节点的情况下是OK的，但是系统整体由于要做HA，部署多节点后就会出现问题: <strong>并不能保证该回调请求一定负载到终端保持会话的节点</strong>。</p>\n</blockquote>\n<p>如何解决这个问题？这里跟大家分享一种类似场景的通用解决方案，以下是流程图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">                            &lt; Async Callback Model in Cluster Architecture &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">                                              (D) Broadcast to all nodes</span><br><span class=\"line\">                              +-----------------------------------------------------------------------+</span><br><span class=\"line\">                              v                                                                       |</span><br><span class=\"line\">                          + - - - - - - - - - +</span><br><span class=\"line\">                          &apos; Cluster:          &apos;</span><br><span class=\"line\">                          &apos;                   &apos;</span><br><span class=\"line\">+--------+  (A) Connect   &apos; +---------------+ &apos;  (B) Async call   +---------------+  (C) Callback   +----+</span><br><span class=\"line\">|        | -------------&gt; &apos; | Server Node A | &apos; ----------------&gt; |               | --------------&gt; |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos;                   &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                + - - - - - - - - - +                   |               |                 |    |</span><br><span class=\"line\">|        |  (E) Notify        :                                   |               |                 |    |</span><br><span class=\"line\">|        | &lt;...................                                   |               |                 |    |</span><br><span class=\"line\">|        |                                                        |               |                 |    |</span><br><span class=\"line\">| Client |                + - - - - - - - - - +                   | Remote Server |                 | MQ |</span><br><span class=\"line\">|        |                &apos;                   &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; | Server Node B | &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; | Server Node C | &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos; +---------------+ &apos;                   |               |                 |    |</span><br><span class=\"line\">|        |                &apos;                   &apos;                   |               |                 |    |</span><br><span class=\"line\">+--------+                + - - - - - - - - - +                   +---------------+                 +----+</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>(A) 客户端向<code>Server Node A</code>发起请求并保持会话。</li>\n<li>(B) 异步向<code>Remote Server</code>发起请求处理业务。</li>\n<li>(C) <code>Remote Server</code>处理完成后回调将消息放入消息队列。</li>\n<li>(D) MQ将回调消息以<strong>广播形式</strong>广播到集群各个节点。</li>\n<li>(E) 各节点收到广播消息后，能取到对应客户端会话则处理，否则丢弃消息。</li>\n</ul>\n<p>注：本案例中的客户端是以TCP连接至服务端，在HTTP服务中如果处理类似场景可以使用Java8中的<code>CompletableFuture</code>来实现。</p>"},{"title":"使用Python十行代码打造简单爬虫","date":"2018-05-05T13:12:00.000Z","_content":"\n![python](/images/post/2018/05/05/python_logo.jpg)\n\n\n今天从[某网站](http://docs.huihoo.com/javaone/2015/)上看到一些文档觉得还不错， 一共有300+篇，一个个手动下载？这简直是对一个程序员的侮辱。\n\n怎么办呢，写个简单的爬虫吧。\n\n`BeautifulSoup`是做爬虫的好手，`requests`是HTTP访问的强者，这里的Demo场景比较简单略显大材小用，\n\n有效代码不超十行，十分简洁优雅，人生苦短，我用Python。\n\n<!-- more -->\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n# author: HunterZhao\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n'''\n解析网页内容并下载文件\n'''\ndef parse_and_download():\n    url = 'http://docs.huihoo.com/javaone/2015/'\n    r = requests.get(url)\n\n    if r.status_code == requests.codes.ok:\n        # 解析网页内容\n        soup = BeautifulSoup(r.text)\n        # 获取到所有<a>标签\n        for e in soup.select('a'):\n            # 获取到href属性，即文件名\n            file_name = e['href']\n            # 忽略返回上层的链接\n            if file_name == '../':\n                continue\n\n            # 读取文件\n            file_req = requests.get(url + file_name)\n            # 写出文件\n            with open('/Users/hunterzhao/PycharmProjects/files/' + file_name, 'wb') as f:\n                f.write(file_req.content)\n            print(file_name + ' has been downloaded.')\n\n    print('============= ALL DONE. ===============')\n\n\nif __name__ == '__main__':\n    parse_and_download()\n\n```\n\n\n\n\n","source":"_posts/2018/05/05/parse_web_content_and_download_files_using_python.md","raw":"---\ntitle: 使用Python十行代码打造简单爬虫\ndate: 2018-05-05 21:12:00\ncategories: Python\ntags:\n    - 爬虫\n    - Python\n---\n\n![python](/images/post/2018/05/05/python_logo.jpg)\n\n\n今天从[某网站](http://docs.huihoo.com/javaone/2015/)上看到一些文档觉得还不错， 一共有300+篇，一个个手动下载？这简直是对一个程序员的侮辱。\n\n怎么办呢，写个简单的爬虫吧。\n\n`BeautifulSoup`是做爬虫的好手，`requests`是HTTP访问的强者，这里的Demo场景比较简单略显大材小用，\n\n有效代码不超十行，十分简洁优雅，人生苦短，我用Python。\n\n<!-- more -->\n\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n# author: HunterZhao\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n'''\n解析网页内容并下载文件\n'''\ndef parse_and_download():\n    url = 'http://docs.huihoo.com/javaone/2015/'\n    r = requests.get(url)\n\n    if r.status_code == requests.codes.ok:\n        # 解析网页内容\n        soup = BeautifulSoup(r.text)\n        # 获取到所有<a>标签\n        for e in soup.select('a'):\n            # 获取到href属性，即文件名\n            file_name = e['href']\n            # 忽略返回上层的链接\n            if file_name == '../':\n                continue\n\n            # 读取文件\n            file_req = requests.get(url + file_name)\n            # 写出文件\n            with open('/Users/hunterzhao/PycharmProjects/files/' + file_name, 'wb') as f:\n                f.write(file_req.content)\n            print(file_name + ' has been downloaded.')\n\n    print('============= ALL DONE. ===============')\n\n\nif __name__ == '__main__':\n    parse_and_download()\n\n```\n\n\n\n\n","slug":"parse_web_content_and_download_files_using_python","published":1,"updated":"2018-05-23T17:18:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2s00292zs67an2q6hd","content":"<p><img src=\"/images/post/2018/05/05/python_logo.jpg\" alt=\"python\"></p>\n<p>今天从<a href=\"http://docs.huihoo.com/javaone/2015/\" target=\"_blank\" rel=\"noopener\">某网站</a>上看到一些文档觉得还不错， 一共有300+篇，一个个手动下载？这简直是对一个程序员的侮辱。</p>\n<p>怎么办呢，写个简单的爬虫吧。</p>\n<p><code>BeautifulSoup</code>是做爬虫的好手，<code>requests</code>是HTTP访问的强者，这里的Demo场景比较简单略显大材小用，</p>\n<p>有效代码不超十行，十分简洁优雅，人生苦短，我用Python。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># author: HunterZhao</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">解析网页内容并下载文件</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_and_download</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://docs.huihoo.com/javaone/2015/'</span></span><br><span class=\"line\">    r = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> r.status_code == requests.codes.ok:</span><br><span class=\"line\">        <span class=\"comment\"># 解析网页内容</span></span><br><span class=\"line\">        soup = BeautifulSoup(r.text)</span><br><span class=\"line\">        <span class=\"comment\"># 获取到所有&lt;a&gt;标签</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> soup.select(<span class=\"string\">'a'</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 获取到href属性，即文件名</span></span><br><span class=\"line\">            file_name = e[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 忽略返回上层的链接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> file_name == <span class=\"string\">'../'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 读取文件</span></span><br><span class=\"line\">            file_req = requests.get(url + file_name)</span><br><span class=\"line\">            <span class=\"comment\"># 写出文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> open(<span class=\"string\">'/Users/hunterzhao/PycharmProjects/files/'</span> + file_name, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(file_req.content)</span><br><span class=\"line\">            print(file_name + <span class=\"string\">' has been downloaded.'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'============= ALL DONE. ==============='</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    parse_and_download()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/05/05/python_logo.jpg\" alt=\"python\"></p>\n<p>今天从<a href=\"http://docs.huihoo.com/javaone/2015/\" target=\"_blank\" rel=\"noopener\">某网站</a>上看到一些文档觉得还不错， 一共有300+篇，一个个手动下载？这简直是对一个程序员的侮辱。</p>\n<p>怎么办呢，写个简单的爬虫吧。</p>\n<p><code>BeautifulSoup</code>是做爬虫的好手，<code>requests</code>是HTTP访问的强者，这里的Demo场景比较简单略显大材小用，</p>\n<p>有效代码不超十行，十分简洁优雅，人生苦短，我用Python。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># author: HunterZhao</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">解析网页内容并下载文件</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_and_download</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://docs.huihoo.com/javaone/2015/'</span></span><br><span class=\"line\">    r = requests.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> r.status_code == requests.codes.ok:</span><br><span class=\"line\">        <span class=\"comment\"># 解析网页内容</span></span><br><span class=\"line\">        soup = BeautifulSoup(r.text)</span><br><span class=\"line\">        <span class=\"comment\"># 获取到所有&lt;a&gt;标签</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> soup.select(<span class=\"string\">'a'</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 获取到href属性，即文件名</span></span><br><span class=\"line\">            file_name = e[<span class=\"string\">'href'</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 忽略返回上层的链接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> file_name == <span class=\"string\">'../'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 读取文件</span></span><br><span class=\"line\">            file_req = requests.get(url + file_name)</span><br><span class=\"line\">            <span class=\"comment\"># 写出文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> open(<span class=\"string\">'/Users/hunterzhao/PycharmProjects/files/'</span> + file_name, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(file_req.content)</span><br><span class=\"line\">            print(file_name + <span class=\"string\">' has been downloaded.'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'============= ALL DONE. ==============='</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    parse_and_download()</span><br></pre></td></tr></table></figure>"},{"title":"【JVM源码探秘】细说Class.forName()底层实现","date":"2018-05-15T11:30:00.000Z","_content":"\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\nJVM允许在运行时动态装载类，这为开发者提供了极大方便，使用`Class.forName(\"com.xxx.Xxx\")`，\n装载完成后可以通过调用其`newInstance()`完成对象的创建，然后便可以正常操作该类。\n\n接下来我们就细说说Class.forName()在JVM层面所做的事情。\n\n<!-- more -->\n\n# java.lang.Class\n```java\n    public static Class<?> forName(String className)\n                throws ClassNotFoundException {\n        Class<?> caller = Reflection.getCallerClass();\n        return forName0(className, true, ClassLoader.getClassLoader(caller), caller);\n    }\n```\n\n这里调用了native方法forName0()\n```java\n/** Called after security check for system loader access checks have been made. */\n    private static native Class<?> forName0(String name, boolean initialize,\n                                            ClassLoader loader,\n                                            Class<?> caller)\n       throws ClassNotFoundException;\n```\n\n# Class.c # Java_java_lang_Class_forName0()\n源码实现位于src/java.base/share/native/libjava/Class.c\n```c\n// 动态装载类型入口\nJNIEXPORT jclass JNICALL\nJava_java_lang_Class_forName0(JNIEnv *env, jclass this, jstring classname,\n                              jboolean initialize, jobject loader, jclass caller)\n{\n    char *clname;\n    jclass cls = 0;\n    char buf[128];\n    jsize len;\n    jsize unicode_len;\n\n    if (classname == NULL) {\n        JNU_ThrowNullPointerException(env, 0);\n        return 0;\n    }\n\n    // 把类全限定名里的'.'翻译成'/'\n    if (VerifyFixClassname(clname) == JNI_TRUE) {\n        /* slashes present in clname, use name b4 translation for exception */\n        (*env)->GetStringUTFRegion(env, classname, 0, unicode_len, clname);\n        JNU_ThrowClassNotFoundException(env, clname);\n        goto done;\n    }\n\n    // 验证类全限定名名合法性（是否以'/'分隔）\n    if (!VerifyClassname(clname, JNI_TRUE)) {  /* expects slashed name */\n        JNU_ThrowClassNotFoundException(env, clname);\n        goto done;\n    }\n\n    // 从指定的加载器查找该类\n    cls = JVM_FindClassFromCaller(env, clname, initialize, loader, caller);\n\n done:\n    if (clname != buf) {\n        free(clname);\n    }\n    return cls;\n}\n```\n\n\n# jvm.cpp # JVM_FindClassFromCaller()\n`JVM_FindClassFromCaller`方法位于`src/hotspot/share/prims/jvm.cpp`\n```c\n// 从指定的加载器查找该类\n// Find a class with this name in this loader, using the caller's protection domain.\nJVM_ENTRY(jclass, JVM_FindClassFromCaller(JNIEnv* env, const char* name,\n                                          jboolean init, jobject loader,\n                                          jclass caller))\n\n  // 把当前类加入符号表（一个哈希表实现）\n  TempNewSymbol h_name = SymbolTable::new_symbol(name, CHECK_NULL);\n\n  // 获取加载器和调用类\n  oop loader_oop = JNIHandles::resolve(loader);\n  oop from_class = JNIHandles::resolve(caller);\n  oop protection_domain = NULL;\n\n  if (from_class != NULL && loader_oop != NULL) {\n    protection_domain = java_lang_Class::as_Klass(from_class)->protection_domain();\n  }\n  \n  // 查找该类\n  jclass result = find_class_from_class_loader(env, h_name, init, h_loader,\n                                               h_prot, false, THREAD);\n\n  // 返回结果\n  return result;\nJVM_END\n\n```\n\n# symbolTable.cpp # lookup()\n把当前类加入符号表，实现`src/hotspot/share/classfile/symbolTable.cpp`\n```c\n  // Symbol creation\n  static Symbol* new_symbol(const char* utf8_buffer, int length, TRAPS) {\n    assert(utf8_buffer != NULL, \"just checking\");\n    return lookup(utf8_buffer, length, THREAD);\n  }\n  \n  \n  Symbol* SymbolTable::lookup(const char* name, int len, TRAPS) {\n    unsigned int hashValue = hash_symbol(name, len);\n    int index = the_table()->hash_to_index(hashValue);\n  \n    Symbol* s = the_table()->lookup(index, name, len, hashValue);\n  \n    // 找到则直接返回\n    // Found\n    if (s != NULL) return s;\n  \n    // 先获取SymbolTable_lock\n    MutexLocker ml(SymbolTable_lock, THREAD);\n  \n    // 然后把该类加入符号表\n    return the_table()->basic_add(index, (u1*)name, len, hashValue, true, THREAD);\n  }\n```\n\n# jvm.cpp # find_class_from_class_loader()\n加入符号表后紧接着在指定的classloader中查找该类，`/src/hotspot/share/prims/jvm.cpp`\n```c\n// Shared JNI/JVM entry points //////////////////////////////////////////////////////////////\n// 从指定的classloader中查找类\njclass find_class_from_class_loader(JNIEnv* env, Symbol* name, jboolean init,\n                                    Handle loader, Handle protection_domain,\n                                    jboolean throwError, TRAPS) {\n\n  //==========================================\n  //\n  // 根据指定的类名和加载器返回一个Klass对象，必要情况下需要加载该类。\n  // 如果未找到该类则抛出NoClassDefFoundError或ClassNotFoundException\n  //\n  //=========================================\n  Klass* klass = SystemDictionary::resolve_or_fail(name, loader, protection_domain, throwError != 0, CHECK_NULL);\n\n  // Check if we should initialize the class\n  if (init && klass->is_instance_klass()) {\n    klass->initialize(CHECK_NULL);\n  }\n  return (jclass) JNIHandles::make_local(env, klass->java_mirror());\n}\n```\n\n# systemDictionary.cpp # resolve_or_fail()\n方法`SystemDictionary::resolve_or_fail()`位于`src/hotspot/share/classfile/systemDictionary.cpp`\n```c\n// Forwards to resolve_or_null\n\nKlass* SystemDictionary::resolve_or_fail(Symbol* class_name, Handle class_loader, Handle protection_domain, bool throw_error, TRAPS) {\n  Klass* klass = resolve_or_null(class_name, class_loader, protection_domain, THREAD);\n  if (HAS_PENDING_EXCEPTION || klass == NULL) {\n    // can return a null klass\n    klass = handle_resolution_exception(class_name, throw_error, klass, THREAD);\n  }\n  return klass;\n}\n```\n\n# systemDictionary.cpp # resolve_or_null()\n```c\n// Forwards to resolve_instance_class_or_null\n\nKlass* SystemDictionary::resolve_or_null(Symbol* class_name, Handle class_loader, Handle protection_domain, TRAPS) {\n  \n  if (FieldType::is_array(class_name)) {\n    return resolve_array_class_or_null(class_name, class_loader, protection_domain, THREAD);\n  } else if (FieldType::is_obj(class_name)) {\n    ResourceMark rm(THREAD);\n    // Ignore wrapping L and ;.\n    TempNewSymbol name = SymbolTable::new_symbol(class_name->as_C_string() + 1,\n                                   class_name->utf8_length() - 2, CHECK_NULL);\n    return resolve_instance_class_or_null(name, class_loader, protection_domain, THREAD);\n  } else {\n    // 解析实例类\n    return resolve_instance_class_or_null(class_name, class_loader, protection_domain, THREAD);\n  }\n}\n```\n# systemDictionary.cpp # resolve_instance_class_or_null()\n\n```c\nKlass* SystemDictionary::resolve_instance_class_or_null(Symbol* name,\n                                                        Handle class_loader,\n                                                        Handle protection_domain,\n                                                        TRAPS) {\n  Handle lockObject = compute_loader_lock_object(class_loader, THREAD);\n  check_loader_lock_contention(lockObject, THREAD);\n  // 获取对象锁\n  ObjectLocker ol(lockObject, THREAD, DoObjectLock);\n\n  {\n    MutexLocker mu(SystemDictionary_lock, THREAD);\n    // 查找类\n    InstanceKlass* check = find_class(d_index, d_hash, name, dictionary);\n    if (check != NULL) {\n      // Klass is already loaded, so just return it\n      class_has_been_loaded = true;\n      k = check;\n    } else {\n      // 查找该类是否在placeholder table中\n      placeholder = placeholders()->get_entry(p_index, p_hash, name, loader_data);\n      if (placeholder && placeholder->super_load_in_progress()) {\n         super_load_in_progress = true;\n         if (placeholder->havesupername() == true) {\n           superclassname = placeholder->supername();\n           havesupername = true;\n         }\n      }\n    }\n  }\n\n  // 如果该类在placeholder table中，则说明类加载进行中\n  if (super_load_in_progress && havesupername==true) {\n    k = handle_parallel_super_load(name,\n                                   superclassname,\n                                   class_loader,\n                                   protection_domain,\n                                   lockObject, THREAD);\n    if (HAS_PENDING_EXCEPTION) {\n      return NULL;\n    }\n    if (k != NULL) {\n      class_has_been_loaded = true;\n    }\n  }\n\n  bool throw_circularity_error = false;\n  if (!class_has_been_loaded) {\n    bool load_instance_added = false;\n\n    if (!class_has_been_loaded) {\n\n      // =====================================\n      //\n      //      执行实例加载动作\n      //\n      // =====================================\n      k = load_instance_class(name, class_loader, THREAD);\n\n      if (!HAS_PENDING_EXCEPTION && k != NULL &&\n        k->class_loader() != class_loader()) {\n\n        check_constraints(d_index, d_hash, k, class_loader, false, THREAD);\n\n        // Need to check for a PENDING_EXCEPTION again; check_constraints\n        // can throw and doesn't use the CHECK macro.\n        if (!HAS_PENDING_EXCEPTION) {\n          { // Grabbing the Compile_lock prevents systemDictionary updates\n            // during compilations.\n            MutexLocker mu(Compile_lock, THREAD);\n            update_dictionary(d_index, d_hash, p_index, p_hash,\n              k, class_loader, THREAD);\n          }\n\n          // 通知JVMTI类加载事件\n          if (JvmtiExport::should_post_class_load()) {\n            Thread *thread = THREAD;\n            assert(thread->is_Java_thread(), \"thread->is_Java_thread()\");\n            JvmtiExport::post_class_load((JavaThread *) thread, k);\n          }\n        }\n      }\n    } // load_instance_class\n  }\n\n  ...\n\n  return k;\n}\n```\n\n# systemDictionary.cpp # load_instance_class()\n```c\n// ===================================================================================\n//\n//              加载实例class，这里有两种方式：\n// ===================================================================================\n//\n// 1、如果classloader为null则说明是加载系统类，使用bootstrap loader\n//    调用方式：直接调用ClassLoader::load_class()加载该类\n//\n// 2、如果classloader不为null则说明是非系统类，使用ext/app/自定义 classloader\n//    调用方式：通过JavaCalls::call_virtual()调用Java方法ClassLoader.loadClass()加载该类\n//\n// ===================================================================================\nInstanceKlass* SystemDictionary::load_instance_class(Symbol* class_name, Handle class_loader, TRAPS) {\n\n  // 使用bootstrap加载器加载\n  if (class_loader.is_null()) {\n\n    // 根据全限定名获取包名\n    // Find the package in the boot loader's package entry table.\n    TempNewSymbol pkg_name = InstanceKlass::package_from_name(class_name, CHECK_NULL);\n    if (pkg_name != NULL) {\n      pkg_entry = loader_data->packages()->lookup_only(pkg_name);\n    }\n\n    InstanceKlass* k = NULL;\n\n    if (k == NULL) {\n      // Use VM class loader\n      PerfTraceTime vmtimer(ClassLoader::perf_sys_classload_time());\n      // =================================================================\n      //\n      //        使用bootstrap loader加载该类\n      //\n      // =================================================================\n      k = ClassLoader::load_class(class_name, search_only_bootloader_append, CHECK_NULL);\n    }\n\n\n    return k;\n  } else {\n    // =======================================================================================\n    //\n    // 使用用户指定的加载器加载该类，调用class_loader的loadClass操作方法，\n    // 最终返回一个标准的InstanceKlass，流程如下\n    //\n    // +-----------+  loadClass()   +---------------+  get_jobject()   +-------------+\n    // | className | -------------> |   JavaValue   | ---------------> |     oop     |\n    // +-----------+                +---------------+                  +-------------+\n    //                                                                       |\n    //                                                                       | as_Klass()\n    //                                                                       v\n    //                               +---------------+  cast()          +-------------+\n    //                               | InstanceKlass | <--------------- |    Klass    |\n    //                               +---------------+                  +-------------+\n    //\n    // =======================================================================================  \n    ResourceMark rm(THREAD);\n\n    assert(THREAD->is_Java_thread(), \"must be a JavaThread\");\n    JavaThread* jt = (JavaThread*) THREAD;\n\n    PerfClassTraceTime vmtimer(ClassLoader::perf_app_classload_time(),\n                               ClassLoader::perf_app_classload_selftime(),\n                               ClassLoader::perf_app_classload_count(),\n                               jt->get_thread_stat()->perf_recursion_counts_addr(),\n                               jt->get_thread_stat()->perf_timers_addr(),\n                               PerfClassTraceTime::CLASS_LOAD);\n\n    Handle s = java_lang_String::create_from_symbol(class_name, CHECK_NULL);\n    // Translate to external class name format, i.e., convert '/' chars to '.'\n    Handle string = java_lang_String::externalize_classname(s, CHECK_NULL);\n\n    JavaValue result(T_OBJECT);\n\n    InstanceKlass* spec_klass = SystemDictionary::ClassLoader_klass();\n\n    // Added MustCallLoadClassInternal in case we discover in the field\n    // a customer that counts on this call\n    if (MustCallLoadClassInternal && has_loadClassInternal()) {\n      JavaCalls::call_special(&result,\n                              class_loader,\n                              spec_klass,\n                              vmSymbols::loadClassInternal_name(),\n                              vmSymbols::string_class_signature(),\n                              string,\n                              CHECK_NULL);\n    } else {\n      // ===============================================================\n      //\n      // 调用ClassLoader.loadClass()方法加载该类，而最终会调用ClassLoader的native方法defineClass1()\n      // 其实现位于ClassLoader.c # Java_java_lang_ClassLoader_defineClass1()\n      //\n      // ===============================================================\n      JavaCalls::call_virtual(&result,\n                              class_loader,\n                              spec_klass,\n                              vmSymbols::loadClass_name(),\n                              vmSymbols::string_class_signature(),\n                              string,\n                              CHECK_NULL);\n    }\n\n    assert(result.get_type() == T_OBJECT, \"just checking\");\n    // 获取oop对象\n    oop obj = (oop) result.get_jobject();\n\n    // 如果不是基本类，则转换成对应的InstanceKlass\n    if ((obj != NULL) && !(java_lang_Class::is_primitive(obj))) {\n      InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(obj));\n      \n      if (class_name == k->name()) {\n        // 返回最终InstanceKlass\n        return k;\n      }\n    }\n    // Class is not found or has the wrong name, return NULL\n    return NULL;\n  }\n}\n```\n\n\n至此，JVM便完成了类型的InstanceKlass实例创建，这里两种加载方式中不管是通过bootstrap loader还是app(or自定义) loader均是\n殊途同归，都会经历class文件的`装载`、`验证`、`准备`、`解析`、`初始化`等操作。具体流程在下一篇文章中详细介绍。\n\n","source":"_posts/2018/05/15/analysis-of-hotspot-java-lang-class-forName.md","raw":"---\ntitle: 【JVM源码探秘】细说Class.forName()底层实现\ndate: 2018-05-15 19:30:00\ncategories: OpenJDK\ntags:\n    - OpenJDK\n    - JVM\n    - HotSpot\n---\n\n![openjdk](/images/post/2018/01/29/openjdk.jpg)\n\nJVM允许在运行时动态装载类，这为开发者提供了极大方便，使用`Class.forName(\"com.xxx.Xxx\")`，\n装载完成后可以通过调用其`newInstance()`完成对象的创建，然后便可以正常操作该类。\n\n接下来我们就细说说Class.forName()在JVM层面所做的事情。\n\n<!-- more -->\n\n# java.lang.Class\n```java\n    public static Class<?> forName(String className)\n                throws ClassNotFoundException {\n        Class<?> caller = Reflection.getCallerClass();\n        return forName0(className, true, ClassLoader.getClassLoader(caller), caller);\n    }\n```\n\n这里调用了native方法forName0()\n```java\n/** Called after security check for system loader access checks have been made. */\n    private static native Class<?> forName0(String name, boolean initialize,\n                                            ClassLoader loader,\n                                            Class<?> caller)\n       throws ClassNotFoundException;\n```\n\n# Class.c # Java_java_lang_Class_forName0()\n源码实现位于src/java.base/share/native/libjava/Class.c\n```c\n// 动态装载类型入口\nJNIEXPORT jclass JNICALL\nJava_java_lang_Class_forName0(JNIEnv *env, jclass this, jstring classname,\n                              jboolean initialize, jobject loader, jclass caller)\n{\n    char *clname;\n    jclass cls = 0;\n    char buf[128];\n    jsize len;\n    jsize unicode_len;\n\n    if (classname == NULL) {\n        JNU_ThrowNullPointerException(env, 0);\n        return 0;\n    }\n\n    // 把类全限定名里的'.'翻译成'/'\n    if (VerifyFixClassname(clname) == JNI_TRUE) {\n        /* slashes present in clname, use name b4 translation for exception */\n        (*env)->GetStringUTFRegion(env, classname, 0, unicode_len, clname);\n        JNU_ThrowClassNotFoundException(env, clname);\n        goto done;\n    }\n\n    // 验证类全限定名名合法性（是否以'/'分隔）\n    if (!VerifyClassname(clname, JNI_TRUE)) {  /* expects slashed name */\n        JNU_ThrowClassNotFoundException(env, clname);\n        goto done;\n    }\n\n    // 从指定的加载器查找该类\n    cls = JVM_FindClassFromCaller(env, clname, initialize, loader, caller);\n\n done:\n    if (clname != buf) {\n        free(clname);\n    }\n    return cls;\n}\n```\n\n\n# jvm.cpp # JVM_FindClassFromCaller()\n`JVM_FindClassFromCaller`方法位于`src/hotspot/share/prims/jvm.cpp`\n```c\n// 从指定的加载器查找该类\n// Find a class with this name in this loader, using the caller's protection domain.\nJVM_ENTRY(jclass, JVM_FindClassFromCaller(JNIEnv* env, const char* name,\n                                          jboolean init, jobject loader,\n                                          jclass caller))\n\n  // 把当前类加入符号表（一个哈希表实现）\n  TempNewSymbol h_name = SymbolTable::new_symbol(name, CHECK_NULL);\n\n  // 获取加载器和调用类\n  oop loader_oop = JNIHandles::resolve(loader);\n  oop from_class = JNIHandles::resolve(caller);\n  oop protection_domain = NULL;\n\n  if (from_class != NULL && loader_oop != NULL) {\n    protection_domain = java_lang_Class::as_Klass(from_class)->protection_domain();\n  }\n  \n  // 查找该类\n  jclass result = find_class_from_class_loader(env, h_name, init, h_loader,\n                                               h_prot, false, THREAD);\n\n  // 返回结果\n  return result;\nJVM_END\n\n```\n\n# symbolTable.cpp # lookup()\n把当前类加入符号表，实现`src/hotspot/share/classfile/symbolTable.cpp`\n```c\n  // Symbol creation\n  static Symbol* new_symbol(const char* utf8_buffer, int length, TRAPS) {\n    assert(utf8_buffer != NULL, \"just checking\");\n    return lookup(utf8_buffer, length, THREAD);\n  }\n  \n  \n  Symbol* SymbolTable::lookup(const char* name, int len, TRAPS) {\n    unsigned int hashValue = hash_symbol(name, len);\n    int index = the_table()->hash_to_index(hashValue);\n  \n    Symbol* s = the_table()->lookup(index, name, len, hashValue);\n  \n    // 找到则直接返回\n    // Found\n    if (s != NULL) return s;\n  \n    // 先获取SymbolTable_lock\n    MutexLocker ml(SymbolTable_lock, THREAD);\n  \n    // 然后把该类加入符号表\n    return the_table()->basic_add(index, (u1*)name, len, hashValue, true, THREAD);\n  }\n```\n\n# jvm.cpp # find_class_from_class_loader()\n加入符号表后紧接着在指定的classloader中查找该类，`/src/hotspot/share/prims/jvm.cpp`\n```c\n// Shared JNI/JVM entry points //////////////////////////////////////////////////////////////\n// 从指定的classloader中查找类\njclass find_class_from_class_loader(JNIEnv* env, Symbol* name, jboolean init,\n                                    Handle loader, Handle protection_domain,\n                                    jboolean throwError, TRAPS) {\n\n  //==========================================\n  //\n  // 根据指定的类名和加载器返回一个Klass对象，必要情况下需要加载该类。\n  // 如果未找到该类则抛出NoClassDefFoundError或ClassNotFoundException\n  //\n  //=========================================\n  Klass* klass = SystemDictionary::resolve_or_fail(name, loader, protection_domain, throwError != 0, CHECK_NULL);\n\n  // Check if we should initialize the class\n  if (init && klass->is_instance_klass()) {\n    klass->initialize(CHECK_NULL);\n  }\n  return (jclass) JNIHandles::make_local(env, klass->java_mirror());\n}\n```\n\n# systemDictionary.cpp # resolve_or_fail()\n方法`SystemDictionary::resolve_or_fail()`位于`src/hotspot/share/classfile/systemDictionary.cpp`\n```c\n// Forwards to resolve_or_null\n\nKlass* SystemDictionary::resolve_or_fail(Symbol* class_name, Handle class_loader, Handle protection_domain, bool throw_error, TRAPS) {\n  Klass* klass = resolve_or_null(class_name, class_loader, protection_domain, THREAD);\n  if (HAS_PENDING_EXCEPTION || klass == NULL) {\n    // can return a null klass\n    klass = handle_resolution_exception(class_name, throw_error, klass, THREAD);\n  }\n  return klass;\n}\n```\n\n# systemDictionary.cpp # resolve_or_null()\n```c\n// Forwards to resolve_instance_class_or_null\n\nKlass* SystemDictionary::resolve_or_null(Symbol* class_name, Handle class_loader, Handle protection_domain, TRAPS) {\n  \n  if (FieldType::is_array(class_name)) {\n    return resolve_array_class_or_null(class_name, class_loader, protection_domain, THREAD);\n  } else if (FieldType::is_obj(class_name)) {\n    ResourceMark rm(THREAD);\n    // Ignore wrapping L and ;.\n    TempNewSymbol name = SymbolTable::new_symbol(class_name->as_C_string() + 1,\n                                   class_name->utf8_length() - 2, CHECK_NULL);\n    return resolve_instance_class_or_null(name, class_loader, protection_domain, THREAD);\n  } else {\n    // 解析实例类\n    return resolve_instance_class_or_null(class_name, class_loader, protection_domain, THREAD);\n  }\n}\n```\n# systemDictionary.cpp # resolve_instance_class_or_null()\n\n```c\nKlass* SystemDictionary::resolve_instance_class_or_null(Symbol* name,\n                                                        Handle class_loader,\n                                                        Handle protection_domain,\n                                                        TRAPS) {\n  Handle lockObject = compute_loader_lock_object(class_loader, THREAD);\n  check_loader_lock_contention(lockObject, THREAD);\n  // 获取对象锁\n  ObjectLocker ol(lockObject, THREAD, DoObjectLock);\n\n  {\n    MutexLocker mu(SystemDictionary_lock, THREAD);\n    // 查找类\n    InstanceKlass* check = find_class(d_index, d_hash, name, dictionary);\n    if (check != NULL) {\n      // Klass is already loaded, so just return it\n      class_has_been_loaded = true;\n      k = check;\n    } else {\n      // 查找该类是否在placeholder table中\n      placeholder = placeholders()->get_entry(p_index, p_hash, name, loader_data);\n      if (placeholder && placeholder->super_load_in_progress()) {\n         super_load_in_progress = true;\n         if (placeholder->havesupername() == true) {\n           superclassname = placeholder->supername();\n           havesupername = true;\n         }\n      }\n    }\n  }\n\n  // 如果该类在placeholder table中，则说明类加载进行中\n  if (super_load_in_progress && havesupername==true) {\n    k = handle_parallel_super_load(name,\n                                   superclassname,\n                                   class_loader,\n                                   protection_domain,\n                                   lockObject, THREAD);\n    if (HAS_PENDING_EXCEPTION) {\n      return NULL;\n    }\n    if (k != NULL) {\n      class_has_been_loaded = true;\n    }\n  }\n\n  bool throw_circularity_error = false;\n  if (!class_has_been_loaded) {\n    bool load_instance_added = false;\n\n    if (!class_has_been_loaded) {\n\n      // =====================================\n      //\n      //      执行实例加载动作\n      //\n      // =====================================\n      k = load_instance_class(name, class_loader, THREAD);\n\n      if (!HAS_PENDING_EXCEPTION && k != NULL &&\n        k->class_loader() != class_loader()) {\n\n        check_constraints(d_index, d_hash, k, class_loader, false, THREAD);\n\n        // Need to check for a PENDING_EXCEPTION again; check_constraints\n        // can throw and doesn't use the CHECK macro.\n        if (!HAS_PENDING_EXCEPTION) {\n          { // Grabbing the Compile_lock prevents systemDictionary updates\n            // during compilations.\n            MutexLocker mu(Compile_lock, THREAD);\n            update_dictionary(d_index, d_hash, p_index, p_hash,\n              k, class_loader, THREAD);\n          }\n\n          // 通知JVMTI类加载事件\n          if (JvmtiExport::should_post_class_load()) {\n            Thread *thread = THREAD;\n            assert(thread->is_Java_thread(), \"thread->is_Java_thread()\");\n            JvmtiExport::post_class_load((JavaThread *) thread, k);\n          }\n        }\n      }\n    } // load_instance_class\n  }\n\n  ...\n\n  return k;\n}\n```\n\n# systemDictionary.cpp # load_instance_class()\n```c\n// ===================================================================================\n//\n//              加载实例class，这里有两种方式：\n// ===================================================================================\n//\n// 1、如果classloader为null则说明是加载系统类，使用bootstrap loader\n//    调用方式：直接调用ClassLoader::load_class()加载该类\n//\n// 2、如果classloader不为null则说明是非系统类，使用ext/app/自定义 classloader\n//    调用方式：通过JavaCalls::call_virtual()调用Java方法ClassLoader.loadClass()加载该类\n//\n// ===================================================================================\nInstanceKlass* SystemDictionary::load_instance_class(Symbol* class_name, Handle class_loader, TRAPS) {\n\n  // 使用bootstrap加载器加载\n  if (class_loader.is_null()) {\n\n    // 根据全限定名获取包名\n    // Find the package in the boot loader's package entry table.\n    TempNewSymbol pkg_name = InstanceKlass::package_from_name(class_name, CHECK_NULL);\n    if (pkg_name != NULL) {\n      pkg_entry = loader_data->packages()->lookup_only(pkg_name);\n    }\n\n    InstanceKlass* k = NULL;\n\n    if (k == NULL) {\n      // Use VM class loader\n      PerfTraceTime vmtimer(ClassLoader::perf_sys_classload_time());\n      // =================================================================\n      //\n      //        使用bootstrap loader加载该类\n      //\n      // =================================================================\n      k = ClassLoader::load_class(class_name, search_only_bootloader_append, CHECK_NULL);\n    }\n\n\n    return k;\n  } else {\n    // =======================================================================================\n    //\n    // 使用用户指定的加载器加载该类，调用class_loader的loadClass操作方法，\n    // 最终返回一个标准的InstanceKlass，流程如下\n    //\n    // +-----------+  loadClass()   +---------------+  get_jobject()   +-------------+\n    // | className | -------------> |   JavaValue   | ---------------> |     oop     |\n    // +-----------+                +---------------+                  +-------------+\n    //                                                                       |\n    //                                                                       | as_Klass()\n    //                                                                       v\n    //                               +---------------+  cast()          +-------------+\n    //                               | InstanceKlass | <--------------- |    Klass    |\n    //                               +---------------+                  +-------------+\n    //\n    // =======================================================================================  \n    ResourceMark rm(THREAD);\n\n    assert(THREAD->is_Java_thread(), \"must be a JavaThread\");\n    JavaThread* jt = (JavaThread*) THREAD;\n\n    PerfClassTraceTime vmtimer(ClassLoader::perf_app_classload_time(),\n                               ClassLoader::perf_app_classload_selftime(),\n                               ClassLoader::perf_app_classload_count(),\n                               jt->get_thread_stat()->perf_recursion_counts_addr(),\n                               jt->get_thread_stat()->perf_timers_addr(),\n                               PerfClassTraceTime::CLASS_LOAD);\n\n    Handle s = java_lang_String::create_from_symbol(class_name, CHECK_NULL);\n    // Translate to external class name format, i.e., convert '/' chars to '.'\n    Handle string = java_lang_String::externalize_classname(s, CHECK_NULL);\n\n    JavaValue result(T_OBJECT);\n\n    InstanceKlass* spec_klass = SystemDictionary::ClassLoader_klass();\n\n    // Added MustCallLoadClassInternal in case we discover in the field\n    // a customer that counts on this call\n    if (MustCallLoadClassInternal && has_loadClassInternal()) {\n      JavaCalls::call_special(&result,\n                              class_loader,\n                              spec_klass,\n                              vmSymbols::loadClassInternal_name(),\n                              vmSymbols::string_class_signature(),\n                              string,\n                              CHECK_NULL);\n    } else {\n      // ===============================================================\n      //\n      // 调用ClassLoader.loadClass()方法加载该类，而最终会调用ClassLoader的native方法defineClass1()\n      // 其实现位于ClassLoader.c # Java_java_lang_ClassLoader_defineClass1()\n      //\n      // ===============================================================\n      JavaCalls::call_virtual(&result,\n                              class_loader,\n                              spec_klass,\n                              vmSymbols::loadClass_name(),\n                              vmSymbols::string_class_signature(),\n                              string,\n                              CHECK_NULL);\n    }\n\n    assert(result.get_type() == T_OBJECT, \"just checking\");\n    // 获取oop对象\n    oop obj = (oop) result.get_jobject();\n\n    // 如果不是基本类，则转换成对应的InstanceKlass\n    if ((obj != NULL) && !(java_lang_Class::is_primitive(obj))) {\n      InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(obj));\n      \n      if (class_name == k->name()) {\n        // 返回最终InstanceKlass\n        return k;\n      }\n    }\n    // Class is not found or has the wrong name, return NULL\n    return NULL;\n  }\n}\n```\n\n\n至此，JVM便完成了类型的InstanceKlass实例创建，这里两种加载方式中不管是通过bootstrap loader还是app(or自定义) loader均是\n殊途同归，都会经历class文件的`装载`、`验证`、`准备`、`解析`、`初始化`等操作。具体流程在下一篇文章中详细介绍。\n\n","slug":"analysis-of-hotspot-java-lang-class-forName","published":1,"updated":"2018-06-10T08:33:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji8ksa2u002d2zs6yw775kp3","content":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>JVM允许在运行时动态装载类，这为开发者提供了极大方便，使用<code>Class.forName(&quot;com.xxx.Xxx&quot;)</code>，<br>装载完成后可以通过调用其<code>newInstance()</code>完成对象的创建，然后便可以正常操作该类。</p>\n<p>接下来我们就细说说Class.forName()在JVM层面所做的事情。</p>\n<a id=\"more\"></a>\n<h1 id=\"java-lang-Class\"><a href=\"#java-lang-Class\" class=\"headerlink\" title=\"java.lang.Class\"></a>java.lang.Class</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; forName(String className)</span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forName0(className, <span class=\"keyword\">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了native方法forName0()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Called after security check for system loader access checks have been made. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> Class&lt;?&gt; forName0(String name, <span class=\"keyword\">boolean</span> initialize,</span><br><span class=\"line\">                                            ClassLoader loader,</span><br><span class=\"line\">                                            Class&lt;?&gt; caller)</span><br><span class=\"line\">       <span class=\"keyword\">throws</span> ClassNotFoundException;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Class-c-Java-java-lang-Class-forName0\"><a href=\"#Class-c-Java-java-lang-Class-forName0\" class=\"headerlink\" title=\"Class.c # Java_java_lang_Class_forName0()\"></a>Class.c # Java_java_lang_Class_forName0()</h1><p>源码实现位于src/java.base/share/native/libjava/Class.c<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态装载类型入口</span></span><br><span class=\"line\">JNIEXPORT jclass JNICALL</span><br><span class=\"line\">Java_java_lang_Class_forName0(JNIEnv *env, jclass <span class=\"keyword\">this</span>, jstring classname,</span><br><span class=\"line\">                              jboolean initialize, jobject loader, jclass caller)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *clname;</span><br><span class=\"line\">    jclass cls = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">128</span>];</span><br><span class=\"line\">    jsize len;</span><br><span class=\"line\">    jsize unicode_len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classname == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        JNU_ThrowNullPointerException(env, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把类全限定名里的'.'翻译成'/'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VerifyFixClassname(clname) == JNI_TRUE) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* slashes present in clname, use name b4 translation for exception */</span></span><br><span class=\"line\">        (*env)-&gt;GetStringUTFRegion(env, classname, <span class=\"number\">0</span>, unicode_len, clname);</span><br><span class=\"line\">        JNU_ThrowClassNotFoundException(env, clname);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 验证类全限定名名合法性（是否以'/'分隔）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VerifyClassname(clname, JNI_TRUE)) &#123;  <span class=\"comment\">/* expects slashed name */</span></span><br><span class=\"line\">        JNU_ThrowClassNotFoundException(env, clname);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从指定的加载器查找该类</span></span><br><span class=\"line\">    cls = JVM_FindClassFromCaller(env, clname, initialize, loader, caller);</span><br><span class=\"line\"></span><br><span class=\"line\"> done:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clname != buf) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(clname);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jvm-cpp-JVM-FindClassFromCaller\"><a href=\"#jvm-cpp-JVM-FindClassFromCaller\" class=\"headerlink\" title=\"jvm.cpp # JVM_FindClassFromCaller()\"></a>jvm.cpp # JVM_FindClassFromCaller()</h1><p><code>JVM_FindClassFromCaller</code>方法位于<code>src/hotspot/share/prims/jvm.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从指定的加载器查找该类</span></span><br><span class=\"line\"><span class=\"comment\">// Find a class with this name in this loader, using the caller's protection domain.</span></span><br><span class=\"line\">JVM_ENTRY(jclass, JVM_FindClassFromCaller(JNIEnv* env, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,</span><br><span class=\"line\">                                          jboolean init, jobject loader,</span><br><span class=\"line\">                                          jclass caller))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把当前类加入符号表（一个哈希表实现）</span></span><br><span class=\"line\">  TempNewSymbol h_name = SymbolTable::new_symbol(name, CHECK_NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取加载器和调用类</span></span><br><span class=\"line\">  oop loader_oop = JNIHandles::resolve(loader);</span><br><span class=\"line\">  oop from_class = JNIHandles::resolve(caller);</span><br><span class=\"line\">  oop protection_domain = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (from_class != <span class=\"literal\">NULL</span> &amp;&amp; loader_oop != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    protection_domain = java_lang_Class::as_Klass(from_class)-&gt;protection_domain();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 查找该类</span></span><br><span class=\"line\">  jclass result = find_class_from_class_loader(env, h_name, init, h_loader,</span><br><span class=\"line\">                                               h_prot, <span class=\"literal\">false</span>, THREAD);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">JVM_END</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"symbolTable-cpp-lookup\"><a href=\"#symbolTable-cpp-lookup\" class=\"headerlink\" title=\"symbolTable.cpp # lookup()\"></a>symbolTable.cpp # lookup()</h1><p>把当前类加入符号表，实现<code>src/hotspot/share/classfile/symbolTable.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Symbol creation</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Symbol* <span class=\"title\">new_symbol</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* utf8_buffer, <span class=\"keyword\">int</span> length, TRAPS)</span> </span>&#123;</span><br><span class=\"line\">  assert(utf8_buffer != <span class=\"literal\">NULL</span>, <span class=\"string\">\"just checking\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> lookup(utf8_buffer, length, THREAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Symbol* SymbolTable::lookup(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name, <span class=\"keyword\">int</span> len, TRAPS) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hashValue = hash_symbol(name, len);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> index = the_table()-&gt;hash_to_index(hashValue);</span><br><span class=\"line\"></span><br><span class=\"line\">  Symbol* s = the_table()-&gt;lookup(index, name, len, hashValue);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到则直接返回</span></span><br><span class=\"line\">  <span class=\"comment\">// Found</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先获取SymbolTable_lock</span></span><br><span class=\"line\">  <span class=\"function\">MutexLocker <span class=\"title\">ml</span><span class=\"params\">(SymbolTable_lock, THREAD)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 然后把该类加入符号表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> the_table()-&gt;basic_add(index, (u1*)name, len, hashValue, <span class=\"literal\">true</span>, THREAD);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jvm-cpp-find-class-from-class-loader\"><a href=\"#jvm-cpp-find-class-from-class-loader\" class=\"headerlink\" title=\"jvm.cpp # find_class_from_class_loader()\"></a>jvm.cpp # find_class_from_class_loader()</h1><p>加入符号表后紧接着在指定的classloader中查找该类，<code>/src/hotspot/share/prims/jvm.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Shared JNI/JVM entry points //////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// 从指定的classloader中查找类</span></span><br><span class=\"line\"><span class=\"function\">jclass <span class=\"title\">find_class_from_class_loader</span><span class=\"params\">(JNIEnv* env, Symbol* name, jboolean init,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Handle loader, Handle protection_domain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    jboolean throwError, TRAPS)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//==========================================</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 根据指定的类名和加载器返回一个Klass对象，必要情况下需要加载该类。</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果未找到该类则抛出NoClassDefFoundError或ClassNotFoundException</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">//=========================================</span></span><br><span class=\"line\">  Klass* klass = SystemDictionary::resolve_or_fail(name, loader, protection_domain, throwError != <span class=\"number\">0</span>, CHECK_NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Check if we should initialize the class</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (init &amp;&amp; klass-&gt;is_instance_klass()) &#123;</span><br><span class=\"line\">    klass-&gt;initialize(CHECK_NULL);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (jclass) JNIHandles::make_local(env, klass-&gt;java_mirror());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"systemDictionary-cpp-resolve-or-fail\"><a href=\"#systemDictionary-cpp-resolve-or-fail\" class=\"headerlink\" title=\"systemDictionary.cpp # resolve_or_fail()\"></a>systemDictionary.cpp # resolve_or_fail()</h1><p>方法<code>SystemDictionary::resolve_or_fail()</code>位于<code>src/hotspot/share/classfile/systemDictionary.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forwards to resolve_or_null</span></span><br><span class=\"line\"></span><br><span class=\"line\">Klass* SystemDictionary::resolve_or_fail(Symbol* class_name, Handle class_loader, Handle protection_domain, <span class=\"keyword\">bool</span> throw_error, TRAPS) &#123;</span><br><span class=\"line\">  Klass* klass = resolve_or_null(class_name, class_loader, protection_domain, THREAD);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION || klass == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// can return a null klass</span></span><br><span class=\"line\">    klass = handle_resolution_exception(class_name, throw_error, klass, THREAD);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> klass;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"systemDictionary-cpp-resolve-or-null\"><a href=\"#systemDictionary-cpp-resolve-or-null\" class=\"headerlink\" title=\"systemDictionary.cpp # resolve_or_null()\"></a>systemDictionary.cpp # resolve_or_null()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forwards to resolve_instance_class_or_null</span></span><br><span class=\"line\"></span><br><span class=\"line\">Klass* SystemDictionary::resolve_or_null(Symbol* class_name, Handle class_loader, Handle protection_domain, TRAPS) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (FieldType::is_array(class_name)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolve_array_class_or_null(class_name, class_loader, protection_domain, THREAD);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (FieldType::is_obj(class_name)) &#123;</span><br><span class=\"line\">    ResourceMark rm(THREAD);</span><br><span class=\"line\">    <span class=\"comment\">// Ignore wrapping L and ;.</span></span><br><span class=\"line\">    TempNewSymbol name = SymbolTable::new_symbol(class_name-&gt;as_C_string() + <span class=\"number\">1</span>,</span><br><span class=\"line\">                                   class_name-&gt;utf8_length() - <span class=\"number\">2</span>, CHECK_NULL);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolve_instance_class_or_null(name, class_loader, protection_domain, THREAD);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析实例类</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolve_instance_class_or_null(class_name, class_loader, protection_domain, THREAD);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"systemDictionary-cpp-resolve-instance-class-or-null\"><a href=\"#systemDictionary-cpp-resolve-instance-class-or-null\" class=\"headerlink\" title=\"systemDictionary.cpp # resolve_instance_class_or_null()\"></a>systemDictionary.cpp # resolve_instance_class_or_null()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Klass* SystemDictionary::resolve_instance_class_or_null(Symbol* name,</span><br><span class=\"line\">                                                        Handle class_loader,</span><br><span class=\"line\">                                                        Handle protection_domain,</span><br><span class=\"line\">                                                        TRAPS) &#123;</span><br><span class=\"line\">  Handle lockObject = compute_loader_lock_object(class_loader, THREAD);</span><br><span class=\"line\">  check_loader_lock_contention(lockObject, THREAD);</span><br><span class=\"line\">  <span class=\"comment\">// 获取对象锁</span></span><br><span class=\"line\">  <span class=\"function\">ObjectLocker <span class=\"title\">ol</span><span class=\"params\">(lockObject, THREAD, DoObjectLock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">MutexLocker <span class=\"title\">mu</span><span class=\"params\">(SystemDictionary_lock, THREAD)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 查找类</span></span><br><span class=\"line\">    InstanceKlass* check = find_class(d_index, d_hash, name, dictionary);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Klass is already loaded, so just return it</span></span><br><span class=\"line\">      class_has_been_loaded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      k = check;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 查找该类是否在placeholder table中</span></span><br><span class=\"line\">      placeholder = placeholders()-&gt;get_entry(p_index, p_hash, name, loader_data);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (placeholder &amp;&amp; placeholder-&gt;super_load_in_progress()) &#123;</span><br><span class=\"line\">         super_load_in_progress = <span class=\"literal\">true</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (placeholder-&gt;havesupername() == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">           superclassname = placeholder-&gt;supername();</span><br><span class=\"line\">           havesupername = <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果该类在placeholder table中，则说明类加载进行中</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (super_load_in_progress &amp;&amp; havesupername==<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    k = handle_parallel_super_load(name,</span><br><span class=\"line\">                                   superclassname,</span><br><span class=\"line\">                                   class_loader,</span><br><span class=\"line\">                                   protection_domain,</span><br><span class=\"line\">                                   lockObject, THREAD);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      class_has_been_loaded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> throw_circularity_error = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!class_has_been_loaded) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> load_instance_added = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!class_has_been_loaded) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// =====================================</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">//      执行实例加载动作</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// =====================================</span></span><br><span class=\"line\">      k = load_instance_class(name, class_loader, THREAD);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!HAS_PENDING_EXCEPTION &amp;&amp; k != <span class=\"literal\">NULL</span> &amp;&amp;</span><br><span class=\"line\">        k-&gt;class_loader() != class_loader()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        check_constraints(d_index, d_hash, k, class_loader, <span class=\"literal\">false</span>, THREAD);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Need to check for a PENDING_EXCEPTION again; check_constraints</span></span><br><span class=\"line\">        <span class=\"comment\">// can throw and doesn't use the CHECK macro.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">          &#123; <span class=\"comment\">// Grabbing the Compile_lock prevents systemDictionary updates</span></span><br><span class=\"line\">            <span class=\"comment\">// during compilations.</span></span><br><span class=\"line\">            <span class=\"function\">MutexLocker <span class=\"title\">mu</span><span class=\"params\">(Compile_lock, THREAD)</span></span>;</span><br><span class=\"line\">            update_dictionary(d_index, d_hash, p_index, p_hash,</span><br><span class=\"line\">              k, class_loader, THREAD);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 通知JVMTI类加载事件</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (JvmtiExport::should_post_class_load()) &#123;</span><br><span class=\"line\">            Thread *thread = THREAD;</span><br><span class=\"line\">            assert(thread-&gt;is_Java_thread(), <span class=\"string\">\"thread-&gt;is_Java_thread()\"</span>);</span><br><span class=\"line\">            JvmtiExport::post_class_load((JavaThread *) thread, k);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// load_instance_class</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"systemDictionary-cpp-load-instance-class\"><a href=\"#systemDictionary-cpp-load-instance-class\" class=\"headerlink\" title=\"systemDictionary.cpp # load_instance_class()\"></a>systemDictionary.cpp # load_instance_class()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ===================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//              加载实例class，这里有两种方式：</span></span><br><span class=\"line\"><span class=\"comment\">// ===================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 1、如果classloader为null则说明是加载系统类，使用bootstrap loader</span></span><br><span class=\"line\"><span class=\"comment\">//    调用方式：直接调用ClassLoader::load_class()加载该类</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 2、如果classloader不为null则说明是非系统类，使用ext/app/自定义 classloader</span></span><br><span class=\"line\"><span class=\"comment\">//    调用方式：通过JavaCalls::call_virtual()调用Java方法ClassLoader.loadClass()加载该类</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// ===================================================================================</span></span><br><span class=\"line\">InstanceKlass* SystemDictionary::load_instance_class(Symbol* class_name, Handle class_loader, TRAPS) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用bootstrap加载器加载</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (class_loader.is_null()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据全限定名获取包名</span></span><br><span class=\"line\">    <span class=\"comment\">// Find the package in the boot loader's package entry table.</span></span><br><span class=\"line\">    TempNewSymbol pkg_name = InstanceKlass::package_from_name(class_name, CHECK_NULL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pkg_name != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      pkg_entry = loader_data-&gt;packages()-&gt;lookup_only(pkg_name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    InstanceKlass* k = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Use VM class loader</span></span><br><span class=\"line\">      PerfTraceTime vmtimer(ClassLoader::perf_sys_classload_time());</span><br><span class=\"line\">      <span class=\"comment\">// =================================================================</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">//        使用bootstrap loader加载该类</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// =================================================================</span></span><br><span class=\"line\">      k = ClassLoader::load_class(class_name, search_only_bootloader_append, CHECK_NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// =======================================================================================</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用用户指定的加载器加载该类，调用class_loader的loadClass操作方法，</span></span><br><span class=\"line\">    <span class=\"comment\">// 最终返回一个标准的InstanceKlass，流程如下</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// +-----------+  loadClass()   +---------------+  get_jobject()   +-------------+</span></span><br><span class=\"line\">    <span class=\"comment\">// | className | -------------&gt; |   JavaValue   | ---------------&gt; |     oop     |</span></span><br><span class=\"line\">    <span class=\"comment\">// +-----------+                +---------------+                  +-------------+</span></span><br><span class=\"line\">    <span class=\"comment\">//                                                                       |</span></span><br><span class=\"line\">    <span class=\"comment\">//                                                                       | as_Klass()</span></span><br><span class=\"line\">    <span class=\"comment\">//                                                                       v</span></span><br><span class=\"line\">    <span class=\"comment\">//                               +---------------+  cast()          +-------------+</span></span><br><span class=\"line\">    <span class=\"comment\">//                               | InstanceKlass | &lt;--------------- |    Klass    |</span></span><br><span class=\"line\">    <span class=\"comment\">//                               +---------------+                  +-------------+</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// =======================================================================================  </span></span><br><span class=\"line\">    ResourceMark rm(THREAD);</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(THREAD-&gt;is_Java_thread(), <span class=\"string\">\"must be a JavaThread\"</span>);</span><br><span class=\"line\">    JavaThread* jt = (JavaThread*) THREAD;</span><br><span class=\"line\"></span><br><span class=\"line\">    PerfClassTraceTime vmtimer(ClassLoader::perf_app_classload_time(),</span><br><span class=\"line\">                               ClassLoader::perf_app_classload_selftime(),</span><br><span class=\"line\">                               ClassLoader::perf_app_classload_count(),</span><br><span class=\"line\">                               jt-&gt;get_thread_stat()-&gt;perf_recursion_counts_addr(),</span><br><span class=\"line\">                               jt-&gt;get_thread_stat()-&gt;perf_timers_addr(),</span><br><span class=\"line\">                               PerfClassTraceTime::CLASS_LOAD);</span><br><span class=\"line\"></span><br><span class=\"line\">    Handle s = java_lang_String::create_from_symbol(class_name, CHECK_NULL);</span><br><span class=\"line\">    <span class=\"comment\">// Translate to external class name format, i.e., convert '/' chars to '.'</span></span><br><span class=\"line\">    Handle <span class=\"built_in\">string</span> = java_lang_String::externalize_classname(s, CHECK_NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">JavaValue <span class=\"title\">result</span><span class=\"params\">(T_OBJECT)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    InstanceKlass* spec_klass = SystemDictionary::ClassLoader_klass();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Added MustCallLoadClassInternal in case we discover in the field</span></span><br><span class=\"line\">    <span class=\"comment\">// a customer that counts on this call</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (MustCallLoadClassInternal &amp;&amp; has_loadClassInternal()) &#123;</span><br><span class=\"line\">      JavaCalls::call_special(&amp;result,</span><br><span class=\"line\">                              class_loader,</span><br><span class=\"line\">                              spec_klass,</span><br><span class=\"line\">                              vmSymbols::loadClassInternal_name(),</span><br><span class=\"line\">                              vmSymbols::string_class_signature(),</span><br><span class=\"line\">                              <span class=\"built_in\">string</span>,</span><br><span class=\"line\">                              CHECK_NULL);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ===============================================================</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// 调用ClassLoader.loadClass()方法加载该类，而最终会调用ClassLoader的native方法defineClass1()</span></span><br><span class=\"line\">      <span class=\"comment\">// 其实现位于ClassLoader.c # Java_java_lang_ClassLoader_defineClass1()</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// ===============================================================</span></span><br><span class=\"line\">      JavaCalls::call_virtual(&amp;result,</span><br><span class=\"line\">                              class_loader,</span><br><span class=\"line\">                              spec_klass,</span><br><span class=\"line\">                              vmSymbols::loadClass_name(),</span><br><span class=\"line\">                              vmSymbols::string_class_signature(),</span><br><span class=\"line\">                              <span class=\"built_in\">string</span>,</span><br><span class=\"line\">                              CHECK_NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(result.get_type() == T_OBJECT, <span class=\"string\">\"just checking\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取oop对象</span></span><br><span class=\"line\">    oop obj = (oop) result.get_jobject();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果不是基本类，则转换成对应的InstanceKlass</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((obj != <span class=\"literal\">NULL</span>) &amp;&amp; !(java_lang_Class::is_primitive(obj))) &#123;</span><br><span class=\"line\">      InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(obj));</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (class_name == k-&gt;name()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回最终InstanceKlass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Class is not found or has the wrong name, return NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，JVM便完成了类型的InstanceKlass实例创建，这里两种加载方式中不管是通过bootstrap loader还是app(or自定义) loader均是<br>殊途同归，都会经历class文件的<code>装载</code>、<code>验证</code>、<code>准备</code>、<code>解析</code>、<code>初始化</code>等操作。具体流程在下一篇文章中详细介绍。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/post/2018/01/29/openjdk.jpg\" alt=\"openjdk\"></p>\n<p>JVM允许在运行时动态装载类，这为开发者提供了极大方便，使用<code>Class.forName(&quot;com.xxx.Xxx&quot;)</code>，<br>装载完成后可以通过调用其<code>newInstance()</code>完成对象的创建，然后便可以正常操作该类。</p>\n<p>接下来我们就细说说Class.forName()在JVM层面所做的事情。</p>","more":"<h1 id=\"java-lang-Class\"><a href=\"#java-lang-Class\" class=\"headerlink\" title=\"java.lang.Class\"></a>java.lang.Class</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; forName(String className)</span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forName0(className, <span class=\"keyword\">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了native方法forName0()<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Called after security check for system loader access checks have been made. */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> Class&lt;?&gt; forName0(String name, <span class=\"keyword\">boolean</span> initialize,</span><br><span class=\"line\">                                            ClassLoader loader,</span><br><span class=\"line\">                                            Class&lt;?&gt; caller)</span><br><span class=\"line\">       <span class=\"keyword\">throws</span> ClassNotFoundException;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Class-c-Java-java-lang-Class-forName0\"><a href=\"#Class-c-Java-java-lang-Class-forName0\" class=\"headerlink\" title=\"Class.c # Java_java_lang_Class_forName0()\"></a>Class.c # Java_java_lang_Class_forName0()</h1><p>源码实现位于src/java.base/share/native/libjava/Class.c<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态装载类型入口</span></span><br><span class=\"line\">JNIEXPORT jclass JNICALL</span><br><span class=\"line\">Java_java_lang_Class_forName0(JNIEnv *env, jclass <span class=\"keyword\">this</span>, jstring classname,</span><br><span class=\"line\">                              jboolean initialize, jobject loader, jclass caller)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *clname;</span><br><span class=\"line\">    jclass cls = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">128</span>];</span><br><span class=\"line\">    jsize len;</span><br><span class=\"line\">    jsize unicode_len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (classname == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        JNU_ThrowNullPointerException(env, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把类全限定名里的'.'翻译成'/'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (VerifyFixClassname(clname) == JNI_TRUE) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* slashes present in clname, use name b4 translation for exception */</span></span><br><span class=\"line\">        (*env)-&gt;GetStringUTFRegion(env, classname, <span class=\"number\">0</span>, unicode_len, clname);</span><br><span class=\"line\">        JNU_ThrowClassNotFoundException(env, clname);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 验证类全限定名名合法性（是否以'/'分隔）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VerifyClassname(clname, JNI_TRUE)) &#123;  <span class=\"comment\">/* expects slashed name */</span></span><br><span class=\"line\">        JNU_ThrowClassNotFoundException(env, clname);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从指定的加载器查找该类</span></span><br><span class=\"line\">    cls = JVM_FindClassFromCaller(env, clname, initialize, loader, caller);</span><br><span class=\"line\"></span><br><span class=\"line\"> done:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clname != buf) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(clname);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jvm-cpp-JVM-FindClassFromCaller\"><a href=\"#jvm-cpp-JVM-FindClassFromCaller\" class=\"headerlink\" title=\"jvm.cpp # JVM_FindClassFromCaller()\"></a>jvm.cpp # JVM_FindClassFromCaller()</h1><p><code>JVM_FindClassFromCaller</code>方法位于<code>src/hotspot/share/prims/jvm.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从指定的加载器查找该类</span></span><br><span class=\"line\"><span class=\"comment\">// Find a class with this name in this loader, using the caller's protection domain.</span></span><br><span class=\"line\">JVM_ENTRY(jclass, JVM_FindClassFromCaller(JNIEnv* env, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name,</span><br><span class=\"line\">                                          jboolean init, jobject loader,</span><br><span class=\"line\">                                          jclass caller))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把当前类加入符号表（一个哈希表实现）</span></span><br><span class=\"line\">  TempNewSymbol h_name = SymbolTable::new_symbol(name, CHECK_NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取加载器和调用类</span></span><br><span class=\"line\">  oop loader_oop = JNIHandles::resolve(loader);</span><br><span class=\"line\">  oop from_class = JNIHandles::resolve(caller);</span><br><span class=\"line\">  oop protection_domain = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (from_class != <span class=\"literal\">NULL</span> &amp;&amp; loader_oop != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    protection_domain = java_lang_Class::as_Klass(from_class)-&gt;protection_domain();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 查找该类</span></span><br><span class=\"line\">  jclass result = find_class_from_class_loader(env, h_name, init, h_loader,</span><br><span class=\"line\">                                               h_prot, <span class=\"literal\">false</span>, THREAD);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">JVM_END</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"symbolTable-cpp-lookup\"><a href=\"#symbolTable-cpp-lookup\" class=\"headerlink\" title=\"symbolTable.cpp # lookup()\"></a>symbolTable.cpp # lookup()</h1><p>把当前类加入符号表，实现<code>src/hotspot/share/classfile/symbolTable.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Symbol creation</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Symbol* <span class=\"title\">new_symbol</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* utf8_buffer, <span class=\"keyword\">int</span> length, TRAPS)</span> </span>&#123;</span><br><span class=\"line\">  assert(utf8_buffer != <span class=\"literal\">NULL</span>, <span class=\"string\">\"just checking\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> lookup(utf8_buffer, length, THREAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Symbol* SymbolTable::lookup(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* name, <span class=\"keyword\">int</span> len, TRAPS) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hashValue = hash_symbol(name, len);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> index = the_table()-&gt;hash_to_index(hashValue);</span><br><span class=\"line\"></span><br><span class=\"line\">  Symbol* s = the_table()-&gt;lookup(index, name, len, hashValue);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到则直接返回</span></span><br><span class=\"line\">  <span class=\"comment\">// Found</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先获取SymbolTable_lock</span></span><br><span class=\"line\">  <span class=\"function\">MutexLocker <span class=\"title\">ml</span><span class=\"params\">(SymbolTable_lock, THREAD)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 然后把该类加入符号表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> the_table()-&gt;basic_add(index, (u1*)name, len, hashValue, <span class=\"literal\">true</span>, THREAD);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"jvm-cpp-find-class-from-class-loader\"><a href=\"#jvm-cpp-find-class-from-class-loader\" class=\"headerlink\" title=\"jvm.cpp # find_class_from_class_loader()\"></a>jvm.cpp # find_class_from_class_loader()</h1><p>加入符号表后紧接着在指定的classloader中查找该类，<code>/src/hotspot/share/prims/jvm.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Shared JNI/JVM entry points //////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// 从指定的classloader中查找类</span></span><br><span class=\"line\"><span class=\"function\">jclass <span class=\"title\">find_class_from_class_loader</span><span class=\"params\">(JNIEnv* env, Symbol* name, jboolean init,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Handle loader, Handle protection_domain,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    jboolean throwError, TRAPS)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//==========================================</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 根据指定的类名和加载器返回一个Klass对象，必要情况下需要加载该类。</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果未找到该类则抛出NoClassDefFoundError或ClassNotFoundException</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">//=========================================</span></span><br><span class=\"line\">  Klass* klass = SystemDictionary::resolve_or_fail(name, loader, protection_domain, throwError != <span class=\"number\">0</span>, CHECK_NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Check if we should initialize the class</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (init &amp;&amp; klass-&gt;is_instance_klass()) &#123;</span><br><span class=\"line\">    klass-&gt;initialize(CHECK_NULL);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (jclass) JNIHandles::make_local(env, klass-&gt;java_mirror());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"systemDictionary-cpp-resolve-or-fail\"><a href=\"#systemDictionary-cpp-resolve-or-fail\" class=\"headerlink\" title=\"systemDictionary.cpp # resolve_or_fail()\"></a>systemDictionary.cpp # resolve_or_fail()</h1><p>方法<code>SystemDictionary::resolve_or_fail()</code>位于<code>src/hotspot/share/classfile/systemDictionary.cpp</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forwards to resolve_or_null</span></span><br><span class=\"line\"></span><br><span class=\"line\">Klass* SystemDictionary::resolve_or_fail(Symbol* class_name, Handle class_loader, Handle protection_domain, <span class=\"keyword\">bool</span> throw_error, TRAPS) &#123;</span><br><span class=\"line\">  Klass* klass = resolve_or_null(class_name, class_loader, protection_domain, THREAD);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION || klass == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// can return a null klass</span></span><br><span class=\"line\">    klass = handle_resolution_exception(class_name, throw_error, klass, THREAD);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> klass;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"systemDictionary-cpp-resolve-or-null\"><a href=\"#systemDictionary-cpp-resolve-or-null\" class=\"headerlink\" title=\"systemDictionary.cpp # resolve_or_null()\"></a>systemDictionary.cpp # resolve_or_null()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forwards to resolve_instance_class_or_null</span></span><br><span class=\"line\"></span><br><span class=\"line\">Klass* SystemDictionary::resolve_or_null(Symbol* class_name, Handle class_loader, Handle protection_domain, TRAPS) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (FieldType::is_array(class_name)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolve_array_class_or_null(class_name, class_loader, protection_domain, THREAD);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (FieldType::is_obj(class_name)) &#123;</span><br><span class=\"line\">    ResourceMark rm(THREAD);</span><br><span class=\"line\">    <span class=\"comment\">// Ignore wrapping L and ;.</span></span><br><span class=\"line\">    TempNewSymbol name = SymbolTable::new_symbol(class_name-&gt;as_C_string() + <span class=\"number\">1</span>,</span><br><span class=\"line\">                                   class_name-&gt;utf8_length() - <span class=\"number\">2</span>, CHECK_NULL);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolve_instance_class_or_null(name, class_loader, protection_domain, THREAD);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 解析实例类</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolve_instance_class_or_null(class_name, class_loader, protection_domain, THREAD);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"systemDictionary-cpp-resolve-instance-class-or-null\"><a href=\"#systemDictionary-cpp-resolve-instance-class-or-null\" class=\"headerlink\" title=\"systemDictionary.cpp # resolve_instance_class_or_null()\"></a>systemDictionary.cpp # resolve_instance_class_or_null()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Klass* SystemDictionary::resolve_instance_class_or_null(Symbol* name,</span><br><span class=\"line\">                                                        Handle class_loader,</span><br><span class=\"line\">                                                        Handle protection_domain,</span><br><span class=\"line\">                                                        TRAPS) &#123;</span><br><span class=\"line\">  Handle lockObject = compute_loader_lock_object(class_loader, THREAD);</span><br><span class=\"line\">  check_loader_lock_contention(lockObject, THREAD);</span><br><span class=\"line\">  <span class=\"comment\">// 获取对象锁</span></span><br><span class=\"line\">  <span class=\"function\">ObjectLocker <span class=\"title\">ol</span><span class=\"params\">(lockObject, THREAD, DoObjectLock)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">MutexLocker <span class=\"title\">mu</span><span class=\"params\">(SystemDictionary_lock, THREAD)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 查找类</span></span><br><span class=\"line\">    InstanceKlass* check = find_class(d_index, d_hash, name, dictionary);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (check != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Klass is already loaded, so just return it</span></span><br><span class=\"line\">      class_has_been_loaded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      k = check;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 查找该类是否在placeholder table中</span></span><br><span class=\"line\">      placeholder = placeholders()-&gt;get_entry(p_index, p_hash, name, loader_data);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (placeholder &amp;&amp; placeholder-&gt;super_load_in_progress()) &#123;</span><br><span class=\"line\">         super_load_in_progress = <span class=\"literal\">true</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (placeholder-&gt;havesupername() == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">           superclassname = placeholder-&gt;supername();</span><br><span class=\"line\">           havesupername = <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果该类在placeholder table中，则说明类加载进行中</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (super_load_in_progress &amp;&amp; havesupername==<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    k = handle_parallel_super_load(name,</span><br><span class=\"line\">                                   superclassname,</span><br><span class=\"line\">                                   class_loader,</span><br><span class=\"line\">                                   protection_domain,</span><br><span class=\"line\">                                   lockObject, THREAD);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      class_has_been_loaded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> throw_circularity_error = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!class_has_been_loaded) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> load_instance_added = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!class_has_been_loaded) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// =====================================</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">//      执行实例加载动作</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// =====================================</span></span><br><span class=\"line\">      k = load_instance_class(name, class_loader, THREAD);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!HAS_PENDING_EXCEPTION &amp;&amp; k != <span class=\"literal\">NULL</span> &amp;&amp;</span><br><span class=\"line\">        k-&gt;class_loader() != class_loader()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        check_constraints(d_index, d_hash, k, class_loader, <span class=\"literal\">false</span>, THREAD);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Need to check for a PENDING_EXCEPTION again; check_constraints</span></span><br><span class=\"line\">        <span class=\"comment\">// can throw and doesn't use the CHECK macro.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!HAS_PENDING_EXCEPTION) &#123;</span><br><span class=\"line\">          &#123; <span class=\"comment\">// Grabbing the Compile_lock prevents systemDictionary updates</span></span><br><span class=\"line\">            <span class=\"comment\">// during compilations.</span></span><br><span class=\"line\">            <span class=\"function\">MutexLocker <span class=\"title\">mu</span><span class=\"params\">(Compile_lock, THREAD)</span></span>;</span><br><span class=\"line\">            update_dictionary(d_index, d_hash, p_index, p_hash,</span><br><span class=\"line\">              k, class_loader, THREAD);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 通知JVMTI类加载事件</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (JvmtiExport::should_post_class_load()) &#123;</span><br><span class=\"line\">            Thread *thread = THREAD;</span><br><span class=\"line\">            assert(thread-&gt;is_Java_thread(), <span class=\"string\">\"thread-&gt;is_Java_thread()\"</span>);</span><br><span class=\"line\">            JvmtiExport::post_class_load((JavaThread *) thread, k);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// load_instance_class</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"systemDictionary-cpp-load-instance-class\"><a href=\"#systemDictionary-cpp-load-instance-class\" class=\"headerlink\" title=\"systemDictionary.cpp # load_instance_class()\"></a>systemDictionary.cpp # load_instance_class()</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ===================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//              加载实例class，这里有两种方式：</span></span><br><span class=\"line\"><span class=\"comment\">// ===================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 1、如果classloader为null则说明是加载系统类，使用bootstrap loader</span></span><br><span class=\"line\"><span class=\"comment\">//    调用方式：直接调用ClassLoader::load_class()加载该类</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// 2、如果classloader不为null则说明是非系统类，使用ext/app/自定义 classloader</span></span><br><span class=\"line\"><span class=\"comment\">//    调用方式：通过JavaCalls::call_virtual()调用Java方法ClassLoader.loadClass()加载该类</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// ===================================================================================</span></span><br><span class=\"line\">InstanceKlass* SystemDictionary::load_instance_class(Symbol* class_name, Handle class_loader, TRAPS) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用bootstrap加载器加载</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (class_loader.is_null()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据全限定名获取包名</span></span><br><span class=\"line\">    <span class=\"comment\">// Find the package in the boot loader's package entry table.</span></span><br><span class=\"line\">    TempNewSymbol pkg_name = InstanceKlass::package_from_name(class_name, CHECK_NULL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pkg_name != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      pkg_entry = loader_data-&gt;packages()-&gt;lookup_only(pkg_name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    InstanceKlass* k = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Use VM class loader</span></span><br><span class=\"line\">      PerfTraceTime vmtimer(ClassLoader::perf_sys_classload_time());</span><br><span class=\"line\">      <span class=\"comment\">// =================================================================</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">//        使用bootstrap loader加载该类</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// =================================================================</span></span><br><span class=\"line\">      k = ClassLoader::load_class(class_name, search_only_bootloader_append, CHECK_NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// =======================================================================================</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用用户指定的加载器加载该类，调用class_loader的loadClass操作方法，</span></span><br><span class=\"line\">    <span class=\"comment\">// 最终返回一个标准的InstanceKlass，流程如下</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// +-----------+  loadClass()   +---------------+  get_jobject()   +-------------+</span></span><br><span class=\"line\">    <span class=\"comment\">// | className | -------------&gt; |   JavaValue   | ---------------&gt; |     oop     |</span></span><br><span class=\"line\">    <span class=\"comment\">// +-----------+                +---------------+                  +-------------+</span></span><br><span class=\"line\">    <span class=\"comment\">//                                                                       |</span></span><br><span class=\"line\">    <span class=\"comment\">//                                                                       | as_Klass()</span></span><br><span class=\"line\">    <span class=\"comment\">//                                                                       v</span></span><br><span class=\"line\">    <span class=\"comment\">//                               +---------------+  cast()          +-------------+</span></span><br><span class=\"line\">    <span class=\"comment\">//                               | InstanceKlass | &lt;--------------- |    Klass    |</span></span><br><span class=\"line\">    <span class=\"comment\">//                               +---------------+                  +-------------+</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"comment\">// =======================================================================================  </span></span><br><span class=\"line\">    ResourceMark rm(THREAD);</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(THREAD-&gt;is_Java_thread(), <span class=\"string\">\"must be a JavaThread\"</span>);</span><br><span class=\"line\">    JavaThread* jt = (JavaThread*) THREAD;</span><br><span class=\"line\"></span><br><span class=\"line\">    PerfClassTraceTime vmtimer(ClassLoader::perf_app_classload_time(),</span><br><span class=\"line\">                               ClassLoader::perf_app_classload_selftime(),</span><br><span class=\"line\">                               ClassLoader::perf_app_classload_count(),</span><br><span class=\"line\">                               jt-&gt;get_thread_stat()-&gt;perf_recursion_counts_addr(),</span><br><span class=\"line\">                               jt-&gt;get_thread_stat()-&gt;perf_timers_addr(),</span><br><span class=\"line\">                               PerfClassTraceTime::CLASS_LOAD);</span><br><span class=\"line\"></span><br><span class=\"line\">    Handle s = java_lang_String::create_from_symbol(class_name, CHECK_NULL);</span><br><span class=\"line\">    <span class=\"comment\">// Translate to external class name format, i.e., convert '/' chars to '.'</span></span><br><span class=\"line\">    Handle <span class=\"built_in\">string</span> = java_lang_String::externalize_classname(s, CHECK_NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">JavaValue <span class=\"title\">result</span><span class=\"params\">(T_OBJECT)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    InstanceKlass* spec_klass = SystemDictionary::ClassLoader_klass();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Added MustCallLoadClassInternal in case we discover in the field</span></span><br><span class=\"line\">    <span class=\"comment\">// a customer that counts on this call</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (MustCallLoadClassInternal &amp;&amp; has_loadClassInternal()) &#123;</span><br><span class=\"line\">      JavaCalls::call_special(&amp;result,</span><br><span class=\"line\">                              class_loader,</span><br><span class=\"line\">                              spec_klass,</span><br><span class=\"line\">                              vmSymbols::loadClassInternal_name(),</span><br><span class=\"line\">                              vmSymbols::string_class_signature(),</span><br><span class=\"line\">                              <span class=\"built_in\">string</span>,</span><br><span class=\"line\">                              CHECK_NULL);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ===============================================================</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// 调用ClassLoader.loadClass()方法加载该类，而最终会调用ClassLoader的native方法defineClass1()</span></span><br><span class=\"line\">      <span class=\"comment\">// 其实现位于ClassLoader.c # Java_java_lang_ClassLoader_defineClass1()</span></span><br><span class=\"line\">      <span class=\"comment\">//</span></span><br><span class=\"line\">      <span class=\"comment\">// ===============================================================</span></span><br><span class=\"line\">      JavaCalls::call_virtual(&amp;result,</span><br><span class=\"line\">                              class_loader,</span><br><span class=\"line\">                              spec_klass,</span><br><span class=\"line\">                              vmSymbols::loadClass_name(),</span><br><span class=\"line\">                              vmSymbols::string_class_signature(),</span><br><span class=\"line\">                              <span class=\"built_in\">string</span>,</span><br><span class=\"line\">                              CHECK_NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(result.get_type() == T_OBJECT, <span class=\"string\">\"just checking\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取oop对象</span></span><br><span class=\"line\">    oop obj = (oop) result.get_jobject();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果不是基本类，则转换成对应的InstanceKlass</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((obj != <span class=\"literal\">NULL</span>) &amp;&amp; !(java_lang_Class::is_primitive(obj))) &#123;</span><br><span class=\"line\">      InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(obj));</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (class_name == k-&gt;name()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回最终InstanceKlass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Class is not found or has the wrong name, return NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，JVM便完成了类型的InstanceKlass实例创建，这里两种加载方式中不管是通过bootstrap loader还是app(or自定义) loader均是<br>殊途同归，都会经历class文件的<code>装载</code>、<code>验证</code>、<code>准备</code>、<code>解析</code>、<code>初始化</code>等操作。具体流程在下一篇文章中详细介绍。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cji8ksa1600062zs680jrharn","category_id":"cji8ksa1d00082zs689asb6v4","_id":"cji8ksa1u000h2zs6mex0v6hb"},{"post_id":"cji8ksa1a00072zs6ofh6z0y8","category_id":"cji8ksa1s000d2zs6564e8fkz","_id":"cji8ksa1x000n2zs64evcj5h7"},{"post_id":"cji8ksa1f00092zs6ikmgw8qm","category_id":"cji8ksa1v000i2zs64hc6ys31","_id":"cji8ksa21000t2zs6tte6r9fq"},{"post_id":"cji8ksa1q000b2zs6vtcta56w","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa25000z2zs65ep942dp"},{"post_id":"cji8ksa1r000c2zs6il38gh0g","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2800152zs68tziqg3z"},{"post_id":"cji8ksa1t000e2zs60a0ib9bd","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2a001b2zs6e8nirv4a"},{"post_id":"cji8ksa1u000g2zs6zvwp1z36","category_id":"cji8ksa2800142zs61r0nregq","_id":"cji8ksa2f001h2zs6ramhlwu4"},{"post_id":"cji8ksa2a001c2zs6izg8vypi","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2g001k2zs604jucakq"},{"post_id":"cji8ksa2c001e2zs6dlpbrbmk","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2i001n2zs6434k1mol"},{"post_id":"cji8ksa1v000j2zs6asxh222f","category_id":"cji8ksa2b001d2zs6mzqgqtmh","_id":"cji8ksa2j001r2zs6xehdsf95"},{"post_id":"cji8ksa2e001g2zs61y4oq122","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2l001v2zs6t3ucztug"},{"post_id":"cji8ksa2f001j2zs6xas7gl0f","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2m001z2zs66cmtti1n"},{"post_id":"cji8ksa1x000l2zs6bhgaj43e","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2o00222zs6zneowwe9"},{"post_id":"cji8ksa2h001m2zs6e6lligic","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2p00252zs6lx7wqart"},{"post_id":"cji8ksa2i001q2zs6sifu9bx0","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2r00282zs6uv0tnk6z"},{"post_id":"cji8ksa1y000p2zs6ulwzcgi5","category_id":"cji8ksa2i001p2zs655hrw1dn","_id":"cji8ksa2t002b2zs6y7xbf6e1"},{"post_id":"cji8ksa2k001u2zs6nj4mskt2","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2u002e2zs6iuc7d1r5"},{"post_id":"cji8ksa2l001y2zs6aq19p1og","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2v002h2zs6rexen95x"},{"post_id":"cji8ksa20000s2zs6zxj67il9","category_id":"cji8ksa2l001x2zs65g46api1","_id":"cji8ksa2w002k2zs6muiz65mw"},{"post_id":"cji8ksa2n00212zs6qcubjldn","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2x002n2zs6ipuzvveh"},{"post_id":"cji8ksa21000v2zs6ds80fni1","category_id":"cji8ksa2o00232zs6hqt7s05q","_id":"cji8ksa2x002q2zs6kguyszim"},{"post_id":"cji8ksa2s00292zs67an2q6hd","category_id":"cji8ksa2i001p2zs655hrw1dn","_id":"cji8ksa2y002t2zs64rgss6ax"},{"post_id":"cji8ksa2u002d2zs6yw775kp3","category_id":"cji8ksa1y000o2zs6b0abd93q","_id":"cji8ksa2z002w2zs6kp1uhdto"},{"post_id":"cji8ksa24000x2zs6tli39m3j","category_id":"cji8ksa2o00232zs6hqt7s05q","_id":"cji8ksa2z002y2zs6a4spr0l0"},{"post_id":"cji8ksa2500102zs6zg86wsj3","category_id":"cji8ksa2o00232zs6hqt7s05q","_id":"cji8ksa3000302zs6zaqypt3g"},{"post_id":"cji8ksa2700112zs6kmsshoi0","category_id":"cji8ksa2o00232zs6hqt7s05q","_id":"cji8ksa3000332zs66z56xtv1"},{"post_id":"cji8ksa2800162zs62ajrb3ge","category_id":"cji8ksa2o00232zs6hqt7s05q","_id":"cji8ksa3000352zs6l87c0h1p"},{"post_id":"cji8ksa2900182zs6oqvo90v2","category_id":"cji8ksa2o00232zs6hqt7s05q","_id":"cji8ksa3100382zs6axh0mf1d"},{"post_id":"cji8ksa2o00242zs6bumlgvaf","category_id":"cji8ksa3000322zs6l8m07bos","_id":"cji8ksa32003b2zs68w479ijl"},{"post_id":"cji8ksa2q00272zs6lsxu5o43","category_id":"cji8ksa3100392zs6rfwz692j","_id":"cji8ksa32003e2zs6nyc73lup"}],"PostTag":[{"post_id":"cji8ksa1a00072zs6ofh6z0y8","tag_id":"cji8ksa1q000a2zs6eoeq8q0b","_id":"cji8ksa1x000m2zs6vmftgv87"},{"post_id":"cji8ksa1a00072zs6ofh6z0y8","tag_id":"cji8ksa1t000f2zs6yt23smqq","_id":"cji8ksa1y000q2zs68wpaswmx"},{"post_id":"cji8ksa1f00092zs6ikmgw8qm","tag_id":"cji8ksa1w000k2zs63br31uzl","_id":"cji8ksa2800132zs6bcnchly3"},{"post_id":"cji8ksa1f00092zs6ikmgw8qm","tag_id":"cji8ksa20000r2zs6z987fqru","_id":"cji8ksa2900172zs6thzmz3x0"},{"post_id":"cji8ksa1f00092zs6ikmgw8qm","tag_id":"cji8ksa24000w2zs6e1ax8bpb","_id":"cji8ksa2a001a2zs6uujx0ddt"},{"post_id":"cji8ksa1q000b2zs6vtcta56w","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa2i001o2zs6rx4vq95h"},{"post_id":"cji8ksa1q000b2zs6vtcta56w","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa2j001s2zs6ztjwuw0n"},{"post_id":"cji8ksa1q000b2zs6vtcta56w","tag_id":"cji8ksa1t000f2zs6yt23smqq","_id":"cji8ksa2l001w2zs6ntqn9j50"},{"post_id":"cji8ksa1r000c2zs6il38gh0g","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa2v002f2zs6p3nym91m"},{"post_id":"cji8ksa1r000c2zs6il38gh0g","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa2v002i2zs6mluasy93"},{"post_id":"cji8ksa1r000c2zs6il38gh0g","tag_id":"cji8ksa1w000k2zs63br31uzl","_id":"cji8ksa2w002l2zs6o5dhoz8s"},{"post_id":"cji8ksa1r000c2zs6il38gh0g","tag_id":"cji8ksa1t000f2zs6yt23smqq","_id":"cji8ksa2x002o2zs6dqhdbg0v"},{"post_id":"cji8ksa1t000e2zs60a0ib9bd","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa2x002r2zs6x7te5w1q"},{"post_id":"cji8ksa1t000e2zs60a0ib9bd","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa2y002u2zs63iox7rza"},{"post_id":"cji8ksa1u000g2zs6zvwp1z36","tag_id":"cji8ksa2x002p2zs6sr1039q6","_id":"cji8ksa3000312zs6hijz8dj1"},{"post_id":"cji8ksa1u000g2zs6zvwp1z36","tag_id":"cji8ksa2z002v2zs68htoiupw","_id":"cji8ksa3000342zs6z1ln28uh"},{"post_id":"cji8ksa1v000j2zs6asxh222f","tag_id":"cji8ksa30002z2zs6epdm3z77","_id":"cji8ksa3100372zs63u2tfq8c"},{"post_id":"cji8ksa1x000l2zs6bhgaj43e","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa32003d2zs6dnw0j6u2"},{"post_id":"cji8ksa1x000l2zs6bhgaj43e","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa33003f2zs6kme60mak"},{"post_id":"cji8ksa1y000p2zs6ulwzcgi5","tag_id":"cji8ksa32003c2zs6vdo4zrwt","_id":"cji8ksa33003h2zs6e11xk73r"},{"post_id":"cji8ksa20000s2zs6zxj67il9","tag_id":"cji8ksa33003g2zs64l0qs4zm","_id":"cji8ksa34003l2zs637t1wcja"},{"post_id":"cji8ksa20000s2zs6zxj67il9","tag_id":"cji8ksa33003i2zs6gupvzcua","_id":"cji8ksa34003m2zs6e2fpk0f6"},{"post_id":"cji8ksa20000s2zs6zxj67il9","tag_id":"cji8ksa33003j2zs6h1kwj8x3","_id":"cji8ksa34003o2zs6l7t9c0ph"},{"post_id":"cji8ksa21000v2zs6ds80fni1","tag_id":"cji8ksa33003k2zs6gdmc98sq","_id":"cji8ksa34003q2zs6k8h4ep9y"},{"post_id":"cji8ksa21000v2zs6ds80fni1","tag_id":"cji8ksa34003n2zs6s9jr5iwp","_id":"cji8ksa35003r2zs6r6zuohfs"},{"post_id":"cji8ksa24000x2zs6tli39m3j","tag_id":"cji8ksa33003k2zs6gdmc98sq","_id":"cji8ksa35003u2zs6ualf26fn"},{"post_id":"cji8ksa24000x2zs6tli39m3j","tag_id":"cji8ksa34003n2zs6s9jr5iwp","_id":"cji8ksa36003v2zs6zfdn9vck"},{"post_id":"cji8ksa2500102zs6zg86wsj3","tag_id":"cji8ksa33003k2zs6gdmc98sq","_id":"cji8ksa37003y2zs6b4g2i4uj"},{"post_id":"cji8ksa2500102zs6zg86wsj3","tag_id":"cji8ksa34003n2zs6s9jr5iwp","_id":"cji8ksa37003z2zs68k83z7iw"},{"post_id":"cji8ksa2700112zs6kmsshoi0","tag_id":"cji8ksa33003k2zs6gdmc98sq","_id":"cji8ksa3800432zs6q60qu3pa"},{"post_id":"cji8ksa2700112zs6kmsshoi0","tag_id":"cji8ksa34003n2zs6s9jr5iwp","_id":"cji8ksa3800442zs633uvvb24"},{"post_id":"cji8ksa2700112zs6kmsshoi0","tag_id":"cji8ksa3800412zs6rtolx87r","_id":"cji8ksa3900462zs6agtsc9dx"},{"post_id":"cji8ksa2800162zs62ajrb3ge","tag_id":"cji8ksa33003k2zs6gdmc98sq","_id":"cji8ksa3900482zs6a3dj745n"},{"post_id":"cji8ksa2800162zs62ajrb3ge","tag_id":"cji8ksa34003n2zs6s9jr5iwp","_id":"cji8ksa3900492zs6pm7fue40"},{"post_id":"cji8ksa2900182zs6oqvo90v2","tag_id":"cji8ksa33003k2zs6gdmc98sq","_id":"cji8ksa3a004c2zs629aznai8"},{"post_id":"cji8ksa2900182zs6oqvo90v2","tag_id":"cji8ksa34003n2zs6s9jr5iwp","_id":"cji8ksa3a004d2zs6dvvvndp5"},{"post_id":"cji8ksa2a001c2zs6izg8vypi","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3b004f2zs6nvgrzbir"},{"post_id":"cji8ksa2a001c2zs6izg8vypi","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3b004g2zs6gajowlnk"},{"post_id":"cji8ksa2a001c2zs6izg8vypi","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3c004i2zs6br05sj3h"},{"post_id":"cji8ksa2c001e2zs6dlpbrbmk","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3c004j2zs6k1b10mlt"},{"post_id":"cji8ksa2c001e2zs6dlpbrbmk","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3d004l2zs6rgvl9xyr"},{"post_id":"cji8ksa2c001e2zs6dlpbrbmk","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3d004m2zs6vpylmrdb"},{"post_id":"cji8ksa2e001g2zs61y4oq122","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3e004o2zs69eoybnfz"},{"post_id":"cji8ksa2e001g2zs61y4oq122","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3e004p2zs6elnln6kw"},{"post_id":"cji8ksa2e001g2zs61y4oq122","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3f004r2zs6wuzdja1a"},{"post_id":"cji8ksa2f001j2zs6xas7gl0f","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3f004s2zs6dfvufnn1"},{"post_id":"cji8ksa2f001j2zs6xas7gl0f","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3g004u2zs61y8qe1i4"},{"post_id":"cji8ksa2f001j2zs6xas7gl0f","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3g004v2zs67rc5iqn8"},{"post_id":"cji8ksa2h001m2zs6e6lligic","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3h004x2zs6uji38969"},{"post_id":"cji8ksa2h001m2zs6e6lligic","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3h004y2zs6eau3qpyk"},{"post_id":"cji8ksa2h001m2zs6e6lligic","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3h00502zs6lbx1rjza"},{"post_id":"cji8ksa2i001q2zs6sifu9bx0","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3h00512zs6yxtjqyh8"},{"post_id":"cji8ksa2i001q2zs6sifu9bx0","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3i00532zs633slfzzm"},{"post_id":"cji8ksa2i001q2zs6sifu9bx0","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3i00542zs6necji1i8"},{"post_id":"cji8ksa2k001u2zs6nj4mskt2","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3i00562zs6414d3m5n"},{"post_id":"cji8ksa2k001u2zs6nj4mskt2","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3i00572zs69utwqdr5"},{"post_id":"cji8ksa2k001u2zs6nj4mskt2","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3j00592zs63ip7wf3t"},{"post_id":"cji8ksa2l001y2zs6aq19p1og","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3j005a2zs66oq2qo1i"},{"post_id":"cji8ksa2l001y2zs6aq19p1og","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3j005c2zs6veig0m0g"},{"post_id":"cji8ksa2l001y2zs6aq19p1og","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3j005d2zs6klggdv4o"},{"post_id":"cji8ksa2n00212zs6qcubjldn","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3j005e2zs61wik2c1w"},{"post_id":"cji8ksa2n00212zs6qcubjldn","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3j005g2zs61zhq7ex3"},{"post_id":"cji8ksa2n00212zs6qcubjldn","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3j005h2zs6kg4ekz7d"},{"post_id":"cji8ksa2o00242zs6bumlgvaf","tag_id":"cji8ksa3i00522zs6nd2lw8mw","_id":"cji8ksa3k005j2zs6p2ziiux5"},{"post_id":"cji8ksa2o00242zs6bumlgvaf","tag_id":"cji8ksa3i00552zs69ib5h28w","_id":"cji8ksa3k005k2zs67ezgk9lc"},{"post_id":"cji8ksa2q00272zs6lsxu5o43","tag_id":"cji8ksa3i00582zs6gfsps98u","_id":"cji8ksa3k005n2zs6p1xttte6"},{"post_id":"cji8ksa2q00272zs6lsxu5o43","tag_id":"cji8ksa3j005b2zs60nodh9bh","_id":"cji8ksa3l005o2zs6dc92mz0g"},{"post_id":"cji8ksa2q00272zs6lsxu5o43","tag_id":"cji8ksa3j005f2zs6ai6f7z4i","_id":"cji8ksa3l005q2zs68bb8p36d"},{"post_id":"cji8ksa2q00272zs6lsxu5o43","tag_id":"cji8ksa3j005i2zs6r34yr4n6","_id":"cji8ksa3l005r2zs6t1hfqdfq"},{"post_id":"cji8ksa2q00272zs6lsxu5o43","tag_id":"cji8ksa3k005l2zs6wlpzv6w7","_id":"cji8ksa3m005t2zs69ric0bx5"},{"post_id":"cji8ksa2s00292zs67an2q6hd","tag_id":"cji8ksa3k005m2zs65s7k3zag","_id":"cji8ksa3m005u2zs61zzp6ff9"},{"post_id":"cji8ksa2s00292zs67an2q6hd","tag_id":"cji8ksa32003c2zs6vdo4zrwt","_id":"cji8ksa3m005v2zs6y306zs9p"},{"post_id":"cji8ksa2u002d2zs6yw775kp3","tag_id":"cji8ksa2700122zs6thk5lrlw","_id":"cji8ksa3m005w2zs6bogs7tet"},{"post_id":"cji8ksa2u002d2zs6yw775kp3","tag_id":"cji8ksa2a00192zs6kg4zcnrt","_id":"cji8ksa3m005x2zs6opfarl7q"},{"post_id":"cji8ksa2u002d2zs6yw775kp3","tag_id":"cji8ksa3a004b2zs6x0pr4sp6","_id":"cji8ksa3m005y2zs68rudeh0y"}],"Tag":[{"name":"MySQL","_id":"cji8ksa1q000a2zs6eoeq8q0b"},{"name":"CentOS","_id":"cji8ksa1t000f2zs6yt23smqq"},{"name":"Linux","_id":"cji8ksa1w000k2zs63br31uzl"},{"name":"vim","_id":"cji8ksa20000r2zs6z987fqru"},{"name":"Mac","_id":"cji8ksa24000w2zs6e1ax8bpb"},{"name":"OpenJDK","_id":"cji8ksa2700122zs6thk5lrlw"},{"name":"JVM","_id":"cji8ksa2a00192zs6kg4zcnrt"},{"name":"IntelliJ IDEA","_id":"cji8ksa2x002p2zs6sr1039q6"},{"name":"插件","_id":"cji8ksa2z002v2zs68htoiupw"},{"name":"MyBatis","_id":"cji8ksa30002z2zs6epdm3z77"},{"name":"Python","_id":"cji8ksa32003c2zs6vdo4zrwt"},{"name":"Nginx","_id":"cji8ksa33003g2zs64l0qs4zm"},{"name":"Lua","_id":"cji8ksa33003i2zs6gupvzcua"},{"name":"权限","_id":"cji8ksa33003j2zs6h1kwj8x3"},{"name":"Spring Cloud","_id":"cji8ksa33003k2zs6gdmc98sq"},{"name":"Spring Boot","_id":"cji8ksa34003n2zs6s9jr5iwp"},{"name":"Redis","_id":"cji8ksa3800412zs6rtolx87r"},{"name":"HotSpot","_id":"cji8ksa3a004b2zs6x0pr4sp6"},{"name":"多线程","_id":"cji8ksa3i00522zs6nd2lw8mw"},{"name":"MQ","_id":"cji8ksa3i00552zs69ib5h28w"},{"name":"架构","_id":"cji8ksa3i00582zs6gfsps98u"},{"name":"集群","_id":"cji8ksa3j005b2zs60nodh9bh"},{"name":"异步","_id":"cji8ksa3j005f2zs6ai6f7z4i"},{"name":"回调","_id":"cji8ksa3j005i2zs6r34yr4n6"},{"name":"Netty","_id":"cji8ksa3k005l2zs6wlpzv6w7"},{"name":"爬虫","_id":"cji8ksa3k005m2zs65s7k3zag"}]}}